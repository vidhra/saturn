Metadata-Version: 2.4
Name: saturn
Version: 0.1.0
Summary: A natural language interface for Google Cloud Platform APIs.
Author-email: Your Name <your.email@example.com>
Project-URL: Homepage, https://github.com/yourusername/saturn
Project-URL: Bug Tracker, https://github.com/yourusername/saturn/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: openai>=1.3.0
Requires-Dist: google-cloud-aiplatform>=1.38.0
Requires-Dist: anthropic>=0.15.0
Requires-Dist: mistralai>=0.1.0
Requires-Dist: google-auth>=2.0.0
Requires-Dist: google-api-python-client>=2.0.0
Requires-Dist: google-cloud>=0.31.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: google-generativeai>=0.8.0
Requires-Dist: PyYAML>=6.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: typer[all]>=0.9.0
Requires-Dist: json-repair>=0.19.0
Requires-Dist: rich>=13.0.0
Dynamic: license-file

# Saturn - Natural Language Interface for Google Cloud Platform

Saturn aims to provide a conversational interface for interacting with Google Cloud Platform (GCP) APIs. Instead of writing scripts or using the Cloud Console UI, users can state their goals in natural language, and Saturn will translate them into the appropriate GCP API calls.

## Goals

*   **Natural Language Control:** Allow users to manage GCP resources using plain English commands.
*   **LLM Agnostic:** Support multiple Large Language Models (LLMs) like OpenAI GPT, Google Gemini, Anthropic Claude, and Mistral models via configurable interfaces.
*   **Extensible Knowledge Base:** Use API definitions (e.g., OpenAPI specs, potentially other formats) stored locally (`api_defs/`) to inform the LLM about available GCP tools (functions/API calls) and their parameters.
*   **Robust Execution:** Reliably execute the API calls identified by the LLM.
*   **Error Handling & Retries:** Automatically handle errors during API execution and provide feedback to the LLM for correction within a retry loop.
*   **State Tracking (Optional):** Record the execution flow and outcomes for debugging and auditing (`saturn_run_state.json`).

## Core Components

1.  **CLI (`saturn/cli.py`):** The command-line interface (using Typer) that accepts user queries and configuration overrides. Defines the `saturn run` command.
2.  **Configuration (`saturn/config.py`):** Loads configuration from `config.yaml` and environment variables (`.env`).
3.  **LLM Interfaces (`model/llm/`):** Contains wrappers for different LLM providers (OpenAI, Gemini, etc.), handling API calls and function/tool calling logic specific to each provider.
4.  **Knowledge Base (`saturn/knowledge_base.py`):** Loads API definitions from the `api_defs/` directory and provides the available tools list to the LLM.
5.  **GCP Executor (`saturn/gcp_executor.py`):** Takes a tool name and arguments (as decided by the LLM) and executes the corresponding GCP API call using the appropriate Python client library. Handles authentication (primarily via Application Default Credentials).
6.  **Orchestrator (`saturn/orchestrator.py`):** The main control loop (`run_query_with_feedback`) that:
    *   Takes the user query.
    *   Calls the selected LLM Interface to get a plan (list of tool calls), providing available tools and previous errors.
    *   Manages the execution of the planned tool calls via the GCP Executor, potentially handling dependencies and concurrency (using node states).
    *   Collects results and errors.
    *   Retries the LLM call with error feedback if necessary.
7.  **State Recorder (`internal/state_recorder.py`):** (Optional) Logs the detailed state transitions and outcomes of each node (tool call) during a run to a JSON file (`saturn_run_state.json`).

## Setup

1.  **Clone the repository:**
    ```bash
    git clone <your-repo-url>
    cd saturn # Or your project directory name
    ```
2.  **Create and activate a virtual environment (Recommended):**
    ```bash
    # Using venv
    python -m venv venv
    source venv/bin/activate # Linux/macOS
    # .\venv\Scripts\activate # Windows

    # Or using conda
    # conda create -n saturnenv python=3.10 # Adjust Python version if needed
    # conda activate saturnenv
    ```
3.  **Install dependencies:** Install the package in editable mode along with its dependencies using the `pyproject.toml` file.
    ```bash
    pip install -e .
    ```

## Configuration

Configuration is handled via `config.yaml` and environment variables (loaded from a `.env` file if present).

1.  **`config.yaml`:** Create this file in the project root. Add base configuration like default LLM provider, API keys (though environment variables are generally preferred for secrets), and GCP project ID.
    ```yaml
    # Example config.yaml
    llm_provider: openai # 'gemini', 'claude', 'mistral'
    # openai_api_key: 'sk-...' # Better to use env var
    gcp_project_id: your-gcp-project-id # Replace with your default project
    kb_path: api_defs
    max_retries: 3
    # openai_model: gpt-4o # Optional model specification
    ```
2.  **`.env` File:** Create this file in the project root for sensitive information like API keys. **Ensure this file is added to your `.gitignore`!**
    ```dotenv
    # Example .env
    OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    GEMINI_API_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    # ANTHROPIC_API_KEY=...
    # MISTRAL_API_KEY=...
    GCP_PROJECT_ID=your-gcp-project-id # Can also be set here
    # GCP_CREDENTIALS_PATH=/path/to/your/service-account-key.json # Optional
    ```
3.  **GCP Authentication:** Ensure your environment is authenticated to GCP. The easiest way for local development is Application Default Credentials (ADC):
    ```bash
    gcloud auth application-default login
    ```
    Alternatively, set the `GCP_CREDENTIALS_PATH` environment variable (or config value) to point to a service account key JSON file.

## Usage

Run Saturn from your terminal using the installed command (defined via `pyproject.toml` pointing to `saturn.cli:app`):

```bash
saturn run "<your natural language query>" [OPTIONS]
```

**Example:**

```bash
saturn run "Create a serverless VPC access connector named 'dev-connector' in us-central1 with IP range 10.9.0.0/28 in the default network." --project-id my-dev-project
```

**Common Options:**

*   `--project-id TEXT`: Specify the target GCP project ID (overrides config/env).
*   `--provider TEXT`: Specify the LLM provider (e.g., `openai`, `gemini`).
*   `--model TEXT`: Specify a specific LLM model for the chosen provider.
*   `--creds-path TEXT`: Path to a GCP service account key file.
*   `--max-retries INTEGER`: Number of attempts for the orchestrator loop.
*   `--kb-path TEXT`: Path to the API definitions directory.

Use `saturn run --help` to see all available options.

## State Recording

The `RunStateLogger` is integrated into the orchestrator. After each run, it generates/updates `saturn_run_state.json` in the project root. This file contains:
*   `run_info`: Details about the overall run (query, times, status, errors).
*   `nodes`: Detailed state history for each tool call (node) attempted during the run, including arguments, status transitions (PENDING, READY, RUNNING, COMPLETED/FAILED), timestamps, and final output or error.
