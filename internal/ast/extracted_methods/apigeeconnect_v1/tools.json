{
  "ConnectionService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_connections",
          "description": "Lists connections that are currently active for the\ngiven Apigee Connect endpoint.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigeeconnect_v1\n\n    async def sample_list_connections():\n        # Create a client\n        client = apigeeconnect_v1.ConnectionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigeeconnect_v1.ListConnectionsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_connections(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent name of the form: ``projects/{project_number or project_id}/endpoints/{endpoint}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigeeconnect_v1.services.connection_service.pagers.ListConnectionsAsyncPager: The response for [ListConnections][Management.ListConnections].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "connection.ListConnectionsRequest"
          ]
        }
      }
    ]
  },
  "Tether": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "egress",
          "description": "Egress streams egress requests and responses.\nLogically, this is not actually a streaming request, but\nuses streaming as a mechanism to flip the client-server\nrelationship of gRPC so that the server can act as a\nclient.\nThe listener, the RPC server, accepts connections from\nthe dialer, the RPC client.\nThe listener streams http requests and the dialer\nstreams http responses.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigeeconnect_v1\n\n    async def sample_egress():\n        # Create a client\n        client = apigeeconnect_v1.TetherAsyncClient()\n\n        # Initialize request argument(s)\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "requests": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  }
}