{
  "DataCatalog": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "search_catalog",
          "description": "Searches Data Catalog for multiple resources like entries and\ntags that match a query.\n\nThis is a [Custom Method]\n(https://cloud.google.com/apis/design/custom_methods) that\ndoesn't return all information on a resource, only its ID and\nhigh level fields. To get more information, you can subsequently\ncall specific get methods.\n\nNote: Data Catalog search queries don't guarantee full recall.\nResults that match your query might not be returned, even in\nsubsequent result pages. Additionally, returned (and not\nreturned) results can vary if you repeat search queries.\n\nFor more information, see [Data Catalog search syntax]\n(https://cloud.google.com/data-catalog/docs/how-to/search-reference).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "scope": {
                "type": "google.cloud.datacatalog_v1.types.SearchCatalogRequest.Scope",
                "description": "Required. The scope of this search request.  The ``scope`` is invalid if ``include_org_ids``, ``include_project_ids`` are empty AND ``include_gcp_public_datasets`` is set to ``false``. In this case, the request returns an error.  This corresponds to the ``scope`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "query": {
                "type": "str",
                "description": "Optional. The query string with a minimum of 3 characters and specific syntax. For more information, see `Data Catalog search syntax <https://cloud.google.com/data-catalog/docs/how-to/search-reference>`__.  An empty query string returns all data assets (in the specified scope) that you have access to.  A query string can be a simple ``xyz`` or qualified by predicates:  -  ``name:x`` -  ``column:y`` -  ``description:z``  This corresponds to the ``query`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.services.data_catalog.pagers.SearchCatalogAsyncPager: Response message for [SearchCatalog][google.cloud.datacatalog.v1.DataCatalog.SearchCatalog].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "scope",
              "query",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.services.data_catalog.pagers.SearchCatalogAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_entry_group",
          "description": "Creates an entry group.\n\nAn entry group contains logically related entries together with\n`Cloud Identity and Access\nManagement </data-catalog/docs/concepts/iam>`__ policies. These\npolicies specify users who can create, edit, and view entries\nwithin entry groups.\n\nData Catalog automatically creates entry groups with names that\nstart with the ``@`` symbol for the following resources:\n\n-  BigQuery entries (``@bigquery``)\n-  Pub/Sub topics (``@pubsub``)\n-  Dataproc Metastore services\n   (``@dataproc_metastore_{SERVICE_NAME_HASH}``)\n\nYou can create your own entry groups for Cloud Storage fileset\nentries and custom entries together with the corresponding IAM\npolicies. User-created entry groups can't contain the ``@``\nsymbol, it is reserved for automatically created groups.\n\nEntry groups, like entries, can be searched.\n\nA maximum of 10,000 entry groups may be created per organization\nacross all locations.\n\nYou must enable the Data Catalog API in the project identified\nby the ``parent`` parameter. For more informatio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The names of the project and location that the new entry group belongs to.  Note: The entry group itself and its child resources might not be stored in the location specified in its name.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "entry_group_id": {
                "type": "str",
                "description": "Required. The ID of the entry group to create.  The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and must start with a letter or underscore. The maximum size is 64 bytes when encoded in UTF-8.  This corresponds to the ``entry_group_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "entry_group": {
                "type": "google.cloud.datacatalog_v1.types.EntryGroup",
                "description": "The entry group to create. Defaults to empty.  This corresponds to the ``entry_group`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.EntryGroup: Entry group metadata.  An EntryGroup resource represents a logical grouping of zero or more Data Catalog [Entry][google.cloud.datacatalog.v1.Entry] resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "entry_group_id",
              "entry_group",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.EntryGroup"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_entry_group",
          "description": "Gets an entry group.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_get_entry_group():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.GetEntryGroupRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_entry_group(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.datacatalog_v1.types.GetEntryGroupRequest, dict]]):\n        Th",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the entry group to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "read_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The fields to return. If empty or omitted, all fields are returned.  This corresponds to the ``read_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.EntryGroup: Entry group metadata.  An EntryGroup resource represents a logical grouping of zero or more Data Catalog [Entry][google.cloud.datacatalog.v1.Entry] resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "read_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.EntryGroup"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_entry_group",
          "description": "Updates an entry group.\n\nYou must enable the Data Catalog API in the project identified\nby the ``entry_group.name`` parameter. For more information, see\n`Data Catalog resource\nproject <https://cloud.google.com/data-catalog/docs/concepts/resource-project>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_update_entry_group():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.UpdateEntryGroupRequest(\n        )\n\n        # Make the request\n        response ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "entry_group": {
                "type": "google.cloud.datacatalog_v1.types.EntryGroup",
                "description": "Required. Updates for the entry group. The ``name`` field must be set.  This corresponds to the ``entry_group`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Names of fields whose values to overwrite on an entry group. If this parameter is absent or empty, all modifiable fields are overwritten. If such fields are non-required and omitted in the request body, their values are emptied.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.EntryGroup: Entry group metadata.  An EntryGroup resource represents a logical grouping of zero or more Data Catalog [Entry][google.cloud.datacatalog.v1.Entry] resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "entry_group",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.EntryGroup"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_entry_group",
          "description": "Deletes an entry group.\n\nYou must enable the Data Catalog API in the project identified\nby the ``name`` parameter. For more information, see `Data\nCatalog resource\nproject <https://cloud.google.com/data-catalog/docs/concepts/resource-project>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_delete_entry_group():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.DeleteEntryGroupRequest(\n            name=\"name_value\",\n        )\n\n        # Make the reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the entry group to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_entry_groups",
          "description": "Lists entry groups.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_list_entry_groups():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.ListEntryGroupsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_entry_groups(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.datacatal",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the location that contains the entry groups to list. Can be provided as a URL.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.services.data_catalog.pagers.ListEntryGroupsAsyncPager: Response message for [ListEntryGroups][google.cloud.datacatalog.v1.DataCatalog.ListEntryGroups].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.services.data_catalog.pagers.ListEntryGroupsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_entry",
          "description": "Creates an entry.\n\nYou can create entries only with 'FILESET', 'CLUSTER',\n'DATA_STREAM', or custom types. Data Catalog automatically\ncreates entries with other types during metadata ingestion from\nintegrated systems.\n\nYou must enable the Data Catalog API in the project identified\nby the ``parent`` parameter. For more information, see `Data\nCatalog resource\nproject <https://cloud.google.com/data-catalog/docs/concepts/resource-project>`__.\n\nAn entry group can have a maximum of 100,000 entries.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_create_entry():\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the entry group this entry belongs to. Note: The entry itself and its child resources might not be stored in the location specified in its name.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "entry_id": {
                "type": "str",
                "description": "Required. The ID of the entry to create.  The ID must contain only letters (a-z, A-Z), numbers (0-9), and underscores (_). The maximum size is 64 bytes when encoded in UTF-8.  This corresponds to the ``entry_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "entry": {
                "type": "google.cloud.datacatalog_v1.types.Entry",
                "description": "Required. The entry to create. This corresponds to the ``entry`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.Entry: Entry metadata. A Data Catalog entry represents another resource in Google Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic) or outside of it. You can use the linked_resource field in the entry resource to refer to the original resource ID of the source system.  An entry resource contains resource details, for example, its schema. Additionally, you can attach flexible metadata to an entry in the form of a [Tag][google.cloud.datacatalog.v1.Tag]."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "entry_id",
              "entry",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.Entry"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_entry",
          "description": "Updates an existing entry.\n\nYou must enable the Data Catalog API in the project identified\nby the ``entry.name`` parameter. For more information, see `Data\nCatalog resource\nproject <https://cloud.google.com/data-catalog/docs/concepts/resource-project>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_update_entry():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        entry = datacatalog_v1.Entry()\n        entry.type_ = \"FEATURE_GROUP\"\n        entry.integrated_system = \"VERTEX_AI\"",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "entry": {
                "type": "google.cloud.datacatalog_v1.types.Entry",
                "description": "Required. Updates for the entry. The ``name`` field must be set.  This corresponds to the ``entry`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Names of fields whose values to overwrite on an entry.  If this parameter is absent or empty, all modifiable fields are overwritten. If such fields are non-required and omitted in the request body, their values are emptied.  You can modify only the fields listed below.  For entries with type ``DATA_STREAM``:  -  ``schema``  For entries with type ``FILESET``:  -  ``schema`` -  ``display_name`` -  ``description`` -  ``gcs_fileset_spec`` -  ``gcs_fileset_spec.file_patterns``  For entries with ``user_specified_type``:  -  ``schema`` -  ``display_name`` -  ``description`` -  ``user_specified_type`` -  ``user_specified_system`` -  ``linked_resource`` -  ``source_system_timestamps``  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.Entry: Entry metadata. A Data Catalog entry represents another resource in Google Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic) or outside of it. You can use the linked_resource field in the entry resource to refer to the original resource ID of the source system.  An entry resource contains resource details, for example, its schema. Additionally, you can attach flexible metadata to an entry in the form of a [Tag][google.cloud.datacatalog.v1.Tag]."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "entry",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.Entry"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_entry",
          "description": "Deletes an existing entry.\n\nYou can delete only the entries created by the\n[CreateEntry][google.cloud.datacatalog.v1.DataCatalog.CreateEntry]\nmethod.\n\nYou must enable the Data Catalog API in the project identified\nby the ``name`` parameter. For more information, see `Data\nCatalog resource\nproject <https://cloud.google.com/data-catalog/docs/concepts/resource-project>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_delete_entry():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the entry to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_entry",
          "description": "Gets an entry.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_get_entry():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.GetEntryRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_entry(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.datacatalog_v1.types.GetEntryRequest, dict]]):\n        The request object. Request me",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the entry to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.Entry: Entry metadata. A Data Catalog entry represents another resource in Google Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic) or outside of it. You can use the linked_resource field in the entry resource to refer to the original resource ID of the source system.  An entry resource contains resource details, for example, its schema. Additionally, you can attach flexible metadata to an entry in the form of a [Tag][google.cloud.datacatalog.v1.Tag]."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.Entry"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "lookup_entry",
          "description": "Gets an entry by its target resource name.\n\nThe resource name comes from the source Google Cloud\nPlatform service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_lookup_entry():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.LookupEntryRequest(\n            linked_resource=\"linked_resource_value\",\n        )\n\n        # Make the request\n        response = await client.lookup_entry(request=request)\n\n        # Handle the response\n        print(response)\n\nA",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.Entry"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_entries",
          "description": "Lists entries.\n\nNote: Currently, this method can list only custom entries. To\nget a list of both custom and automatically created entries, use\n[SearchCatalog][google.cloud.datacatalog.v1.DataCatalog.SearchCatalog].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_list_entries():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.ListEntriesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_ent",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the entry group that contains the entries to list. Can be provided in URL format.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.services.data_catalog.pagers.ListEntriesAsyncPager: Response message for [ListEntries][google.cloud.datacatalog.v1.DataCatalog.ListEntries].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.services.data_catalog.pagers.ListEntriesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "modify_entry_overview",
          "description": "Modifies entry overview, part of the business context of an\n[Entry][google.cloud.datacatalog.v1.Entry].\n\nTo call this method, you must have the\n``datacatalog.entries.updateOverview`` IAM permission on the\ncorresponding project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_modify_entry_overview():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.ModifyEntryOverviewRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        res",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.EntryOverview"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "modify_entry_contacts",
          "description": "Modifies contacts, part of the business context of an\n[Entry][google.cloud.datacatalog.v1.Entry].\n\nTo call this method, you must have the\n``datacatalog.entries.updateContacts`` IAM permission on the\ncorresponding project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_modify_entry_contacts():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.ModifyEntryContactsRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.Contacts"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_tag_template",
          "description": "Creates a tag template.\n\nYou must enable the Data Catalog API in the project identified\nby the ``parent`` parameter. For more information, see [Data\nCatalog resource project]\n(https://cloud.google.com/data-catalog/docs/concepts/resource-project).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_create_tag_template():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.CreateTagTemplateRequest(\n            parent=\"parent_value\",\n            tag_template_id=\"t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the project and the template location `region <https://cloud.google.com/data-catalog/docs/concepts/regions>`__.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "tag_template_id": {
                "type": "str",
                "description": "Required. The ID of the tag template to create.  The ID must contain only lowercase letters (a-z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum size is 64 bytes when encoded in UTF-8.  This corresponds to the ``tag_template_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "tag_template": {
                "type": "google.cloud.datacatalog_v1.types.TagTemplate",
                "description": "Required. The tag template to create. This corresponds to the ``tag_template`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.TagTemplate: A tag template defines a tag that can have one or more typed fields.  The template is used to create tags that are attached to Google Cloud resources. [Tag template roles]  (https://cloud.google.com/iam/docs/understanding-roles#data-catalog-roles) provide permissions to create, edit, and use the template. For example, see the [TagTemplate User] (https://cloud.google.com/data-catalog/docs/how-to/template-user) role that includes a permission to use the tag template to tag resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "tag_template_id",
              "tag_template",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.TagTemplate"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_tag_template",
          "description": "Gets a tag template.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_get_tag_template():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.GetTagTemplateRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_tag_template(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.datacatalog_v1.types.GetTagTemplateRequest, dict]]):\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the tag template to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.TagTemplate: A tag template defines a tag that can have one or more typed fields.  The template is used to create tags that are attached to Google Cloud resources. [Tag template roles]  (https://cloud.google.com/iam/docs/understanding-roles#data-catalog-roles) provide permissions to create, edit, and use the template. For example, see the [TagTemplate User] (https://cloud.google.com/data-catalog/docs/how-to/template-user) role that includes a permission to use the tag template to tag resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.TagTemplate"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_tag_template",
          "description": "Updates a tag template.\n\nYou can't update template fields with this method. These fields\nare separate resources with their own create, update, and delete\nmethods.\n\nYou must enable the Data Catalog API in the project identified\nby the ``tag_template.name`` parameter. For more information,\nsee `Data Catalog resource\nproject <https://cloud.google.com/data-catalog/docs/concepts/resource-project>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_update_tag_template():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Ini",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "tag_template": {
                "type": "google.cloud.datacatalog_v1.types.TagTemplate",
                "description": "Required. The template to update. The ``name`` field must be set.  This corresponds to the ``tag_template`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Names of fields whose values to overwrite on a tag template. Currently, only ``display_name`` and ``is_publicly_readable`` can be overwritten.  If this parameter is absent or empty, all modifiable fields are overwritten. If such fields are non-required and omitted in the request body, their values are emptied.  Note: Updating the ``is_publicly_readable`` field may require up to 12 hours to take effect in search results.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.TagTemplate: A tag template defines a tag that can have one or more typed fields.  The template is used to create tags that are attached to Google Cloud resources. [Tag template roles]  (https://cloud.google.com/iam/docs/understanding-roles#data-catalog-roles) provide permissions to create, edit, and use the template. For example, see the [TagTemplate User] (https://cloud.google.com/data-catalog/docs/how-to/template-user) role that includes a permission to use the tag template to tag resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "tag_template",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.TagTemplate"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_tag_template",
          "description": "Deletes a tag template and all tags that use it.\n\nYou must enable the Data Catalog API in the project identified\nby the ``name`` parameter. For more information, see `Data\nCatalog resource\nproject <https://cloud.google.com/data-catalog/docs/concepts/resource-project>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_delete_tag_template():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.DeleteTagTemplateRequest(\n            name=\"name_value\",\n         ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the tag template to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "force": {
                "type": "bool",
                "description": "Required. If true, deletes all tags that use this template.  Currently, ``true`` is the only supported value.  This corresponds to the ``force`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "force",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_tag_template_field",
          "description": "Creates a field in a tag template.\n\nYou must enable the Data Catalog API in the project identified\nby the ``parent`` parameter. For more information, see `Data\nCatalog resource\nproject <https://cloud.google.com/data-catalog/docs/concepts/resource-project>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_create_tag_template_field():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        tag_template_field = datacatalog_v1.TagTemplateField()\n        tag_template_field.type_.primitive",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the project and the template location `region <https://cloud.google.com/data-catalog/docs/concepts/regions>`__.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "tag_template_field_id": {
                "type": "str",
                "description": "Required. The ID of the tag template field to create.  Note: Adding a required field to an existing template is *not* allowed.  Field IDs can contain letters (both uppercase and lowercase), numbers (0-9), underscores (_) and dashes (-). Field IDs must be at least 1 character long and at most 128 characters long. Field IDs must also be unique within their template.  This corresponds to the ``tag_template_field_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "tag_template_field": {
                "type": "google.cloud.datacatalog_v1.types.TagTemplateField",
                "description": "Required. The tag template field to create.  This corresponds to the ``tag_template_field`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.TagTemplateField: The template for an individual field within a tag template."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "tag_template_field_id",
              "tag_template_field",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.TagTemplateField"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_tag_template_field",
          "description": "Updates a field in a tag template.\n\nYou can't update the field type with this method.\n\nYou must enable the Data Catalog API in the project identified\nby the ``name`` parameter. For more information, see `Data\nCatalog resource\nproject <https://cloud.google.com/data-catalog/docs/concepts/resource-project>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_update_tag_template_field():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        tag_template_field = datacatalog_v1.TagTemplateF",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the tag template field.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "tag_template_field": {
                "type": "google.cloud.datacatalog_v1.types.TagTemplateField",
                "description": "Required. The template to update. This corresponds to the ``tag_template_field`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Names of fields whose values to overwrite on an individual field of a tag template. The following fields are modifiable:  -  ``display_name`` -  ``type.enum_type`` -  ``is_required``  If this parameter is absent or empty, all modifiable fields are overwritten. If such fields are non-required and omitted in the request body, their values are emptied with one exception: when updating an enum type, the provided values are merged with the existing values. Therefore, enum values can only be added, existing enum values cannot be deleted or renamed.  Additionally, updating a template field from optional to required is *not* allowed.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.TagTemplateField: The template for an individual field within a tag template."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "tag_template_field",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.TagTemplateField"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "rename_tag_template_field",
          "description": "Renames a field in a tag template.\n\nYou must enable the Data Catalog API in the project identified\nby the ``name`` parameter. For more information, see [Data\nCatalog resource project]\n(https://cloud.google.com/data-catalog/docs/concepts/resource-project).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_rename_tag_template_field():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.RenameTagTemplateFieldRequest(\n            name=\"name_value\",\n            ne",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the tag template field.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "new_tag_template_field_id": {
                "type": "str",
                "description": "Required. The new ID of this tag template field. For example, ``my_new_field``.  This corresponds to the ``new_tag_template_field_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.TagTemplateField: The template for an individual field within a tag template."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "new_tag_template_field_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.TagTemplateField"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "rename_tag_template_field_enum_value",
          "description": "Renames an enum value in a tag template.\n\nWithin a single enum field, enum values must be unique.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_rename_tag_template_field_enum_value():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.RenameTagTemplateFieldEnumValueRequest(\n            name=\"name_value\",\n            new_enum_value_display_name=\"new_enum_value_display_name_value\",\n        )\n\n        # Make the request\n        response = await client.renam",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the enum field value.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "new_enum_value_display_name": {
                "type": "str",
                "description": "Required. The new display name of the enum value. For example, ``my_new_enum_value``.  This corresponds to the ``new_enum_value_display_name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.TagTemplateField: The template for an individual field within a tag template."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "new_enum_value_display_name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.TagTemplateField"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_tag_template_field",
          "description": "Deletes a field in a tag template and all uses of this field\nfrom the tags based on this template.\n\nYou must enable the Data Catalog API in the project identified\nby the ``name`` parameter. For more information, see `Data\nCatalog resource\nproject <https://cloud.google.com/data-catalog/docs/concepts/resource-project>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_delete_tag_template_field():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.DeleteTagT",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the tag template field to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "force": {
                "type": "bool",
                "description": "Required. If true, deletes this field from any tags that use it.  Currently, ``true`` is the only supported value.  This corresponds to the ``force`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "force",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_tag",
          "description": "Creates a tag and assigns it to:\n\n-  An [Entry][google.cloud.datacatalog.v1.Entry] if the method\n   name is\n   ``projects.locations.entryGroups.entries.tags.create``.\n-  Or [EntryGroup][google.cloud.datacatalog.v1.EntryGroup]if the\n   method name is\n   ``projects.locations.entryGroups.tags.create``.\n\nNote: The project identified by the ``parent`` parameter for the\n[tag]\n(https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters)\nand the [tag template]\n(https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters)\nused to create the tag must be in the same organization.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the s",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the resource to attach this tag to. Tags can be attached to entries or entry groups. An entry can have up to 1000 attached tags.  Note: The tag and its child resources might not be stored in the location specified in its name.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "tag": {
                "type": "google.cloud.datacatalog_v1.types.Tag",
                "description": "Required. The tag to create. This corresponds to the ``tag`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.Tag: Tags contain custom metadata and are attached to Data Catalog resources. Tags conform with the specification of their tag template.  See [Data Catalog IAM](\\ https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "tag",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.Tag"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_tag",
          "description": "Updates an existing tag.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_update_tag():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        tag = datacatalog_v1.Tag()\n        tag.column = \"column_value\"\n        tag.template = \"template_value\"\n\n        request = datacatalog_v1.UpdateTagRequest(\n            tag=tag,\n        )\n\n        # Make the request\n        response = await client.update_tag(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "tag": {
                "type": "google.cloud.datacatalog_v1.types.Tag",
                "description": "Required. The updated tag. The \"name\" field must be set.  This corresponds to the ``tag`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Names of fields whose values to overwrite on a tag. Currently, a tag has the only modifiable field with the name ``fields``.  In general, if this parameter is absent or empty, all modifiable fields are overwritten. If such fields are non-required and omitted in the request body, their values are emptied.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.Tag: Tags contain custom metadata and are attached to Data Catalog resources. Tags conform with the specification of their tag template.  See [Data Catalog IAM](\\ https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "tag",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.Tag"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_tag",
          "description": "Deletes a tag.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_delete_tag():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.DeleteTagRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_tag(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.datacatalog_v1.types.DeleteTagRequest, dict]]):\n        The request object. Request message for\n        [DeleteTag][google.cloud.datacatalog.v1.Data",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the tag to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_tags",
          "description": "Lists tags assigned to an\n[Entry][google.cloud.datacatalog.v1.Entry]. The\n[columns][google.cloud.datacatalog.v1.Tag.column] in the\nresponse are lowercased.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_list_tags():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.ListTagsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_tags(request=request)\n\n        # Handle the response\n        async f",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the Data Catalog resource to list the tags of.  The resource can be an [Entry][google.cloud.datacatalog.v1.Entry] or an [EntryGroup][google.cloud.datacatalog.v1.EntryGroup] (without ``/entries/{entries}`` at the end).  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.services.data_catalog.pagers.ListTagsAsyncPager: Response message for [ListTags][google.cloud.datacatalog.v1.DataCatalog.ListTags].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.services.data_catalog.pagers.ListTagsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "reconcile_tags",
          "description": "``ReconcileTags`` creates or updates a list of tags on the\nentry. If the\n[ReconcileTagsRequest.force_delete_missing][google.cloud.datacatalog.v1.ReconcileTagsRequest.force_delete_missing]\nparameter is set, the operation deletes tags not included in the\ninput tag list.\n\n``ReconcileTags`` returns a [long-running operation]\n[google.longrunning.Operation] resource that can be queried with\n[Operations.GetOperation][google.longrunning.Operations.GetOperation]\nto return [ReconcileTagsMetadata]\n[google.cloud.datacatalog.v1.ReconcileTagsMetadata] and a\n[ReconcileTagsResponse]\n[google.cloud.datacatalog.v1.ReconcileTagsResponse] message.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "star_entry",
          "description": "Marks an [Entry][google.cloud.datacatalog.v1.Entry] as starred\nby the current user. Starring information is private to each\nuser.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_star_entry():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.StarEntryRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.star_entry(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the entry to mark as starred.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.StarEntryResponse: Response message for [StarEntry][google.cloud.datacatalog.v1.DataCatalog.StarEntry]. Empty for now"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.StarEntryResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "unstar_entry",
          "description": "Marks an [Entry][google.cloud.datacatalog.v1.Entry] as NOT\nstarred by the current user. Starring information is private to\neach user.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_unstar_entry():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.UnstarEntryRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.unstar_entry(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the entry to mark as **not** starred.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.UnstarEntryResponse: Response message for [UnstarEntry][google.cloud.datacatalog.v1.DataCatalog.UnstarEntry]. Empty for now"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.UnstarEntryResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "set_iam_policy",
          "description": "Sets an access control policy for a resource. Replaces any\nexisting policy.\n\nSupported resources are:\n\n-  Tag templates\n-  Entry groups\n\nNote: This method sets policies only within Data Catalog and\ncan't be used to manage policies in BigQuery, Pub/Sub, Dataproc\nMetastore, and any external Google Cloud Platform resources\nsynced with the Data Catalog.\n\nTo call this method, you must have the following Google IAM\npermissions:\n\n-  ``datacatalog.tagTemplates.setIamPolicy`` to set policies on\n   tag templates.\n-  ``datacatalog.entryGroups.setIamPolicy`` to set policies on\n   entry groups.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.h",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "resource": {
                "type": "str",
                "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.  This corresponds to the ``resource`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.iam.v1.policy_pb2.Policy: An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.  A Policy is a collection of bindings. A binding binds one or more members, or principals, to a single role. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A role is a named list of permissions; each role can be an IAM predefined role or a user-created custom role.  For some types of Google Cloud resources, a binding can also specify a condition, which is a logical expression that allows access to a resource only if the expression evaluates to true. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](\\ https://cloud.google.com/iam/help/conditions/resource-policies).  **JSON example:**  :literal:`\\`     {       \"bindings\": [         {           \"role\": \"roles/resourcemanager.organizationAdmin\",           \"members\": [             \"user:mike@example.com\",             \"group:admins@example.com\",             \"domain:google.com\",             \"serviceAccount:my-project-id@appspot.gserviceaccount.com\"           ]         },         {           \"role\": \"roles/resourcemanager.organizationViewer\",           \"members\": [             \"user:eve@example.com\"           ],           \"condition\": {             \"title\": \"expirable access\",             \"description\": \"Does not grant access after Sep 2020\",             \"expression\": \"request.time <             timestamp('2020-10-01T00:00:00.000Z')\",           }         }       ],       \"etag\": \"BwWWja0YfJA=\",       \"version\": 3     }`\\ \\`  **YAML example:**  :literal:`\\`     bindings:     - members:       - user:mike@example.com       - group:admins@example.com       - domain:google.com       - serviceAccount:my-project-id@appspot.gserviceaccount.com       role: roles/resourcemanager.organizationAdmin     - members:       - user:eve@example.com       role: roles/resourcemanager.organizationViewer       condition:         title: expirable access         description: Does not grant access after Sep 2020         expression: request.time < timestamp('2020-10-01T00:00:00.000Z')     etag: BwWWja0YfJA=     version: 3`\\ \\`  For a description of IAM and its features, see the [IAM documentation](\\ https://cloud.google.com/iam/docs/)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "resource",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "SetIamPolicyRequest"
          ],
          "response_types": [
            "google.iam.v1.policy_pb2.Policy"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_iam_policy",
          "description": "Gets the access control policy for a resource.\n\nMay return:\n\n-  A\\ ``NOT_FOUND`` error if the resource doesn't exist or you\n   don't have the permission to view it.\n-  An empty policy if the resource exists but doesn't have a set\n   policy.\n\nSupported resources are:\n\n-  Tag templates\n-  Entry groups\n\nNote: This method doesn't get policies from Google Cloud\nPlatform resources ingested into Data Catalog.\n\nTo call this method, you must have the following Google IAM\npermissions:\n\n-  ``datacatalog.tagTemplates.getIamPolicy`` to get policies on\n   tag templates.\n-  ``datacatalog.entryGroups.getIamPolicy`` to get policies on\n   entry groups.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googlea",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "resource": {
                "type": "str",
                "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.  This corresponds to the ``resource`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.iam.v1.policy_pb2.Policy: An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.  A Policy is a collection of bindings. A binding binds one or more members, or principals, to a single role. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A role is a named list of permissions; each role can be an IAM predefined role or a user-created custom role.  For some types of Google Cloud resources, a binding can also specify a condition, which is a logical expression that allows access to a resource only if the expression evaluates to true. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](\\ https://cloud.google.com/iam/help/conditions/resource-policies).  **JSON example:**  :literal:`\\`     {       \"bindings\": [         {           \"role\": \"roles/resourcemanager.organizationAdmin\",           \"members\": [             \"user:mike@example.com\",             \"group:admins@example.com\",             \"domain:google.com\",             \"serviceAccount:my-project-id@appspot.gserviceaccount.com\"           ]         },         {           \"role\": \"roles/resourcemanager.organizationViewer\",           \"members\": [             \"user:eve@example.com\"           ],           \"condition\": {             \"title\": \"expirable access\",             \"description\": \"Does not grant access after Sep 2020\",             \"expression\": \"request.time <             timestamp('2020-10-01T00:00:00.000Z')\",           }         }       ],       \"etag\": \"BwWWja0YfJA=\",       \"version\": 3     }`\\ \\`  **YAML example:**  :literal:`\\`     bindings:     - members:       - user:mike@example.com       - group:admins@example.com       - domain:google.com       - serviceAccount:my-project-id@appspot.gserviceaccount.com       role: roles/resourcemanager.organizationAdmin     - members:       - user:eve@example.com       role: roles/resourcemanager.organizationViewer       condition:         title: expirable access         description: Does not grant access after Sep 2020         expression: request.time < timestamp('2020-10-01T00:00:00.000Z')     etag: BwWWja0YfJA=     version: 3`\\ \\`  For a description of IAM and its features, see the [IAM documentation](\\ https://cloud.google.com/iam/docs/)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "resource",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "GetIamPolicyRequest"
          ],
          "response_types": [
            "google.iam.v1.policy_pb2.Policy"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "test_iam_permissions",
          "description": "Gets your permissions on a resource.\n\nReturns an empty set of permissions if the resource\ndoesn't exist.\n\nSupported resources are:\n\n- Tag templates\n- Entry groups\n\nNote: This method gets policies only within Data Catalog\nand can't be used to get policies from BigQuery,\nPub/Sub, Dataproc Metastore, and any external Google\nCloud Platform resources ingested into Data Catalog.\n\nNo Google IAM permissions are required to call this\nmethod.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_test_iam_permissions(",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "TestIamPermissionsRequest"
          ],
          "response_types": [
            "google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_entries",
          "description": "Imports entries from a source, such as data previously dumped\ninto a Cloud Storage bucket, into Data Catalog. Import of\nentries is a sync operation that reconciles the state of the\nthird-party system with the Data Catalog.\n\n``ImportEntries`` accepts source data snapshots of a third-party\nsystem. Snapshot should be delivered as a .wire or\nbase65-encoded .txt file containing a sequence of Protocol\nBuffer messages of\n[DumpItem][google.cloud.datacatalog.v1.DumpItem] type.\n\n``ImportEntries`` returns a [long-running operation]\n[google.longrunning.Operation] resource that can be queried with\n[Operations.GetOperation][google.longrunning.Operations.GetOperation]\nto return\n[ImportEntriesMetadata][google.cloud.datacatalog.v1.ImportEntriesMetadata]\nand an\n[ImportEntriesResponse][google.cloud.datacatalog.v1.ImportEntriesResponse]\nmessage.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "set_config",
          "description": "Sets the configuration related to the migration to\nDataplex for an organization or project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_set_config():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.SetConfigRequest(\n            tag_template_migration=\"TAG_TEMPLATE_MIGRATION_DISABLED\",\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.set_config(request=request)\n\n        # Handle the response\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.MigrationConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "retrieve_config",
          "description": "Retrieves the configuration related to the migration\nfrom Data Catalog to Dataplex for a specific\norganization, including all the projects under it which\nhave a separate configuration set.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_retrieve_config():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.RetrieveConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.retrieve_config(request=reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.OrganizationConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "retrieve_effective_config",
          "description": "Retrieves the effective configuration related to the\nmigration from Data Catalog to Dataplex for a specific\norganization or project. If there is no specific\nconfiguration set for the resource, the setting is\nchecked hierarchicahlly through the ancestors of the\nresource, starting from the resource itself.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_retrieve_effective_config():\n        # Create a client\n        client = datacatalog_v1.DataCatalogAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.RetrieveEffectiveConfigReq",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.MigrationConfig"
          ]
        }
      }
    ]
  },
  "PolicyTagManager": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_taxonomy",
          "description": "Creates a taxonomy in a specified project.\n\nThe taxonomy is initially empty, that is, it doesn't\ncontain policy tags.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_create_taxonomy():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.CreateTaxonomyRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_taxonomy(request=request)\n\n        # Handle the response\n        print(response)\n\nAr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Resource name of the project that the taxonomy will belong to.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "taxonomy": {
                "type": "google.cloud.datacatalog_v1.types.Taxonomy",
                "description": "The taxonomy to create. This corresponds to the ``taxonomy`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.Taxonomy: A taxonomy is a collection of hierarchical policy tags that classify data along a common axis.  For example, a \"data sensitivity\" taxonomy might contain the following policy tags:  :literal:`\\` + PII   + Account number   + Age   + SSN   + Zipcode + Financials   + Revenue`\\ \\`  A \"data origin\" taxonomy might contain the following policy tags:  :literal:`\\` + User data + Employee data + Partner data + Public data`\\ \\`"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "taxonomy",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.Taxonomy"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_taxonomy",
          "description": "Deletes a taxonomy, including all policy tags in this\ntaxonomy, their associated policies, and the policy tags\nreferences from BigQuery columns.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_delete_taxonomy():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.DeleteTaxonomyRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_taxonomy(request=request)\n\nArgs:\n    request (Optional[Union[google.clou",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the taxonomy to delete. Note: All policy tags in this taxonomy are also deleted.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_taxonomy",
          "description": "Updates a taxonomy, including its display name,\ndescription, and activated policy types.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_update_taxonomy():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.UpdateTaxonomyRequest(\n        )\n\n        # Make the request\n        response = await client.update_taxonomy(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.datacatalog_v1.type",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "taxonomy": {
                "type": "google.cloud.datacatalog_v1.types.Taxonomy",
                "description": "The taxonomy to update. You can update only its description, display name, and activated policy types.  This corresponds to the ``taxonomy`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.Taxonomy: A taxonomy is a collection of hierarchical policy tags that classify data along a common axis.  For example, a \"data sensitivity\" taxonomy might contain the following policy tags:  :literal:`\\` + PII   + Account number   + Age   + SSN   + Zipcode + Financials   + Revenue`\\ \\`  A \"data origin\" taxonomy might contain the following policy tags:  :literal:`\\` + User data + Employee data + Partner data + Public data`\\ \\`"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "taxonomy",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.Taxonomy"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_taxonomies",
          "description": "Lists all taxonomies in a project in a particular\nlocation that you have a permission to view.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_list_taxonomies():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.ListTaxonomiesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_taxonomies(request=request)\n\n        # Handle the response\n        async for response in page_result:\n          ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Resource name of the project to list the taxonomies of.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.services.policy_tag_manager.pagers.ListTaxonomiesAsyncPager: Response message for [ListTaxonomies][google.cloud.datacatalog.v1.PolicyTagManager.ListTaxonomies].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.services.policy_tag_manager.pagers.ListTaxonomiesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_taxonomy",
          "description": "Gets a taxonomy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_get_taxonomy():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.GetTaxonomyRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_taxonomy(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.datacatalog_v1.types.GetTaxonomyRequest, dict]]):\n        The request",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the taxonomy to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.Taxonomy: A taxonomy is a collection of hierarchical policy tags that classify data along a common axis.  For example, a \"data sensitivity\" taxonomy might contain the following policy tags:  :literal:`\\` + PII   + Account number   + Age   + SSN   + Zipcode + Financials   + Revenue`\\ \\`  A \"data origin\" taxonomy might contain the following policy tags:  :literal:`\\` + User data + Employee data + Partner data + Public data`\\ \\`"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.Taxonomy"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_policy_tag",
          "description": "Creates a policy tag in a taxonomy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_create_policy_tag():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.CreatePolicyTagRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_policy_tag(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.datacatalog_v1.types.CreatePolic",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Resource name of the taxonomy that the policy tag will belong to.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "policy_tag": {
                "type": "google.cloud.datacatalog_v1.types.PolicyTag",
                "description": "The policy tag to create. This corresponds to the ``policy_tag`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.PolicyTag: Denotes one policy tag in a taxonomy, for example, SSN.  Policy tags can be defined in a hierarchy. For example:  :literal:`\\` + Geolocation   + LatLong   + City   + ZipCode`\\ \\`  Where the \"Geolocation\" policy tag contains three children."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "policy_tag",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.PolicyTag"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_policy_tag",
          "description": "Deletes a policy tag together with the following:\n\n-  All of its descendant policy tags, if any\n-  Policies associated with the policy tag and its descendants\n-  References from BigQuery table schema of the policy tag and\n   its descendants\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_delete_policy_tag():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.DeletePolicyTagRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the policy tag to delete. Note: All of its descendant policy tags are also deleted.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_policy_tag",
          "description": "Updates a policy tag, including its display\nname, description, and parent policy tag.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_update_policy_tag():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.UpdatePolicyTagRequest(\n        )\n\n        # Make the request\n        response = await client.update_policy_tag(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.datacatalog_v1.ty",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "policy_tag": {
                "type": "google.cloud.datacatalog_v1.types.PolicyTag",
                "description": "The policy tag to update. You can update only its description, display name, and parent policy tag fields.  This corresponds to the ``policy_tag`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.PolicyTag: Denotes one policy tag in a taxonomy, for example, SSN.  Policy tags can be defined in a hierarchy. For example:  :literal:`\\` + Geolocation   + LatLong   + City   + ZipCode`\\ \\`  Where the \"Geolocation\" policy tag contains three children."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "policy_tag",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.PolicyTag"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_policy_tags",
          "description": "Lists all policy tags in a taxonomy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_list_policy_tags():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.ListPolicyTagsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_policy_tags(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[goo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Resource name of the taxonomy to list the policy tags of.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.services.policy_tag_manager.pagers.ListPolicyTagsAsyncPager: Response message for [ListPolicyTags][google.cloud.datacatalog.v1.PolicyTagManager.ListPolicyTags].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.services.policy_tag_manager.pagers.ListPolicyTagsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_policy_tag",
          "description": "Gets a policy tag.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_get_policy_tag():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.GetPolicyTagRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_policy_tag(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.datacatalog_v1.types.GetPolicyTagRequest, dict]]):\n        The",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the policy tag.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.datacatalog_v1.types.PolicyTag: Denotes one policy tag in a taxonomy, for example, SSN.  Policy tags can be defined in a hierarchy. For example:  :literal:`\\` + Geolocation   + LatLong   + City   + ZipCode`\\ \\`  Where the \"Geolocation\" policy tag contains three children."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.PolicyTag"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_iam_policy",
          "description": "Gets the IAM policy for a policy tag or a taxonomy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_get_iam_policy():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_policy_pb2.GetIamPolicyRequest(\n            resource=\"resource_value\",\n        )\n\n        # Make the request\n        response = await client.get_iam_policy(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "GetIamPolicyRequest"
          ],
          "response_types": [
            "google.iam.v1.policy_pb2.Policy"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "set_iam_policy",
          "description": "Sets the IAM policy for a policy tag or a taxonomy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_set_iam_policy():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_policy_pb2.SetIamPolicyRequest(\n            resource=\"resource_value\",\n        )\n\n        # Make the request\n        response = await client.set_iam_policy(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "SetIamPolicyRequest"
          ],
          "response_types": [
            "google.iam.v1.policy_pb2.Policy"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "test_iam_permissions",
          "description": "Returns your permissions on a specified policy tag or\ntaxonomy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_test_iam_permissions():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_policy_pb2.TestIamPermissionsRequest(\n            resource=\"resource_value\",\n            permissions=['permissions_value1', 'permissions_value2'],\n        )\n\n        # Make the request\n        response = await client.t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "TestIamPermissionsRequest"
          ],
          "response_types": [
            "google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse"
          ]
        }
      }
    ]
  },
  "PolicyTagManagerSerialization": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "replace_taxonomy",
          "description": "Replaces (updates) a taxonomy and all its policy tags.\n\nThe taxonomy and its entire hierarchy of policy tags must be\nrepresented literally by ``SerializedTaxonomy`` and the nested\n``SerializedPolicyTag`` messages.\n\nThis operation automatically does the following:\n\n-  Deletes the existing policy tags that are missing from the\n   ``SerializedPolicyTag``.\n-  Creates policy tags that don't have resource names. They are\n   considered new.\n-  Updates policy tags with valid resources names accordingly.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_replace_taxonomy()",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.Taxonomy"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_taxonomies",
          "description": "Creates new taxonomies (including their policy tags)\nin a given project by importing from inlined or\ncross-regional sources.\n\nFor a cross-regional source, new taxonomies are created\nby copying from a source in another region.\n\nFor an inlined source, taxonomies and policy tags are\ncreated in bulk using nested protocol buffer structures.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_import_taxonomies():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerSerializationAsyncClient()\n\n        # Initialize request argument(s)\n        inline_so",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.ImportTaxonomiesResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "export_taxonomies",
          "description": "Exports taxonomies in the requested type and returns them,\nincluding their policy tags. The requested taxonomies must\nbelong to the same project.\n\nThis method generates ``SerializedTaxonomy`` protocol buffers\nwith nested policy tags that can be used as input for\n``ImportTaxonomies`` calls.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import datacatalog_v1\n\n    async def sample_export_taxonomies():\n        # Create a client\n        client = datacatalog_v1.PolicyTagManagerSerializationAsyncClient()\n\n        # Initialize request argument(s)\n        request = datacatalog_v1.ExportTaxonomiesRequest(\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.datacatalog_v1.types.ExportTaxonomiesResponse"
          ]
        }
      }
    ]
  }
}