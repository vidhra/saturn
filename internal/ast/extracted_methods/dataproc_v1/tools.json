{
  "AutoscalingPolicyService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_autoscaling_policy",
          "description": "Creates new autoscaling policy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_create_autoscaling_policy():\n        # Create a client\n        client = dataproc_v1.AutoscalingPolicyServiceAsyncClient()\n\n        # Initialize request argument(s)\n        policy = dataproc_v1.AutoscalingPolicy()\n        policy.basic_algorithm.yarn_config.scale_up_factor = 0.1578\n        policy.basic_algorithm.yarn_config.scale_down_factor = 0.1789\n        policy.worker_config.max_instances = 1389\n\n        request = dataproc_v1.CreateAutoscalingPolicyRequest(\n            parent=\"parent",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The \"resource name\" of the region or location, as described in https://cloud.google.com/apis/design/resource_names.  -  For ``projects.regions.autoscalingPolicies.create``, the resource name of the region has the following format: ``projects/{project_id}/regions/{region}``  -  For ``projects.locations.autoscalingPolicies.create``, the resource name of the location has the following format: ``projects/{project_id}/locations/{location}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "policy": {
                "type": "google.cloud.dataproc_v1.types.AutoscalingPolicy",
                "description": "Required. The autoscaling policy to create.  This corresponds to the ``policy`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.AutoscalingPolicy: Describes an autoscaling policy for Dataproc cluster autoscaler."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "policy",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_autoscaling_policy",
          "description": "Updates (replaces) autoscaling policy.\n\nDisabled check for update_mask, because all updates will be full\nreplacements.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_update_autoscaling_policy():\n        # Create a client\n        client = dataproc_v1.AutoscalingPolicyServiceAsyncClient()\n\n        # Initialize request argument(s)\n        policy = dataproc_v1.AutoscalingPolicy()\n        policy.basic_algorithm.yarn_config.scale_up_factor = 0.1578\n        policy.basic_algorithm.yarn_config.scale_down_factor = 0.1789\n        policy.worker_config.max_instances = 1389\n\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "policy": {
                "type": "google.cloud.dataproc_v1.types.AutoscalingPolicy",
                "description": "Required. The updated autoscaling policy.  This corresponds to the ``policy`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.AutoscalingPolicy: Describes an autoscaling policy for Dataproc cluster autoscaler."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "policy",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_autoscaling_policy",
          "description": "Retrieves autoscaling policy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_get_autoscaling_policy():\n        # Create a client\n        client = dataproc_v1.AutoscalingPolicyServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.GetAutoscalingPolicyRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_autoscaling_policy(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.dataproc_v1.types.GetAutosca",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The \"resource name\" of the autoscaling policy, as described in https://cloud.google.com/apis/design/resource_names.  -  For ``projects.regions.autoscalingPolicies.get``, the resource name of the policy has the following format: ``projects/{project_id}/regions/{region}/autoscalingPolicies/{policy_id}``  -  For ``projects.locations.autoscalingPolicies.get``, the resource name of the policy has the following format: ``projects/{project_id}/locations/{location}/autoscalingPolicies/{policy_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.AutoscalingPolicy: Describes an autoscaling policy for Dataproc cluster autoscaler."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_autoscaling_policies",
          "description": "Lists autoscaling policies in the project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_list_autoscaling_policies():\n        # Create a client\n        client = dataproc_v1.AutoscalingPolicyServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.ListAutoscalingPoliciesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_autoscaling_policies(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The \"resource name\" of the region or location, as described in https://cloud.google.com/apis/design/resource_names.  -  For ``projects.regions.autoscalingPolicies.list``, the resource name of the region has the following format: ``projects/{project_id}/regions/{region}``  -  For ``projects.locations.autoscalingPolicies.list``, the resource name of the location has the following format: ``projects/{project_id}/locations/{location}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.services.autoscaling_policy_service.pagers.ListAutoscalingPoliciesAsyncPager: A response to a request to list autoscaling policies in a project. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_autoscaling_policy",
          "description": "Deletes an autoscaling policy. It is an error to\ndelete an autoscaling policy that is in use by one or\nmore clusters.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_delete_autoscaling_policy():\n        # Create a client\n        client = dataproc_v1.AutoscalingPolicyServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.DeleteAutoscalingPolicyRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_autoscaling_policy(request=request)\n\nArgs:\n    request (Optional[Union[google.clo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The \"resource name\" of the autoscaling policy, as described in https://cloud.google.com/apis/design/resource_names.  -  For ``projects.regions.autoscalingPolicies.delete``, the resource name of the policy has the following format: ``projects/{project_id}/regions/{region}/autoscalingPolicies/{policy_id}``  -  For ``projects.locations.autoscalingPolicies.delete``, the resource name of the policy has the following format: ``projects/{project_id}/locations/{location}/autoscalingPolicies/{policy_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "BatchController": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_batch",
          "description": "Creates a batch workload that executes\nasynchronously.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_create_batch():\n        # Create a client\n        client = dataproc_v1.BatchControllerAsyncClient()\n\n        # Initialize request argument(s)\n        batch = dataproc_v1.Batch()\n        batch.pyspark_batch.main_python_file_uri = \"main_python_file_uri_value\"\n\n        request = dataproc_v1.CreateBatchRequest(\n            parent=\"parent_value\",\n            batch=batch,\n        )\n\n        # Make the request\n        operation = client.create_batch(request=request)\n\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this batch will be created.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "batch": {
                "type": "google.cloud.dataproc_v1.types.Batch",
                "description": "Required. The batch to create. This corresponds to the ``batch`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "batch_id": {
                "type": "str",
                "description": "Optional. The ID to use for the batch, which will become the final component of the batch's resource name.  This value must be 4-63 characters. Valid characters are ``/[a-z][0-9]-/``.  This corresponds to the ``batch_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.dataproc_v1.types.Batch` A representation of a batch workload in the service."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "batch",
              "batch_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_batch",
          "description": "Gets the batch workload resource representation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_get_batch():\n        # Create a client\n        client = dataproc_v1.BatchControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.GetBatchRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_batch(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.dataproc_v1.types.GetBatchRequest, dict]]):\n        The ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The fully qualified name of the batch to retrieve in the format \"projects/PROJECT_ID/locations/DATAPROC_REGION/batches/BATCH_ID\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.Batch: A representation of a batch workload in the service."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_batches",
          "description": "Lists batch workloads.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_list_batches():\n        # Create a client\n        client = dataproc_v1.BatchControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.ListBatchesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_batches(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.dataproc_v1.types.ListBat",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of batches.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.services.batch_controller.pagers.ListBatchesAsyncPager: A list of batch workloads.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_batch",
          "description": "Deletes the batch workload resource. If the batch is not in\nterminal state, the delete fails and the response returns\n``FAILED_PRECONDITION``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_delete_batch():\n        # Create a client\n        client = dataproc_v1.BatchControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.DeleteBatchRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_batch(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.dataproc_v1.types.D",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The fully qualified name of the batch to retrieve in the format \"projects/PROJECT_ID/locations/DATAPROC_REGION/batches/BATCH_ID\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "ClusterController": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_cluster",
          "description": "Creates a cluster in a project. The returned\n[Operation.metadata][google.longrunning.Operation.metadata] will\nbe\n`ClusterOperationMetadata <https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_create_cluster():\n        # Create a client\n        client = dataproc_v1.ClusterControllerAsyncClient()\n\n        # Initialize request argument(s)\n        cluster = dataproc_v1.Cluster()\n        cluster.project_id = \"project_id_value\"\n        cluster.cluster_name = \"cluster_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_id": {
                "type": "str",
                "description": "Required. The ID of the Google Cloud Platform project that the cluster belongs to.  This corresponds to the ``project_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "region": {
                "type": "str",
                "description": "Required. The Dataproc region in which to handle the request.  This corresponds to the ``region`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "cluster": {
                "type": "google.cloud.dataproc_v1.types.Cluster",
                "description": "Required. The cluster to create. This corresponds to the ``cluster`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.dataproc_v1.types.Cluster` Describes the identifying information, config, and status of a Dataproc cluster"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_id",
              "region",
              "cluster",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_cluster",
          "description": "Updates a cluster in a project. The returned\n[Operation.metadata][google.longrunning.Operation.metadata] will\nbe\n`ClusterOperationMetadata <https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata>`__.\nThe cluster must be in a\n[``RUNNING``][google.cloud.dataproc.v1.ClusterStatus.State]\nstate or an error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_update_cluster():\n        # Create a client\n        client = dataproc_v1.ClusterControllerAsyncClient()\n\n        # Initialize request argument(s)\n        clus",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_id": {
                "type": "str",
                "description": "Required. The ID of the Google Cloud Platform project the cluster belongs to.  This corresponds to the ``project_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "region": {
                "type": "str",
                "description": "Required. The Dataproc region in which to handle the request.  This corresponds to the ``region`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "cluster_name": {
                "type": "str",
                "description": "Required. The cluster name. This corresponds to the ``cluster_name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "cluster": {
                "type": "google.cloud.dataproc_v1.types.Cluster",
                "description": "Required. The changes to the cluster. This corresponds to the ``cluster`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Specifies the path, relative to ``Cluster``, of the field to update. For example, to change the number of workers in a cluster to 5, the ``update_mask`` parameter would be specified as ``config.worker_config.num_instances``, and the ``PATCH`` request body would specify the new value, as follows:  ::  { \"config\":{ \"workerConfig\":{ \"numInstances\":\"5\" } } }  Similarly, to change the number of preemptible workers in a cluster to 5, the ``update_mask`` parameter would be ``config.secondary_worker_config.num_instances``, and the ``PATCH`` request body would be set as follows:  ::  { \"config\":{ \"secondaryWorkerConfig\":{ \"numInstances\":\"5\" } } }  Note: Currently, only the following fields can be updated:  .. raw:: html  <table> <tbody> <tr> <td><strong>Mask</strong></td> <td><strong>Purpose</strong></td> </tr> <tr> <td><strong><em>labels</em></strong></td> <td>Update labels</td> </tr> <tr> <td><strong><em>config.worker_config.num_instances</em></strong></td> <td>Resize primary worker group</td> </tr> <tr> <td><strong><em>config.secondary_worker_config.num_instances</em></strong></td> <td>Resize secondary worker group</td> </tr> <tr> <td>config.autoscaling_config.policy_uri</td><td>Use, stop using, or change autoscaling policies</td> </tr> </tbody> </table>  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.dataproc_v1.types.Cluster` Describes the identifying information, config, and status of a Dataproc cluster"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_id",
              "region",
              "cluster_name",
              "cluster",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "stop_cluster",
          "description": "Stops a cluster in a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_stop_cluster():\n        # Create a client\n        client = dataproc_v1.ClusterControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.StopClusterRequest(\n            project_id=\"project_id_value\",\n            region=\"region_value\",\n            cluster_name=\"cluster_name_value\",\n        )\n\n        # Make the request\n        operation = client.stop_cluster(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (aw",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "start_cluster",
          "description": "Starts a cluster in a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_start_cluster():\n        # Create a client\n        client = dataproc_v1.ClusterControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.StartClusterRequest(\n            project_id=\"project_id_value\",\n            region=\"region_value\",\n            cluster_name=\"cluster_name_value\",\n        )\n\n        # Make the request\n        operation = client.start_cluster(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response =",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_cluster",
          "description": "Deletes a cluster in a project. The returned\n[Operation.metadata][google.longrunning.Operation.metadata] will\nbe\n`ClusterOperationMetadata <https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_delete_cluster():\n        # Create a client\n        client = dataproc_v1.ClusterControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.DeleteClusterRequest(\n            project_id=\"project_id_value\",\n            region=\"region_value\"",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_id": {
                "type": "str",
                "description": "Required. The ID of the Google Cloud Platform project that the cluster belongs to.  This corresponds to the ``project_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "region": {
                "type": "str",
                "description": "Required. The Dataproc region in which to handle the request.  This corresponds to the ``region`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "cluster_name": {
                "type": "str",
                "description": "Required. The cluster name. This corresponds to the ``cluster_name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_id",
              "region",
              "cluster_name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_cluster",
          "description": "Gets the resource representation for a cluster in a\nproject.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_get_cluster():\n        # Create a client\n        client = dataproc_v1.ClusterControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.GetClusterRequest(\n            project_id=\"project_id_value\",\n            region=\"region_value\",\n            cluster_name=\"cluster_name_value\",\n        )\n\n        # Make the request\n        response = await client.get_cluster(request=request)\n\n        # Handle the response\n        print(",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_id": {
                "type": "str",
                "description": "Required. The ID of the Google Cloud Platform project that the cluster belongs to.  This corresponds to the ``project_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "region": {
                "type": "str",
                "description": "Required. The Dataproc region in which to handle the request.  This corresponds to the ``region`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "cluster_name": {
                "type": "str",
                "description": "Required. The cluster name. This corresponds to the ``cluster_name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.Cluster: Describes the identifying information, config, and status of a Dataproc cluster"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_id",
              "region",
              "cluster_name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_clusters",
          "description": "Lists all regions/{region}/clusters in a project\nalphabetically.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_list_clusters():\n        # Create a client\n        client = dataproc_v1.ClusterControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.ListClustersRequest(\n            project_id=\"project_id_value\",\n            region=\"region_value\",\n        )\n\n        # Make the request\n        page_result = client.list_clusters(request=request)\n\n        # Handle the response\n        async for response in page_result:\n           ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_id": {
                "type": "str",
                "description": "Required. The ID of the Google Cloud Platform project that the cluster belongs to.  This corresponds to the ``project_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "region": {
                "type": "str",
                "description": "Required. The Dataproc region in which to handle the request.  This corresponds to the ``region`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "filter": {
                "type": "str",
                "description": "Optional. A filter constraining the clusters to list. Filters are case-sensitive and have the following syntax:  field = value [AND [field = value]] ...  where **field** is one of ``status.state``, ``clusterName``, or ``labels.[KEY]``, and ``[KEY]`` is a label key. **value** can be ``*`` to match all values. ``status.state`` can be one of the following: ``ACTIVE``, ``INACTIVE``, ``CREATING``, ``RUNNING``, ``ERROR``, ``DELETING``, ``UPDATING``, ``STOPPING``, or ``STOPPED``. ``ACTIVE`` contains the ``CREATING``, ``UPDATING``, and ``RUNNING`` states. ``INACTIVE`` contains the ``DELETING``, ``ERROR``, ``STOPPING``, and ``STOPPED`` states. ``clusterName`` is the name of the cluster provided at creation time. Only the logical ``AND`` operator is supported; space-separated items are treated as having an implicit ``AND`` operator.  Example filter:  status.state = ACTIVE AND clusterName = mycluster AND labels.env = staging AND labels.starred = \\*  This corresponds to the ``filter`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.services.cluster_controller.pagers.ListClustersAsyncPager: The list of all clusters in a project. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_id",
              "region",
              "filter",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "diagnose_cluster",
          "description": "Gets cluster diagnostic information. The returned\n[Operation.metadata][google.longrunning.Operation.metadata] will\nbe\n`ClusterOperationMetadata <https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata>`__.\nAfter the operation completes,\n[Operation.response][google.longrunning.Operation.response]\ncontains\n`DiagnoseClusterResults <https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#diagnoseclusterresults>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_diagnose_cluster():\n        # Create a",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_id": {
                "type": "str",
                "description": "Required. The ID of the Google Cloud Platform project that the cluster belongs to.  This corresponds to the ``project_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "region": {
                "type": "str",
                "description": "Required. The Dataproc region in which to handle the request.  This corresponds to the ``region`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "cluster_name": {
                "type": "str",
                "description": "Required. The cluster name. This corresponds to the ``cluster_name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.dataproc_v1.types.DiagnoseClusterResults` The location of diagnostic output."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_id",
              "region",
              "cluster_name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "JobController": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "submit_job",
          "description": "Submits a job to a cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_submit_job():\n        # Create a client\n        client = dataproc_v1.JobControllerAsyncClient()\n\n        # Initialize request argument(s)\n        job = dataproc_v1.Job()\n        job.hadoop_job.main_jar_file_uri = \"main_jar_file_uri_value\"\n        job.placement.cluster_name = \"cluster_name_value\"\n\n        request = dataproc_v1.SubmitJobRequest(\n            project_id=\"project_id_value\",\n            region=\"region_value\",\n            job=job,\n        )\n\n        # Make the request\n        res",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_id": {
                "type": "str",
                "description": "Required. The ID of the Google Cloud Platform project that the job belongs to.  This corresponds to the ``project_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "region": {
                "type": "str",
                "description": "Required. The Dataproc region in which to handle the request.  This corresponds to the ``region`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "job": {
                "type": "google.cloud.dataproc_v1.types.Job",
                "description": "Required. The job resource. This corresponds to the ``job`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.Job: A Dataproc job resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_id",
              "region",
              "job",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "submit_job_as_operation",
          "description": "Submits job to a cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_submit_job_as_operation():\n        # Create a client\n        client = dataproc_v1.JobControllerAsyncClient()\n\n        # Initialize request argument(s)\n        job = dataproc_v1.Job()\n        job.hadoop_job.main_jar_file_uri = \"main_jar_file_uri_value\"\n        job.placement.cluster_name = \"cluster_name_value\"\n\n        request = dataproc_v1.SubmitJobRequest(\n            project_id=\"project_id_value\",\n            region=\"region_value\",\n            job=job,\n        )\n\n        # Make the request\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_id": {
                "type": "str",
                "description": "Required. The ID of the Google Cloud Platform project that the job belongs to.  This corresponds to the ``project_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "region": {
                "type": "str",
                "description": "Required. The Dataproc region in which to handle the request.  This corresponds to the ``region`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "job": {
                "type": "google.cloud.dataproc_v1.types.Job",
                "description": "Required. The job resource. This corresponds to the ``job`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.dataproc_v1.types.Job` A Dataproc job resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_id",
              "region",
              "job",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_job",
          "description": "Gets the resource representation for a job in a\nproject.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_get_job():\n        # Create a client\n        client = dataproc_v1.JobControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.GetJobRequest(\n            project_id=\"project_id_value\",\n            region=\"region_value\",\n            job_id=\"job_id_value\",\n        )\n\n        # Make the request\n        response = await client.get_job(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Op",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_id": {
                "type": "str",
                "description": "Required. The ID of the Google Cloud Platform project that the job belongs to.  This corresponds to the ``project_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "region": {
                "type": "str",
                "description": "Required. The Dataproc region in which to handle the request.  This corresponds to the ``region`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "job_id": {
                "type": "str",
                "description": "Required. The job ID. This corresponds to the ``job_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.Job: A Dataproc job resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_id",
              "region",
              "job_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_jobs",
          "description": "Lists regions/{region}/jobs in a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_list_jobs():\n        # Create a client\n        client = dataproc_v1.JobControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.ListJobsRequest(\n            project_id=\"project_id_value\",\n            region=\"region_value\",\n        )\n\n        # Make the request\n        page_result = client.list_jobs(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Op",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_id": {
                "type": "str",
                "description": "Required. The ID of the Google Cloud Platform project that the job belongs to.  This corresponds to the ``project_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "region": {
                "type": "str",
                "description": "Required. The Dataproc region in which to handle the request.  This corresponds to the ``region`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "filter": {
                "type": "str",
                "description": "Optional. A filter constraining the jobs to list. Filters are case-sensitive and have the following syntax:  [field = value] AND [field [= value]] ...  where **field** is ``status.state`` or ``labels.[KEY]``, and ``[KEY]`` is a label key. **value** can be ``*`` to match all values. ``status.state`` can be either ``ACTIVE`` or ``NON_ACTIVE``. Only the logical ``AND`` operator is supported; space-separated items are treated as having an implicit ``AND`` operator.  Example filter:  status.state = ACTIVE AND labels.env = staging AND labels.starred = \\*  This corresponds to the ``filter`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.services.job_controller.pagers.ListJobsAsyncPager: A list of jobs in a project.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_id",
              "region",
              "filter",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_job",
          "description": "Updates a job in a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_update_job():\n        # Create a client\n        client = dataproc_v1.JobControllerAsyncClient()\n\n        # Initialize request argument(s)\n        job = dataproc_v1.Job()\n        job.hadoop_job.main_jar_file_uri = \"main_jar_file_uri_value\"\n        job.placement.cluster_name = \"cluster_name_value\"\n\n        request = dataproc_v1.UpdateJobRequest(\n            project_id=\"project_id_value\",\n            region=\"region_value\",\n            job_id=\"job_id_value\",\n            job=job,\n        )\n\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "cancel_job",
          "description": "Starts a job cancellation request. To access the job resource\nafter cancellation, call\n`regions/{region}/jobs.list <https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/list>`__\nor\n`regions/{region}/jobs.get <https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/get>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_cancel_job():\n        # Create a client\n        client = dataproc_v1.JobControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.CancelJobRequest(\n            p",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_id": {
                "type": "str",
                "description": "Required. The ID of the Google Cloud Platform project that the job belongs to.  This corresponds to the ``project_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "region": {
                "type": "str",
                "description": "Required. The Dataproc region in which to handle the request.  This corresponds to the ``region`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "job_id": {
                "type": "str",
                "description": "Required. The job ID. This corresponds to the ``job_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.Job: A Dataproc job resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_id",
              "region",
              "job_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_job",
          "description": "Deletes the job from the project. If the job is active, the\ndelete fails, and the response returns ``FAILED_PRECONDITION``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_delete_job():\n        # Create a client\n        client = dataproc_v1.JobControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.DeleteJobRequest(\n            project_id=\"project_id_value\",\n            region=\"region_value\",\n            job_id=\"job_id_value\",\n        )\n\n        # Make the request\n        await client.delete_job(request=request)\n\nArgs:\n    r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_id": {
                "type": "str",
                "description": "Required. The ID of the Google Cloud Platform project that the job belongs to.  This corresponds to the ``project_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "region": {
                "type": "str",
                "description": "Required. The Dataproc region in which to handle the request.  This corresponds to the ``region`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "job_id": {
                "type": "str",
                "description": "Required. The job ID. This corresponds to the ``job_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_id",
              "region",
              "job_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "NodeGroupController": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_node_group",
          "description": "Creates a node group in a cluster. The returned\n[Operation.metadata][google.longrunning.Operation.metadata] is\n`NodeGroupOperationMetadata <https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#nodegroupoperationmetadata>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_create_node_group():\n        # Create a client\n        client = dataproc_v1.NodeGroupControllerAsyncClient()\n\n        # Initialize request argument(s)\n        node_group = dataproc_v1.NodeGroup()\n        node_group.roles = ['DRIVER']\n\n        request = dataproc_v1.CreateN",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this node group will be created. Format: ``projects/{project}/regions/{region}/clusters/{cluster}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "node_group": {
                "type": "google.cloud.dataproc_v1.types.NodeGroup",
                "description": "Required. The node group to create. This corresponds to the ``node_group`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "node_group_id": {
                "type": "str",
                "description": "Optional. An optional node group ID. Generated if not specified.  The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of from 3 to 33 characters.  This corresponds to the ``node_group_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.dataproc_v1.types.NodeGroup` Dataproc Node Group. **The Dataproc NodeGroup resource is not related to the Dataproc [NodeGroupAffinity][google.cloud.dataproc.v1.NodeGroupAffinity] resource.**"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "node_group",
              "node_group_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "resize_node_group",
          "description": "Resizes a node group in a cluster. The returned\n[Operation.metadata][google.longrunning.Operation.metadata] is\n`NodeGroupOperationMetadata <https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#nodegroupoperationmetadata>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_resize_node_group():\n        # Create a client\n        client = dataproc_v1.NodeGroupControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.ResizeNodeGroupRequest(\n            name=\"name_value\",\n            size=443,\n        )\n\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the node group to resize. Format: ``projects/{project}/regions/{region}/clusters/{cluster}/nodeGroups/{nodeGroup}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "size": {
                "type": "int",
                "description": "Required. The number of running instances for the node group to maintain. The group adds or removes instances to maintain the number of instances specified by this parameter.  This corresponds to the ``size`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.dataproc_v1.types.NodeGroup` Dataproc Node Group. **The Dataproc NodeGroup resource is not related to the Dataproc [NodeGroupAffinity][google.cloud.dataproc.v1.NodeGroupAffinity] resource.**"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "size",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_node_group",
          "description": "Gets the resource representation for a node group in\na cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_get_node_group():\n        # Create a client\n        client = dataproc_v1.NodeGroupControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.GetNodeGroupRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_node_group(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.dataproc_v1.types.GetNo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the node group to retrieve. Format: ``projects/{project}/regions/{region}/clusters/{cluster}/nodeGroups/{nodeGroup}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.NodeGroup: Dataproc Node Group. **The Dataproc NodeGroup resource is not related to the Dataproc [NodeGroupAffinity][google.cloud.dataproc.v1.NodeGroupAffinity] resource.**"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "SessionController": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_session",
          "description": "Create an interactive session asynchronously.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_create_session():\n        # Create a client\n        client = dataproc_v1.SessionControllerAsyncClient()\n\n        # Initialize request argument(s)\n        session = dataproc_v1.Session()\n        session.name = \"name_value\"\n\n        request = dataproc_v1.CreateSessionRequest(\n            parent=\"parent_value\",\n            session=session,\n            session_id=\"session_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_session(request=reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this session will be created.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "session": {
                "type": "google.cloud.dataproc_v1.types.Session",
                "description": "Required. The interactive session to create.  This corresponds to the ``session`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "session_id": {
                "type": "str",
                "description": "Required. The ID to use for the session, which becomes the final component of the session's resource name.  This value must be 4-63 characters. Valid characters are /[a-z][0-9]-/.  This corresponds to the ``session_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.dataproc_v1.types.Session` A representation of a session."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "session",
              "session_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_session",
          "description": "Gets the resource representation for an interactive\nsession.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_get_session():\n        # Create a client\n        client = dataproc_v1.SessionControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.GetSessionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_session(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.dataproc_v1.types.GetSessionRequest,",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the session to retrieve.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.Session: A representation of a session."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_sessions",
          "description": "Lists interactive sessions.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_list_sessions():\n        # Create a client\n        client = dataproc_v1.SessionControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.ListSessionsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_sessions(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.dataproc_v1.typ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of sessions.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.services.session_controller.pagers.ListSessionsAsyncPager: A list of interactive sessions.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "terminate_session",
          "description": "Terminates the interactive session.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_terminate_session():\n        # Create a client\n        client = dataproc_v1.SessionControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.TerminateSessionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.terminate_session(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(resp",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the session resource to terminate.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.dataproc_v1.types.Session` A representation of a session."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_session",
          "description": "Deletes the interactive session resource. If the\nsession is not in terminal state, it is terminated, and\nthen deleted.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_delete_session():\n        # Create a client\n        client = dataproc_v1.SessionControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.DeleteSessionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_session(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (a",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the session resource to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.dataproc_v1.types.Session` A representation of a session."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "SessionTemplateController": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_session_template",
          "description": "Create a session template synchronously.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_create_session_template():\n        # Create a client\n        client = dataproc_v1.SessionTemplateControllerAsyncClient()\n\n        # Initialize request argument(s)\n        session_template = dataproc_v1.SessionTemplate()\n        session_template.name = \"name_value\"\n\n        request = dataproc_v1.CreateSessionTemplateRequest(\n            parent=\"parent_value\",\n            session_template=session_template,\n        )\n\n        # Make the request\n        response = await client.cre",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this session template will be created.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "session_template": {
                "type": "google.cloud.dataproc_v1.types.SessionTemplate",
                "description": "Required. The session template to create.  This corresponds to the ``session_template`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.SessionTemplate: A representation of a session template."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "session_template",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_session_template",
          "description": "Updates the session template synchronously.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_update_session_template():\n        # Create a client\n        client = dataproc_v1.SessionTemplateControllerAsyncClient()\n\n        # Initialize request argument(s)\n        session_template = dataproc_v1.SessionTemplate()\n        session_template.name = \"name_value\"\n\n        request = dataproc_v1.UpdateSessionTemplateRequest(\n            session_template=session_template,\n        )\n\n        # Make the request\n        response = await client.update_session_template(request=req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "session_template": {
                "type": "google.cloud.dataproc_v1.types.SessionTemplate",
                "description": "Required. The updated session template.  This corresponds to the ``session_template`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.SessionTemplate: A representation of a session template."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "session_template",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_session_template",
          "description": "Gets the resource representation for a session\ntemplate.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_get_session_template():\n        # Create a client\n        client = dataproc_v1.SessionTemplateControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.GetSessionTemplateRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_session_template(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.datapr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the session template to retrieve.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.SessionTemplate: A representation of a session template."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_session_templates",
          "description": "Lists session templates.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_list_session_templates():\n        # Create a client\n        client = dataproc_v1.SessionTemplateControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.ListSessionTemplatesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_session_templates(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Uni",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent that owns this collection of session templates.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.services.session_template_controller.pagers.ListSessionTemplatesAsyncPager: A list of session templates.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_session_template",
          "description": "Deletes a session template.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_delete_session_template():\n        # Create a client\n        client = dataproc_v1.SessionTemplateControllerAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.DeleteSessionTemplateRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_session_template(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.dataproc_v1.types.DeleteSessionTemplateRequest, dict]]):\n        The request object. A reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the session template resource to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "WorkflowTemplateService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_workflow_template",
          "description": "Creates new workflow template.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_create_workflow_template():\n        # Create a client\n        client = dataproc_v1.WorkflowTemplateServiceAsyncClient()\n\n        # Initialize request argument(s)\n        template = dataproc_v1.WorkflowTemplate()\n        template.id = \"id_value\"\n        template.placement.managed_cluster.cluster_name = \"cluster_name_value\"\n        template.jobs.hadoop_job.main_jar_file_uri = \"main_jar_file_uri_value\"\n        template.jobs.step_id = \"step_id_value\"\n\n        request = dataproc_v1.CreateWor",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the region or location, as described in https://cloud.google.com/apis/design/resource_names.  -  For ``projects.regions.workflowTemplates.create``, the resource name of the region has the following format: ``projects/{project_id}/regions/{region}``  -  For ``projects.locations.workflowTemplates.create``, the resource name of the location has the following format: ``projects/{project_id}/locations/{location}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "template": {
                "type": "google.cloud.dataproc_v1.types.WorkflowTemplate",
                "description": "Required. The Dataproc workflow template to create.  This corresponds to the ``template`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.WorkflowTemplate: A Dataproc workflow template resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "template",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_workflow_template",
          "description": "Retrieves the latest workflow template.\n\nCan retrieve previously instantiated template by\nspecifying optional version parameter.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_get_workflow_template():\n        # Create a client\n        client = dataproc_v1.WorkflowTemplateServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.GetWorkflowTemplateRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_workflow_template(request=request)\n\n        # Handle the response\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names.  -  For ``projects.regions.workflowTemplates.get``, the resource name of the template has the following format: ``projects/{project_id}/regions/{region}/workflowTemplates/{template_id}``  -  For ``projects.locations.workflowTemplates.get``, the resource name of the template has the following format: ``projects/{project_id}/locations/{location}/workflowTemplates/{template_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.WorkflowTemplate: A Dataproc workflow template resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "instantiate_workflow_template",
          "description": "Instantiates a template and begins execution.\n\nThe returned Operation can be used to track execution of\nworkflow by polling\n[operations.get][google.longrunning.Operations.GetOperation].\nThe Operation will complete when entire workflow is finished.\n\nThe running workflow can be aborted via\n[operations.cancel][google.longrunning.Operations.CancelOperation].\nThis will cause any inflight jobs to be cancelled and\nworkflow-owned clusters to be deleted.\n\nThe [Operation.metadata][google.longrunning.Operation.metadata]\nwill be\n`WorkflowMetadata <https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata>`__.\nAlso see `Using\nWorkflowMetadata <https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata>`__.\n\nOn successful completion,\n[Operation.response][google.longrunning.Operation.response] will\nbe [Empty][google.protobuf.Empty].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names.  -  For ``projects.regions.workflowTemplates.instantiate``, the resource name of the template has the following format: ``projects/{project_id}/regions/{region}/workflowTemplates/{template_id}``  -  For ``projects.locations.workflowTemplates.instantiate``, the resource name of the template has the following format: ``projects/{project_id}/locations/{location}/workflowTemplates/{template_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "parameters": {
                "type": "MutableMapping[str, str]",
                "description": "Optional. Map from parameter names to values that should be used for those parameters. Values may not exceed 1000 characters.  This corresponds to the ``parameters`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "parameters",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "instantiate_inline_workflow_template",
          "description": "Instantiates a template and begins execution.\n\nThis method is equivalent to executing the sequence\n[CreateWorkflowTemplate][google.cloud.dataproc.v1.WorkflowTemplateService.CreateWorkflowTemplate],\n[InstantiateWorkflowTemplate][google.cloud.dataproc.v1.WorkflowTemplateService.InstantiateWorkflowTemplate],\n[DeleteWorkflowTemplate][google.cloud.dataproc.v1.WorkflowTemplateService.DeleteWorkflowTemplate].\n\nThe returned Operation can be used to track execution of\nworkflow by polling\n[operations.get][google.longrunning.Operations.GetOperation].\nThe Operation will complete when entire workflow is finished.\n\nThe running workflow can be aborted via\n[operations.cancel][google.longrunning.Operations.CancelOperation].\nThis will cause any inflight jobs to be cancelled and\nworkflow-owned clusters to be deleted.\n\nThe [Operation.metadata][google.longrunning.Operation.metadata]\nwill be\n`WorkflowMetadata <https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata>`__.\nAlso see `Using\nWorkfl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the region or location, as described in https://cloud.google.com/apis/design/resource_names.  -  For ``projects.regions.workflowTemplates,instantiateinline``, the resource name of the region has the following format: ``projects/{project_id}/regions/{region}``  -  For ``projects.locations.workflowTemplates.instantiateinline``, the resource name of the location has the following format: ``projects/{project_id}/locations/{location}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "template": {
                "type": "google.cloud.dataproc_v1.types.WorkflowTemplate",
                "description": "Required. The workflow template to instantiate.  This corresponds to the ``template`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "template",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_workflow_template",
          "description": "Updates (replaces) workflow template. The updated\ntemplate must contain version that matches the current\nserver version.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_update_workflow_template():\n        # Create a client\n        client = dataproc_v1.WorkflowTemplateServiceAsyncClient()\n\n        # Initialize request argument(s)\n        template = dataproc_v1.WorkflowTemplate()\n        template.id = \"id_value\"\n        template.placement.managed_cluster.cluster_name = \"cluster_name_value\"\n        template.jobs.hadoop_job.main_jar_file_uri = \"main_jar_file_uri_value",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "template": {
                "type": "google.cloud.dataproc_v1.types.WorkflowTemplate",
                "description": "Required. The updated workflow template.  The ``template.version`` field must match the current version.  This corresponds to the ``template`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.types.WorkflowTemplate: A Dataproc workflow template resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "template",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_workflow_templates",
          "description": "Lists workflows that match the specified filter in\nthe request.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_list_workflow_templates():\n        # Create a client\n        client = dataproc_v1.WorkflowTemplateServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.ListWorkflowTemplatesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_workflow_templates(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(re",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the region or location, as described in https://cloud.google.com/apis/design/resource_names.  -  For ``projects.regions.workflowTemplates,list``, the resource name of the region has the following format: ``projects/{project_id}/regions/{region}``  -  For ``projects.locations.workflowTemplates.list``, the resource name of the location has the following format: ``projects/{project_id}/locations/{location}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataproc_v1.services.workflow_template_service.pagers.ListWorkflowTemplatesAsyncPager: A response to a request to list workflow templates in a project. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_workflow_template",
          "description": "Deletes a workflow template. It does not cancel\nin-progress workflows.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataproc_v1\n\n    async def sample_delete_workflow_template():\n        # Create a client\n        client = dataproc_v1.WorkflowTemplateServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataproc_v1.DeleteWorkflowTemplateRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_workflow_template(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.dataproc_v1.types.DeleteWorkflowTemplateRequest,",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names.  -  For ``projects.regions.workflowTemplates.delete``, the resource name of the template has the following format: ``projects/{project_id}/regions/{region}/workflowTemplates/{template_id}``  -  For ``projects.locations.workflowTemplates.instantiate``, the resource name of the template has the following format: ``projects/{project_id}/locations/{location}/workflowTemplates/{template_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  }
}