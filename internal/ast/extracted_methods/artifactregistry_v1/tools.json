{
  "ArtifactRegistry": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_docker_images",
          "description": "Lists docker images.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_list_docker_images():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ListDockerImagesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_docker_images(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Unio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the parent resource whose docker images will be listed.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.services.artifact_registry.pagers.ListDockerImagesAsyncPager: The response from listing docker images. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "artifact.ListDockerImagesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_docker_image",
          "description": "Gets a docker image.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_docker_image():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetDockerImageRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_docker_image(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.GetDockerImag",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the docker images.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.DockerImage: DockerImage represents a docker artifact. The following fields are returned as untyped metadata in the Version resource, using camelcase keys (i.e. metadata.imageSizeBytes): \\* imageSizeBytes \\* mediaType \\* buildTime"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "artifact.GetDockerImageRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_maven_artifacts",
          "description": "Lists maven artifacts.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_list_maven_artifacts():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ListMavenArtifactsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_maven_artifacts(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the parent resource whose maven artifacts will be listed.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.services.artifact_registry.pagers.ListMavenArtifactsAsyncPager: The response from listing maven artifacts. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "artifact.ListMavenArtifactsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_maven_artifact",
          "description": "Gets a maven artifact.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_maven_artifact():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetMavenArtifactRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_maven_artifact(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.GetMa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the maven artifact.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.MavenArtifact: MavenArtifact represents a maven artifact."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "artifact.GetMavenArtifactRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_npm_packages",
          "description": "Lists npm packages.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_list_npm_packages():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ListNpmPackagesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_npm_packages(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[go",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the parent resource whose npm packages will be listed.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.services.artifact_registry.pagers.ListNpmPackagesAsyncPager: The response from listing npm packages. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "artifact.ListNpmPackagesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_npm_package",
          "description": "Gets a npm package.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_npm_package():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetNpmPackageRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_npm_package(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.GetNpmPackageRequ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the npm package.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.NpmPackage: NpmPackage represents an npm artifact."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "artifact.GetNpmPackageRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_python_packages",
          "description": "Lists python packages.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_list_python_packages():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ListPythonPackagesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_python_packages(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the parent resource whose python packages will be listed.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.services.artifact_registry.pagers.ListPythonPackagesAsyncPager: The response from listing python packages. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "artifact.ListPythonPackagesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_python_package",
          "description": "Gets a python package.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_python_package():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetPythonPackageRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_python_package(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.GetPy",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the python package.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.PythonPackage: PythonPackage represents a python artifact."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "artifact.GetPythonPackageRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_apt_artifacts",
          "description": "Imports Apt artifacts. The returned Operation will\ncomplete once the resources are imported. Package,\nVersion, and File resources are created based on the\nimported artifacts. Imported artifacts that conflict\nwith existing resources are ignored.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_import_apt_artifacts():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ImportAptArtifactsRequest(\n        )\n\n        # Make the request\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "apt_artifact.ImportAptArtifactsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_yum_artifacts",
          "description": "Imports Yum (RPM) artifacts. The returned Operation\nwill complete once the resources are imported. Package,\nVersion, and File resources are created based on the\nimported artifacts. Imported artifacts that conflict\nwith existing resources are ignored.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_import_yum_artifacts():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ImportYumArtifactsRequest(\n        )\n\n        # Make the request\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "yum_artifact.ImportYumArtifactsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_repositories",
          "description": "Lists repositories.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_list_repositories():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ListRepositoriesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_repositories(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[g",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the parent resource whose repositories will be listed.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.services.artifact_registry.pagers.ListRepositoriesAsyncPager: The response from listing repositories. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "repository.ListRepositoriesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_repository",
          "description": "Gets a repository.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_repository():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetRepositoryRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_repository(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.GetRepositoryRequest",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the repository to retrieve.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Repository: A Repository for storing artifacts with a specific format."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "repository.GetRepositoryRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_repository",
          "description": "Creates a repository. The returned Operation will\nfinish once the repository has been created. Its\nresponse will be the created Repository.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_create_repository():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.CreateRepositoryRequest(\n            parent=\"parent_value\",\n            repository_id=\"repository_id_value\",\n        )\n\n        # Make the request\n        operation = client.create",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the parent resource where the repository will be created.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "repository": {
                "type": "google.cloud.artifactregistry_v1.types.Repository",
                "description": "Required. The repository to be created.  This corresponds to the ``repository`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "repository_id": {
                "type": "str",
                "description": "Required. The repository id to use for this repository.  This corresponds to the ``repository_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.artifactregistry_v1.types.Repository` A Repository for storing artifacts with a specific format."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "repository",
              "repository_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gda_repository.CreateRepositoryRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_repository",
          "description": "Updates a repository.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_update_repository():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.UpdateRepositoryRequest(\n        )\n\n        # Make the request\n        response = await client.update_repository(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.UpdateRepositoryRequest, dict]]):\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "repository": {
                "type": "google.cloud.artifactregistry_v1.types.Repository",
                "description": "The repository that replaces the resource on the server.  This corresponds to the ``repository`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The update mask applies to the resource. For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Repository: A Repository for storing artifacts with a specific format."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "repository",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gda_repository.UpdateRepositoryRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_repository",
          "description": "Deletes a repository and all of its contents. The\nreturned Operation will finish once the repository has\nbeen deleted. It will not have any Operation metadata\nand will return a google.protobuf.Empty response.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_delete_repository():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.DeleteRepositoryRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the repository to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "repository.DeleteRepositoryRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_packages",
          "description": "Lists packages.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_list_packages():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ListPackagesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_packages(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.arti",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the parent resource whose packages will be listed.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.services.artifact_registry.pagers.ListPackagesAsyncPager: The response from listing packages.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "package.ListPackagesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_package",
          "description": "Gets a package.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_package():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetPackageRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_package(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.GetPackageRequest, dict]]):\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the package to retrieve.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Package: Packages are named collections of versions."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "package.GetPackageRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_package",
          "description": "Deletes a package and all of its versions and tags.\nThe returned operation will complete once the package\nhas been deleted.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_delete_package():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.DeletePackageRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_package(request=request)\n\n        print(\"Waiting for operation to complete",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the package to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "package.DeletePackageRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_versions",
          "description": "Lists versions.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_list_versions():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ListVersionsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_versions(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.ListVersionsR",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The name of the parent resource whose versions will be listed.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.services.artifact_registry.pagers.ListVersionsAsyncPager: The response from listing versions.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "version.ListVersionsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_version",
          "description": "Gets a version\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_version():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetVersionRequest(\n        )\n\n        # Make the request\n        response = await client.get_version(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.GetVersionRequest, dict]]):\n        The request object. The requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The name of the version to retrieve. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Version: The body of a version resource. A version resource represents a collection of components, such as files and other data. This may correspond to a version in many package management schemes."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "version.GetVersionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_version",
          "description": "Deletes a version and all of its content. The\nreturned operation will complete once the version has\nbeen deleted.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_delete_version():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.DeleteVersionRequest(\n        )\n\n        # Make the request\n        operation = client.delete_version(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operatio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The name of the version to delete. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "version.DeleteVersionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_delete_versions",
          "description": "Deletes multiple versions across a repository. The\nreturned operation will complete once the versions have\nbeen deleted.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_batch_delete_versions():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.BatchDeleteVersionsRequest(\n            names=['names_value1', 'names_value2'],\n        )\n\n        # Make the request\n        operation = client.batch_delete_versions(request=request)\n\n        pr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The name of the repository holding all requested versions.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "names": {
                "type": "MutableSequence[str]",
                "description": "Required. The names of the versions to delete. A maximum of 10000 versions can be deleted in a batch.  This corresponds to the ``names`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "names",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "version.BatchDeleteVersionsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_version",
          "description": "Updates a version.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_update_version():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.UpdateVersionRequest(\n        )\n\n        # Make the request\n        response = await client.update_version(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.UpdateVersionRequest, dict]]):\n        The request ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "version": {
                "type": "google.cloud.artifactregistry_v1.types.Version",
                "description": "Required. The Version that replaces the resource on the server.  This corresponds to the ``version`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The update mask applies to the resource. For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Version: The body of a version resource. A version resource represents a collection of components, such as files and other data. This may correspond to a version in many package management schemes."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "version",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gda_version.UpdateVersionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_files",
          "description": "Lists files.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_list_files():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ListFilesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_files(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the repository whose files will be listed. For example: \"projects/p1/locations/us-central1/repositories/repo1  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.services.artifact_registry.pagers.ListFilesAsyncPager: The response from listing files.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "file.ListFilesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_file",
          "description": "Gets a file.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_file():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetFileRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_file(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.GetFileRequest, dict]]):\n        The request",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the file to retrieve.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.File: Files store content that is potentially associated with Packages or Versions."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "file.GetFileRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_file",
          "description": "Deletes a file and all of its content. It is only\nallowed on generic repositories. The returned operation\nwill complete once the file has been deleted.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_delete_file():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.DeleteFileRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_file(request=request)\n\n        print(\"Waiting for op",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the file to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "file.DeleteFileRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_file",
          "description": "Updates a file.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_update_file():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.UpdateFileRequest(\n        )\n\n        # Make the request\n        response = await client.update_file(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.UpdateFileRequest, dict]]):\n        The request object. The req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "file": {
                "type": "google.cloud.artifactregistry_v1.types.File",
                "description": "Required. The File that replaces the resource on the server.  This corresponds to the ``file`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The update mask applies to the resource. For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.File: Files store content that is potentially associated with Packages or Versions."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "file",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gda_file.UpdateFileRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_tags",
          "description": "Lists tags.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_list_tags():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ListTagsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_tags(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.ListTagsRequest, dict]]):\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The name of the parent package whose tags will be listed. For example: ``projects/p1/locations/us-central1/repositories/repo1/packages/pkg1``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.services.artifact_registry.pagers.ListTagsAsyncPager: The response from listing tags.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "tag.ListTagsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_tag",
          "description": "Gets a tag.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_tag():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetTagRequest(\n        )\n\n        # Make the request\n        response = await client.get_tag(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.GetTagRequest, dict]]):\n        The request object. The request to retrieve a t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The name of the tag to retrieve. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Tag: Tags point to a version and represent an alternative name that can be used to access the version."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "tag.GetTagRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_tag",
          "description": "Creates a tag.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_create_tag():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.CreateTagRequest(\n        )\n\n        # Make the request\n        response = await client.create_tag(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.CreateTagRequest, dict]]):\n        The request object. The request ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The name of the parent resource where the tag will be created.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "tag": {
                "type": "google.cloud.artifactregistry_v1.types.Tag",
                "description": "The tag to be created. This corresponds to the ``tag`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "tag_id": {
                "type": "str",
                "description": "The tag id to use for this repository.  This corresponds to the ``tag_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Tag: Tags point to a version and represent an alternative name that can be used to access the version."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "tag",
              "tag_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gda_tag.CreateTagRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_tag",
          "description": "Updates a tag.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_update_tag():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.UpdateTagRequest(\n        )\n\n        # Make the request\n        response = await client.update_tag(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.UpdateTagRequest, dict]]):\n        The request object. The request ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "tag": {
                "type": "google.cloud.artifactregistry_v1.types.Tag",
                "description": "The tag that replaces the resource on the server.  This corresponds to the ``tag`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The update mask applies to the resource. For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Tag: Tags point to a version and represent an alternative name that can be used to access the version."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "tag",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gda_tag.UpdateTagRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_tag",
          "description": "Deletes a tag.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_delete_tag():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.DeleteTagRequest(\n        )\n\n        # Make the request\n        await client.delete_tag(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.DeleteTagRequest, dict]]):\n        The request object. The request to delete a tag.\n    name (:class:`str`):\n        The name of the ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The name of the tag to delete. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "tag.DeleteTagRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_rule",
          "description": "Creates a rule.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_create_rule():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.CreateRuleRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_rule(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.CreateRuleRequest, dict]]):\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the parent resource where the rule will be created.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "rule": {
                "type": "google.cloud.artifactregistry_v1.types.Rule",
                "description": "The rule to be created. This corresponds to the ``rule`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "rule_id": {
                "type": "str",
                "description": "The rule id to use for this repository.  This corresponds to the ``rule_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Rule: A rule defines the deny or allow action of the operation it applies to and the conditions required for the rule to apply. You can set one rule for an entire repository and one rule for each package within."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "rule",
              "rule_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gda_rule.CreateRuleRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_rules",
          "description": "Lists rules.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_list_rules():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ListRulesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_rules(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the parent repository whose rules will be listed. For example: ``projects/p1/locations/us-central1/repositories/repo1``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.services.artifact_registry.pagers.ListRulesAsyncPager: The response from listing rules.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "rule.ListRulesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_rule",
          "description": "Gets a rule.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_rule():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetRuleRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_rule(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.GetRuleRequest, dict]]):\n        The request",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the rule to retrieve.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Rule: A rule defines the deny or allow action of the operation it applies to and the conditions required for the rule to apply. You can set one rule for an entire repository and one rule for each package within."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "rule.GetRuleRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_rule",
          "description": "Updates a rule.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_update_rule():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.UpdateRuleRequest(\n        )\n\n        # Make the request\n        response = await client.update_rule(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.UpdateRuleRequest, dict]]):\n        The request object. The req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "rule": {
                "type": "google.cloud.artifactregistry_v1.types.Rule",
                "description": "The rule that replaces the resource on the server.  This corresponds to the ``rule`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The update mask applies to the resource. For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Rule: A rule defines the deny or allow action of the operation it applies to and the conditions required for the rule to apply. You can set one rule for an entire repository and one rule for each package within."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "rule",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gda_rule.UpdateRuleRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_rule",
          "description": "Deletes a rule.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_delete_rule():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.DeleteRuleRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_rule(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.DeleteRuleRequest, dict]]):\n        The request object. The request to delete a rule.\n    name (:c",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the rule to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "rule.DeleteRuleRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "set_iam_policy",
          "description": "Updates the IAM policy for a given resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_set_iam_policy():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_policy_pb2.SetIamPolicyRequest(\n            resource=\"resource_value\",\n        )\n\n        # Make the request\n        response = await client.set_iam_policy(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "iam_policy_pb2.SetIamPolicyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_iam_policy",
          "description": "Gets the IAM policy for a given resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_get_iam_policy():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_policy_pb2.GetIamPolicyRequest(\n            resource=\"resource_value\",\n        )\n\n        # Make the request\n        response = await client.get_iam_policy(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "iam_policy_pb2.GetIamPolicyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "test_iam_permissions",
          "description": "Tests if the caller has a list of permissions on a\nresource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_test_iam_permissions():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_policy_pb2.TestIamPermissionsRequest(\n            resource=\"resource_value\",\n            permissions=['permissions_value1', 'permissions_value2'],\n        )\n\n        # Make the request\n        response = await c",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "iam_policy_pb2.TestIamPermissionsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_project_settings",
          "description": "Retrieves the Settings for the Project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_project_settings():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetProjectSettingsRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_project_settings(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifact",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the projectSettings resource.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.ProjectSettings: The Artifact Registry settings that apply to a Project."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "settings.GetProjectSettingsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_project_settings",
          "description": "Updates the Settings for the Project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_update_project_settings():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.UpdateProjectSettingsRequest(\n        )\n\n        # Make the request\n        response = await client.update_project_settings(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.Update",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project_settings": {
                "type": "google.cloud.artifactregistry_v1.types.ProjectSettings",
                "description": "The project settings. This corresponds to the ``project_settings`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Field mask to support partial updates.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.ProjectSettings: The Artifact Registry settings that apply to a Project."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project_settings",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "settings.UpdateProjectSettingsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_vpcsc_config",
          "description": "Retrieves the VPCSC Config for the Project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_vpcsc_config():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetVPCSCConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_vpcsc_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the VPCSCConfig resource.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.VPCSCConfig: The Artifact Registry VPC SC config that apply to a Project."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "vpcsc_config.GetVPCSCConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_vpcsc_config",
          "description": "Updates the VPCSC Config for the Project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_update_vpcsc_config():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.UpdateVPCSCConfigRequest(\n        )\n\n        # Make the request\n        response = await client.update_vpcsc_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.UpdateVPCSCCon",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "vpcsc_config": {
                "type": "google.cloud.artifactregistry_v1.types.VPCSCConfig",
                "description": "The project config. This corresponds to the ``vpcsc_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Field mask to support partial updates.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.VPCSCConfig: The Artifact Registry VPC SC config that apply to a Project."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "vpcsc_config",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gda_vpcsc_config.UpdateVPCSCConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_package",
          "description": "Updates a package.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_update_package():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.UpdatePackageRequest(\n        )\n\n        # Make the request\n        response = await client.update_package(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.UpdatePackageRequest, dict]]):\n        The request ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "package": {
                "type": "google.cloud.artifactregistry_v1.types.Package",
                "description": "The package that replaces the resource on the server.  This corresponds to the ``package`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The update mask applies to the resource. For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Package: Packages are named collections of versions."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "package",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gda_package.UpdatePackageRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_attachments",
          "description": "Lists attachments.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_list_attachments():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.ListAttachmentsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_attachments(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[googl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the parent resource whose attachments will be listed.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.services.artifact_registry.pagers.ListAttachmentsAsyncPager: The response from listing attachments. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "attachment.ListAttachmentsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_attachment",
          "description": "Gets an attachment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_get_attachment():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.GetAttachmentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_attachment(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.artifactregistry_v1.types.GetAttachmentReques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the attachment to retrieve.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.artifactregistry_v1.types.Attachment: An Attachment refers to additional metadata that can be attached to artifacts in Artifact Registry. An attachment consists of one or more files."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "attachment.GetAttachmentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_attachment",
          "description": "Creates an attachment. The returned Operation will\nfinish once the attachment has been created. Its\nresponse will be the created attachment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_create_attachment():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        attachment = artifactregistry_v1.Attachment()\n        attachment.target = \"target_value\"\n        attachment.files = ['files_value1', 'files_value2']\n\n        request = artifactregistry_v1.CreateAttachmentReque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the parent resource where the attachment will be created.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "attachment": {
                "type": "google.cloud.artifactregistry_v1.types.Attachment",
                "description": "Required. The attachment to be created.  This corresponds to the ``attachment`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "attachment_id": {
                "type": "str",
                "description": "Required. The attachment id to use for this attachment.  This corresponds to the ``attachment_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.artifactregistry_v1.types.Attachment` An Attachment refers to additional metadata that can be attached to artifacts in Artifact Registry. An attachment consists of one or more files."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "attachment",
              "attachment_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gda_attachment.CreateAttachmentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_attachment",
          "description": "Deletes an attachment. The returned Operation will finish once\nthe attachments has been deleted. It will not have any Operation\nmetadata and will return a ``google.protobuf.Empty`` response.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import artifactregistry_v1\n\n    async def sample_delete_attachment():\n        # Create a client\n        client = artifactregistry_v1.ArtifactRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = artifactregistry_v1.DeleteAttachmentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_a",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the attachment to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "attachment.DeleteAttachmentRequest"
          ]
        }
      }
    ]
  }
}