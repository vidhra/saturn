{
  "Recommender": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_insights",
          "description": "Lists insights for the specified Cloud Resource. Requires the\nrecommender.*.list IAM permission for the specified insight\ntype.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_list_insights():\n        # Create a client\n        client = recommender_v1.RecommenderAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommender_v1.ListInsightsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_insights(request=request)\n\n        # Handle the response\n        async for response in p",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The container resource on which to execute the request. Acceptable formats:  -  ``projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]``  -  ``projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]``  -  ``billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]``  -  ``folders/[FOLDER_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]``  -  ``organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]``  LOCATION here refers to GCP Locations: https://cloud.google.com/about/locations/ INSIGHT_TYPE_ID refers to supported insight types: https://cloud.google.com/recommender/docs/insights/insight-types.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommender_v1.services.recommender.pagers.ListInsightsAsyncPager: Response to the ListInsights method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.ListInsightsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_insight",
          "description": "Gets the requested insight. Requires the recommender.*.get IAM\npermission for the specified insight type.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_get_insight():\n        # Create a client\n        client = recommender_v1.RecommenderAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommender_v1.GetInsightRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_insight(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[g",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the insight. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommender_v1.types.Insight: An insight along with the information used to derive the insight. The insight may have associated recommendations as well."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.GetInsightRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "mark_insight_accepted",
          "description": "Marks the Insight State as Accepted. Users can use this method\nto indicate to the Recommender API that they have applied some\naction based on the insight. This stops the insight content from\nbeing updated.\n\nMarkInsightAccepted can be applied to insights in ACTIVE state.\nRequires the recommender.*.update IAM permission for the\nspecified insight.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_mark_insight_accepted():\n        # Create a client\n        client = recommender_v1.RecommenderAsyncClient()\n\n        # Initialize request argument(s)\n        request = reco",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the insight. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "state_metadata": {
                "type": "MutableMapping[str, str]",
                "description": "Optional. State properties user wish to include with this state. Full replace of the current state_metadata.  This corresponds to the ``state_metadata`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "etag": {
                "type": "str",
                "description": "Required. Fingerprint of the Insight. Provides optimistic locking.  This corresponds to the ``etag`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommender_v1.types.Insight: An insight along with the information used to derive the insight. The insight may have associated recommendations as well."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "state_metadata",
              "etag",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.MarkInsightAcceptedRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_recommendations",
          "description": "Lists recommendations for the specified Cloud Resource. Requires\nthe recommender.*.list IAM permission for the specified\nrecommender.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_list_recommendations():\n        # Create a client\n        client = recommender_v1.RecommenderAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommender_v1.ListRecommendationsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_recommendations(request=request)\n\n        # Handle the response\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The container resource on which to execute the request. Acceptable formats:  -  ``projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]``  -  ``projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]``  -  ``billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]``  -  ``folders/[FOLDER_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]``  -  ``organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]``  LOCATION here refers to GCP Locations: https://cloud.google.com/about/locations/ RECOMMENDER_ID refers to supported recommenders: https://cloud.google.com/recommender/docs/recommenders.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "filter": {
                "type": "str",
                "description": "Filter expression to restrict the recommendations returned. Supported filter fields:  -  ``state_info.state``  -  ``recommenderSubtype``  -  ``priority``  -  ``targetResources``  Examples:  -  ``stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED``  -  ``recommenderSubtype = REMOVE_ROLE OR recommenderSubtype = REPLACE_ROLE``  -  ``priority = P1 OR priority = P2``  -  ``targetResources : //compute.googleapis.com/projects/1234/zones/us-central1-a/instances/instance-1``  -  ``stateInfo.state = ACTIVE AND (priority = P1 OR priority = P2)``  The max allowed filter length is 500 characters.  (These expressions are based on the filter language described at https://google.aip.dev/160)  This corresponds to the ``filter`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommender_v1.services.recommender.pagers.ListRecommendationsAsyncPager: Response to the ListRecommendations method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "filter",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.ListRecommendationsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_recommendation",
          "description": "Gets the requested recommendation. Requires the\nrecommender.*.get IAM permission for the specified recommender.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_get_recommendation():\n        # Create a client\n        client = recommender_v1.RecommenderAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommender_v1.GetRecommendationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_recommendation(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the recommendation. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommender_v1.types.Recommendation: A recommendation along with a suggested action. E.g., a rightsizing recommendation for an underutilized VM, IAM role recommendations, etc"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.GetRecommendationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "mark_recommendation_dismissed",
          "description": "Mark the Recommendation State as Dismissed. Users can use this\nmethod to indicate to the Recommender API that an ACTIVE\nrecommendation has to be marked back as DISMISSED.\n\nMarkRecommendationDismissed can be applied to recommendations in\nACTIVE state.\n\nRequires the recommender.*.update IAM permission for the\nspecified recommender.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_mark_recommendation_dismissed():\n        # Create a client\n        client = recommender_v1.RecommenderAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommender",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.MarkRecommendationDismissedRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "mark_recommendation_claimed",
          "description": "Marks the Recommendation State as Claimed. Users can use this\nmethod to indicate to the Recommender API that they are starting\nto apply the recommendation themselves. This stops the\nrecommendation content from being updated. Associated insights\nare frozen and placed in the ACCEPTED state.\n\nMarkRecommendationClaimed can be applied to recommendations in\nCLAIMED, SUCCEEDED, FAILED, or ACTIVE state.\n\nRequires the recommender.*.update IAM permission for the\nspecified recommender.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_mark_recommendation_claimed():\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the recommendation. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "state_metadata": {
                "type": "MutableMapping[str, str]",
                "description": "State properties to include with this state. Overwrites any existing ``state_metadata``. Keys must match the regex ``/^[a-z0-9][a-z0-9_.-]{0,62}$/``. Values must match the regex ``/^[a-zA-Z0-9_./-]{0,255}$/``.  This corresponds to the ``state_metadata`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "etag": {
                "type": "str",
                "description": "Required. Fingerprint of the Recommendation. Provides optimistic locking.  This corresponds to the ``etag`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommender_v1.types.Recommendation: A recommendation along with a suggested action. E.g., a rightsizing recommendation for an underutilized VM, IAM role recommendations, etc"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "state_metadata",
              "etag",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.MarkRecommendationClaimedRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "mark_recommendation_succeeded",
          "description": "Marks the Recommendation State as Succeeded. Users can use this\nmethod to indicate to the Recommender API that they have applied\nthe recommendation themselves, and the operation was successful.\nThis stops the recommendation content from being updated.\nAssociated insights are frozen and placed in the ACCEPTED state.\n\nMarkRecommendationSucceeded can be applied to recommendations in\nACTIVE, CLAIMED, SUCCEEDED, or FAILED state.\n\nRequires the recommender.*.update IAM permission for the\nspecified recommender.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_mark_recom",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the recommendation. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "state_metadata": {
                "type": "MutableMapping[str, str]",
                "description": "State properties to include with this state. Overwrites any existing ``state_metadata``. Keys must match the regex ``/^[a-z0-9][a-z0-9_.-]{0,62}$/``. Values must match the regex ``/^[a-zA-Z0-9_./-]{0,255}$/``.  This corresponds to the ``state_metadata`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "etag": {
                "type": "str",
                "description": "Required. Fingerprint of the Recommendation. Provides optimistic locking.  This corresponds to the ``etag`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommender_v1.types.Recommendation: A recommendation along with a suggested action. E.g., a rightsizing recommendation for an underutilized VM, IAM role recommendations, etc"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "state_metadata",
              "etag",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.MarkRecommendationSucceededRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "mark_recommendation_failed",
          "description": "Marks the Recommendation State as Failed. Users can use this\nmethod to indicate to the Recommender API that they have applied\nthe recommendation themselves, and the operation failed. This\nstops the recommendation content from being updated. Associated\ninsights are frozen and placed in the ACCEPTED state.\n\nMarkRecommendationFailed can be applied to recommendations in\nACTIVE, CLAIMED, SUCCEEDED, or FAILED state.\n\nRequires the recommender.*.update IAM permission for the\nspecified recommender.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_mark_recommendation_fail",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the recommendation. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "state_metadata": {
                "type": "MutableMapping[str, str]",
                "description": "State properties to include with this state. Overwrites any existing ``state_metadata``. Keys must match the regex ``/^[a-z0-9][a-z0-9_.-]{0,62}$/``. Values must match the regex ``/^[a-zA-Z0-9_./-]{0,255}$/``.  This corresponds to the ``state_metadata`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "etag": {
                "type": "str",
                "description": "Required. Fingerprint of the Recommendation. Provides optimistic locking.  This corresponds to the ``etag`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommender_v1.types.Recommendation: A recommendation along with a suggested action. E.g., a rightsizing recommendation for an underutilized VM, IAM role recommendations, etc"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "state_metadata",
              "etag",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.MarkRecommendationFailedRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_recommender_config",
          "description": "Gets the requested Recommender Config. There is only\none instance of the config for each Recommender.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_get_recommender_config():\n        # Create a client\n        client = recommender_v1.RecommenderAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommender_v1.GetRecommenderConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_recommender_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the Recommendation Config to get.  Acceptable formats:  -  ``projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config``  -  ``projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config``  -  ``organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config``  -  ``billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommender_v1.types.RecommenderConfig: Configuration for a Recommender."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.GetRecommenderConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_recommender_config",
          "description": "Updates a Recommender Config. This will create a new\nrevision of the config.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_update_recommender_config():\n        # Create a client\n        client = recommender_v1.RecommenderAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommender_v1.UpdateRecommenderConfigRequest(\n        )\n\n        # Make the request\n        response = await client.update_recommender_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.recomme",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "recommender_config": {
                "type": "google.cloud.recommender_v1.types.RecommenderConfig",
                "description": "Required. The RecommenderConfig to update.  This corresponds to the ``recommender_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommender_v1.types.RecommenderConfig: Configuration for a Recommender."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "recommender_config",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.UpdateRecommenderConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_insight_type_config",
          "description": "Gets the requested InsightTypeConfig. There is only\none instance of the config for each InsightType.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_get_insight_type_config():\n        # Create a client\n        client = recommender_v1.RecommenderAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommender_v1.GetInsightTypeConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_insight_type_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the InsightTypeConfig to get.  Acceptable formats:  -  ``projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config``  -  ``projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config``  -  ``organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config``  -  ``billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommender_v1.types.InsightTypeConfig: Configuration for an InsightType."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.GetInsightTypeConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_insight_type_config",
          "description": "Updates an InsightTypeConfig change. This will create\na new revision of the config.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommender_v1\n\n    async def sample_update_insight_type_config():\n        # Create a client\n        client = recommender_v1.RecommenderAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommender_v1.UpdateInsightTypeConfigRequest(\n        )\n\n        # Make the request\n        response = await client.update_insight_type_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.clou",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "insight_type_config": {
                "type": "google.cloud.recommender_v1.types.InsightTypeConfig",
                "description": "Required. The InsightTypeConfig to update.  This corresponds to the ``insight_type_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommender_v1.types.InsightTypeConfig: Configuration for an InsightType."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "insight_type_config",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommender_service.UpdateInsightTypeConfigRequest"
          ]
        }
      }
    ]
  }
}