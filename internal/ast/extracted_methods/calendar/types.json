{
  "\\Users\\AMD\\vidhra\\internal\\ast\\google-cloud-python\\packages\\google-apps-script-type\\google\\apps\\script\\type\\calendar\\types\\calendar_addon_manifest.py": [
    {
      "type": "request_class",
      "name": "CalendarAddOnManifest",
      "docstring": "Calendar add-on manifest.\n\nAttributes:\n    homepage_trigger (google.apps.script.type.types.HomepageExtensionPoint):\n        Defines an endpoint that will be executed contexts that\n        don't match a declared contextual trigger. Any cards\n        generated by this function will always be available to the\n        user, but may be eclipsed by contextual content when this\n        add-on declares more targeted triggers.\n\n        If present, this overrides the configuration from\n        ``addOns.common.homepageTrigger``.\n    conference_solution (MutableSequence[google.apps.script.type.calendar.types.ConferenceSolution]):\n        Defines conference solutions provided by this\n        add-on.\n    create_settings_url_function (str):\n        An endpoint to execute that creates a URL to\n        the add-on's settings page.\n    event_open_trigger (google.apps.script.type.calendar.types.CalendarExtensionPoint):\n        An endpoint to trigger when an event is\n        opened (viewed/edited).\n    event_update_trigger (googl",
      "attributes": {
        "homepage_trigger": {
          "type": "google.apps.script.type.types.HomepageExtensionPoint",
          "description": "Defines an endpoint that will be executed contexts that don't match a declared contextual trigger. Any cards generated by this function will always be available to the user, but may be eclipsed by contextual content when this add-on declares more targeted triggers.  If present, this overrides the configuration from ``addOns.common.homepageTrigger``."
        },
        "conference_solution": {
          "type": "MutableSequence[google.apps.script.type.calendar.types.ConferenceSolution]",
          "description": "Defines conference solutions provided by this add-on."
        },
        "create_settings_url_function": {
          "type": "str",
          "description": "An endpoint to execute that creates a URL to the add-on's settings page."
        },
        "event_open_trigger": {
          "type": "google.apps.script.type.calendar.types.CalendarExtensionPoint",
          "description": "An endpoint to trigger when an event is opened (viewed/edited)."
        },
        "event_update_trigger": {
          "type": "google.apps.script.type.calendar.types.CalendarExtensionPoint",
          "description": "An endpoint to trigger when the open event is updated."
        },
        "current_event_access": {
          "type": "google.apps.script.type.calendar.types.CalendarAddOnManifest.EventAccess",
          "description": "Define the level of data access when an event addon is triggered."
        }
      }
    },
    {
      "type": "request_class",
      "name": "ConferenceSolution",
      "docstring": "Defines conference related values.\n\nAttributes:\n    on_create_function (str):\n        Required. The endpoint to call when\n        ConferenceData should be created.\n    id (str):\n        Required. IDs should be unique across\n        ConferenceSolutions within one add-on, but this\n        is not strictly enforced. It is up to the add-on\n        developer to assign them uniquely, otherwise the\n        wrong ConferenceSolution may be used when the\n        add-on is triggered. While the developer may\n        change the display name of an add-on, the ID\n        should not be changed.\n    name (str):\n        Required. The display name of the\n        ConferenceSolution.\n    logo_url (str):\n        Required. The URL for the logo image of the\n        ConferenceSolution.",
      "attributes": {
        "on_create_function": {
          "type": "str",
          "description": "Required. The endpoint to call when ConferenceData should be created."
        },
        "id": {
          "type": "str",
          "description": "Required. IDs should be unique across ConferenceSolutions within one add-on, but this is not strictly enforced. It is up to the add-on developer to assign them uniquely, otherwise the wrong ConferenceSolution may be used when the add-on is triggered. While the developer may change the display name of an add-on, the ID should not be changed."
        },
        "name": {
          "type": "str",
          "description": "Required. The display name of the ConferenceSolution."
        },
        "logo_url": {
          "type": "str",
          "description": "Required. The URL for the logo image of the ConferenceSolution."
        }
      }
    },
    {
      "type": "request_class",
      "name": "CalendarExtensionPoint",
      "docstring": "Common format for declaring a calendar add-on's triggers.\n\nAttributes:\n    run_function (str):\n        Required. The endpoint to execute when this\n        extension point is activated.",
      "attributes": {
        "run_function": {
          "type": "str",
          "description": "Required. The endpoint to execute when this extension point is activated."
        }
      }
    }
  ]
}