{
  "DashboardsService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_dashboard",
          "description": "Creates a new custom dashboard. For examples on how you can use\nthis API to create dashboards, see `Managing dashboards by\nAPI <https://cloud.google.com/monitoring/dashboards/api-dashboard>`__.\nThis method requires the ``monitoring.dashboards.create``\npermission on the specified project. For more information about\npermissions, see `Cloud Identity and Access\nManagement <https://cloud.google.com/iam>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_dashboard_v1\n\n    async def sample_create_dashboard():\n        # Create a client\n        client = monitoring_dashboard_v1.DashboardsService",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The project on which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  The ``[PROJECT_ID_OR_NUMBER]`` must match the dashboard resource name.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "dashboard": {
                "type": "google.cloud.monitoring_dashboard_v1.types.Dashboard",
                "description": "Required. The initial dashboard specification.  This corresponds to the ``dashboard`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_dashboard_v1.types.Dashboard: A Google Stackdriver dashboard. Dashboards define the content and layout of pages in the Stackdriver web application."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "dashboard",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_dashboards",
          "description": "Lists the existing dashboards.\n\nThis method requires the ``monitoring.dashboards.list``\npermission on the specified project. For more information, see\n`Cloud Identity and Access\nManagement <https://cloud.google.com/iam>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_dashboard_v1\n\n    async def sample_list_dashboards():\n        # Create a client\n        client = monitoring_dashboard_v1.DashboardsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_dashboard_v1.ListDashboardsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The scope of the dashboards to list. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_dashboard_v1.services.dashboards_service.pagers.ListDashboardsAsyncPager: The ListDashboards request.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_dashboard",
          "description": "Fetches a specific dashboard.\n\nThis method requires the ``monitoring.dashboards.get``\npermission on the specified dashboard. For more information, see\n`Cloud Identity and Access\nManagement <https://cloud.google.com/iam>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_dashboard_v1\n\n    async def sample_get_dashboard():\n        # Create a client\n        client = monitoring_dashboard_v1.DashboardsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_dashboard_v1.GetDashboardRequest(\n            name=\"name_value\",\n        )\n\n        # Make the reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Dashboard. The format is one of:  -  ``dashboards/[DASHBOARD_ID]`` (for system dashboards) -  ``projects/[PROJECT_ID_OR_NUMBER]/dashboards/[DASHBOARD_ID]`` (for custom dashboards).  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_dashboard_v1.types.Dashboard: A Google Stackdriver dashboard. Dashboards define the content and layout of pages in the Stackdriver web application."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_dashboard",
          "description": "Deletes an existing custom dashboard.\n\nThis method requires the ``monitoring.dashboards.delete``\npermission on the specified dashboard. For more information, see\n`Cloud Identity and Access\nManagement <https://cloud.google.com/iam>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_dashboard_v1\n\n    async def sample_delete_dashboard():\n        # Create a client\n        client = monitoring_dashboard_v1.DashboardsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_dashboard_v1.DeleteDashboardRequest(\n            name=\"name_value\",\n        )\n\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Dashboard. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/dashboards/[DASHBOARD_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_dashboard",
          "description": "Replaces an existing custom dashboard with a new definition.\n\nThis method requires the ``monitoring.dashboards.update``\npermission on the specified dashboard. For more information, see\n`Cloud Identity and Access\nManagement <https://cloud.google.com/iam>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_dashboard_v1\n\n    async def sample_update_dashboard():\n        # Create a client\n        client = monitoring_dashboard_v1.DashboardsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        dashboard = monitoring_dashboard_v1.Dashboard()\n        dashboard.display_name = \"di",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  }
}