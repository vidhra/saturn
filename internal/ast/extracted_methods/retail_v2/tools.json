{
  "AnalyticsService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "export_analytics_metrics",
          "description": "Exports analytics metrics.\n\n``Operation.response`` is of type\n``ExportAnalyticsMetricsResponse``. ``Operation.metadata`` is of\ntype ``ExportMetadata``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_export_analytics_metrics():\n        # Create a client\n        client = retail_v2.AnalyticsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        output_config = retail_v2.OutputConfig()\n        output_config.gcs_destination.output_uri_prefix = \"output_uri_prefix_value\"\n\n        request = retail_v2.ExportAnalyticsMetricsRequest(\n            catalog=\"catal",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      }
    ]
  },
  "CatalogService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_catalogs",
          "description": "Lists all the [Catalog][google.cloud.retail.v2.Catalog]s\nassociated with the project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_list_catalogs():\n        # Create a client\n        client = retail_v2.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.ListCatalogsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_catalogs(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The account resource name with an associated location.  If the caller does not have permission to list [Catalog][google.cloud.retail.v2.Catalog]s under this location, regardless of whether or not this location exists, a PERMISSION_DENIED error is returned.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.services.catalog_service.pagers.ListCatalogsAsyncPager: Response for [CatalogService.ListCatalogs][google.cloud.retail.v2.CatalogService.ListCatalogs] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.services.catalog_service.pagers.ListCatalogsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_catalog",
          "description": "Updates the [Catalog][google.cloud.retail.v2.Catalog]s.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_update_catalog():\n        # Create a client\n        client = retail_v2.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        catalog = retail_v2.Catalog()\n        catalog.name = \"name_value\"\n        catalog.display_name = \"display_name_value\"\n\n        request = retail_v2.UpdateCatalogRequest(\n            catalog=catalog,\n        )\n\n        # Make the request\n        response = await client.update_catalog(request=request)\n\n        # Handle t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "catalog": {
                "type": "google.cloud.retail_v2.types.Catalog",
                "description": "Required. The [Catalog][google.cloud.retail.v2.Catalog] to update.  If the caller does not have permission to update the [Catalog][google.cloud.retail.v2.Catalog], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the [Catalog][google.cloud.retail.v2.Catalog] to update does not exist, a NOT_FOUND error is returned.  This corresponds to the ``catalog`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Indicates which fields in the provided [Catalog][google.cloud.retail.v2.Catalog] to update.  If an unsupported or unknown field is provided, an INVALID_ARGUMENT error is returned.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.Catalog: The catalog configuration."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "catalog",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.Catalog"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "set_default_branch",
          "description": "Set a specified branch id as default branch. API methods such as\n[SearchService.Search][google.cloud.retail.v2.SearchService.Search],\n[ProductService.GetProduct][google.cloud.retail.v2.ProductService.GetProduct],\n[ProductService.ListProducts][google.cloud.retail.v2.ProductService.ListProducts]\nwill treat requests using \"default_branch\" to the actual branch\nid set as default.\n\nFor example, if ``projects/*/locations/*/catalogs/*/branches/1``\nis set as default, setting\n[SearchRequest.branch][google.cloud.retail.v2.SearchRequest.branch]\nto ``projects/*/locations/*/catalogs/*/branches/default_branch``\nis equivalent to setting\n[SearchRequest.branch][google.cloud.retail.v2.SearchRequest.branch]\nto ``projects/*/locations/*/catalogs/*/branches/1``.\n\nUsing multiple branches can be useful when developers would like\nto have a staging branch to test and verify for future usage.\nWhen it becomes ready, developers switch on the staging branch\nusing this API while keeping using\n``projects/*/locations/*/catalogs/*/branches/def",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "catalog": {
                "type": "str",
                "description": "Full resource name of the catalog, such as ``projects/*/locations/global/catalogs/default_catalog``.  This corresponds to the ``catalog`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "catalog",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_default_branch",
          "description": "Get which branch is currently default branch set by\n[CatalogService.SetDefaultBranch][google.cloud.retail.v2.CatalogService.SetDefaultBranch]\nmethod under a specified parent catalog.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_get_default_branch():\n        # Create a client\n        client = retail_v2.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.GetDefaultBranchRequest(\n        )\n\n        # Make the request\n        response = await client.get_default_branch(request=request)\n\n        # Handle the response\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "catalog": {
                "type": "str",
                "description": "The parent catalog resource name, such as ``projects/*/locations/global/catalogs/default_catalog``.  This corresponds to the ``catalog`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.GetDefaultBranchResponse: Response message of [CatalogService.GetDefaultBranch][google.cloud.retail.v2.CatalogService.GetDefaultBranch]."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "catalog",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.GetDefaultBranchResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_completion_config",
          "description": "Gets a\n[CompletionConfig][google.cloud.retail.v2.CompletionConfig].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_get_completion_config():\n        # Create a client\n        client = retail_v2.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.GetCompletionConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_completion_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.retail_v2",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full CompletionConfig resource name. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/completionConfig``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.CompletionConfig: Catalog level autocomplete config for customers to customize autocomplete feature's settings."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.CompletionConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_completion_config",
          "description": "Updates the\n[CompletionConfig][google.cloud.retail.v2.CompletionConfig]s.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_update_completion_config():\n        # Create a client\n        client = retail_v2.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        completion_config = retail_v2.CompletionConfig()\n        completion_config.name = \"name_value\"\n\n        request = retail_v2.UpdateCompletionConfigRequest(\n            completion_config=completion_config,\n        )\n\n        # Make the request\n        response = await client.update_completion",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "completion_config": {
                "type": "google.cloud.retail_v2.types.CompletionConfig",
                "description": "Required. The [CompletionConfig][google.cloud.retail.v2.CompletionConfig] to update.  If the caller does not have permission to update the [CompletionConfig][google.cloud.retail.v2.CompletionConfig], then a PERMISSION_DENIED error is returned.  If the [CompletionConfig][google.cloud.retail.v2.CompletionConfig] to update does not exist, a NOT_FOUND error is returned.  This corresponds to the ``completion_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Indicates which fields in the provided [CompletionConfig][google.cloud.retail.v2.CompletionConfig] to update. The following are the only supported fields:  -  [CompletionConfig.matching_order][google.cloud.retail.v2.CompletionConfig.matching_order] -  [CompletionConfig.max_suggestions][google.cloud.retail.v2.CompletionConfig.max_suggestions] -  [CompletionConfig.min_prefix_length][google.cloud.retail.v2.CompletionConfig.min_prefix_length] -  [CompletionConfig.auto_learning][google.cloud.retail.v2.CompletionConfig.auto_learning]  If not set, all supported fields are updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.CompletionConfig: Catalog level autocomplete config for customers to customize autocomplete feature's settings."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "completion_config",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.CompletionConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_attributes_config",
          "description": "Gets an\n[AttributesConfig][google.cloud.retail.v2.AttributesConfig].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_get_attributes_config():\n        # Create a client\n        client = retail_v2.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.GetAttributesConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_attributes_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.retail_v",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full AttributesConfig resource name. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/attributesConfig``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.AttributesConfig: Catalog level attribute config."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.AttributesConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_attributes_config",
          "description": "Updates the\n[AttributesConfig][google.cloud.retail.v2.AttributesConfig].\n\nThe catalog attributes in the request will be updated in the\ncatalog, or inserted if they do not exist. Existing catalog\nattributes not included in the request will remain unchanged.\nAttributes that are assigned to products, but do not exist at\nthe catalog level, are always included in the response. The\nproduct attribute is assigned default values for missing catalog\nattribute fields, e.g., searchable and dynamic facetable\noptions.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_update_attribu",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "attributes_config": {
                "type": "google.cloud.retail_v2.types.AttributesConfig",
                "description": "Required. The [AttributesConfig][google.cloud.retail.v2.AttributesConfig] to update.  This corresponds to the ``attributes_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Indicates which fields in the provided [AttributesConfig][google.cloud.retail.v2.AttributesConfig] to update. The following is the only supported field:  -  [AttributesConfig.catalog_attributes][google.cloud.retail.v2.AttributesConfig.catalog_attributes]  If not set, all supported fields are updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.AttributesConfig: Catalog level attribute config."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "attributes_config",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.AttributesConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "add_catalog_attribute",
          "description": "Adds the specified\n[CatalogAttribute][google.cloud.retail.v2.CatalogAttribute] to\nthe [AttributesConfig][google.cloud.retail.v2.AttributesConfig].\n\nIf the\n[CatalogAttribute][google.cloud.retail.v2.CatalogAttribute] to\nadd already exists, an ALREADY_EXISTS error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_add_catalog_attribute():\n        # Create a client\n        client = retail_v2.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        catalog_attribute = retail_v2.CatalogAttribute()\n        catalog_attribute.key = \"key_value\"\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.AttributesConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "remove_catalog_attribute",
          "description": "Removes the specified\n[CatalogAttribute][google.cloud.retail.v2.CatalogAttribute] from\nthe [AttributesConfig][google.cloud.retail.v2.AttributesConfig].\n\nIf the\n[CatalogAttribute][google.cloud.retail.v2.CatalogAttribute] to\nremove does not exist, a NOT_FOUND error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_remove_catalog_attribute():\n        # Create a client\n        client = retail_v2.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.RemoveCatalogAttributeRequest(\n            attributes_config=\"attrib",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.AttributesConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "replace_catalog_attribute",
          "description": "Replaces the specified\n[CatalogAttribute][google.cloud.retail.v2.CatalogAttribute] in\nthe [AttributesConfig][google.cloud.retail.v2.AttributesConfig]\nby updating the catalog attribute with the same\n[CatalogAttribute.key][google.cloud.retail.v2.CatalogAttribute.key].\n\nIf the\n[CatalogAttribute][google.cloud.retail.v2.CatalogAttribute] to\nreplace does not exist, a NOT_FOUND error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_replace_catalog_attribute():\n        # Create a client\n        client = retail_v2.CatalogServiceAsyncClient()\n\n        # Initialize",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.AttributesConfig"
          ]
        }
      }
    ]
  },
  "CompletionService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "complete_query",
          "description": "Completes the specified prefix with keyword\nsuggestions.\nThis feature is only available for users who have Retail\nSearch enabled. Enable Retail Search on Cloud Console\nbefore using this feature.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_complete_query():\n        # Create a client\n        client = retail_v2.CompletionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.CompleteQueryRequest(\n            catalog=\"catalog_value\",\n            query=\"query_value\",\n        )\n\n        # Make the request\n        response = await cl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.CompleteQueryResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_completion_data",
          "description": "Bulk import of processed completion dataset.\n\nRequest processing is asynchronous. Partial updating is\nnot supported.\n\nThe operation is successfully finished only after the\nimported suggestions are indexed successfully and ready\nfor serving. The process takes hours.\n\nThis feature is only available for users who have Retail\nSearch enabled. Enable Retail Search on Cloud Console\nbefore using this feature.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_import_completion_data():\n        # Create a client\n        client = retail_v2.CompletionServiceAsyncClient()\n\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      }
    ]
  },
  "ControlService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_control",
          "description": "Creates a Control.\n\nIf the [Control][google.cloud.retail.v2.Control] to create\nalready exists, an ALREADY_EXISTS error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_create_control():\n        # Create a client\n        client = retail_v2.ControlServiceAsyncClient()\n\n        # Initialize request argument(s)\n        control = retail_v2.Control()\n        control.display_name = \"display_name_value\"\n        control.solution_types = ['SOLUTION_TYPE_SEARCH']\n\n        request = retail_v2.CreateControlRequest(\n            parent=\"parent_value\",\n            contr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Full resource name of parent catalog. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "control": {
                "type": "google.cloud.retail_v2.types.Control",
                "description": "Required. The Control to create. This corresponds to the ``control`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "control_id": {
                "type": "str",
                "description": "Required. The ID to use for the Control, which will become the final component of the Control's resource name.  This value should be 4-63 characters, and valid characters are /[a-z][0-9]-_/.  This corresponds to the ``control_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.Control: Configures dynamic metadata that can be linked to a [ServingConfig][google.cloud.retail.v2.ServingConfig] and affect search or recommendation results at serving time."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "control",
              "control_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.Control"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_control",
          "description": "Deletes a Control.\n\nIf the [Control][google.cloud.retail.v2.Control] to delete does\nnot exist, a NOT_FOUND error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_delete_control():\n        # Create a client\n        client = retail_v2.ControlServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.DeleteControlRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_control(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.retail_v2.types.DeleteControlRequest,",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Control to delete. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/controls/{control_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_control",
          "description": "Updates a Control.\n\n[Control][google.cloud.retail.v2.Control] cannot be set to a\ndifferent oneof field, if so an INVALID_ARGUMENT is returned. If\nthe [Control][google.cloud.retail.v2.Control] to update does not\nexist, a NOT_FOUND error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_update_control():\n        # Create a client\n        client = retail_v2.ControlServiceAsyncClient()\n\n        # Initialize request argument(s)\n        control = retail_v2.Control()\n        control.display_name = \"display_name_value\"\n        control.solution_types = ['SOLUTION_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "control": {
                "type": "google.cloud.retail_v2.types.Control",
                "description": "Required. The Control to update. This corresponds to the ``control`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Indicates which fields in the provided [Control][google.cloud.retail.v2.Control] to update. The following are NOT supported:  -  [Control.name][google.cloud.retail.v2.Control.name]  If not set or empty, all supported fields are updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.Control: Configures dynamic metadata that can be linked to a [ServingConfig][google.cloud.retail.v2.ServingConfig] and affect search or recommendation results at serving time."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "control",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.Control"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_control",
          "description": "Gets a Control.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_get_control():\n        # Create a client\n        client = retail_v2.ControlServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.GetControlRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_control(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.retail_v2.types.GetControlRequest, dict]]):\n        The request object. Request for GetCon",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Control to get. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/controls/{control_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.Control: Configures dynamic metadata that can be linked to a [ServingConfig][google.cloud.retail.v2.ServingConfig] and affect search or recommendation results at serving time."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.Control"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_controls",
          "description": "Lists all Controls by their parent\n[Catalog][google.cloud.retail.v2.Catalog].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_list_controls():\n        # Create a client\n        client = retail_v2.ControlServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.ListControlsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_controls(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Op",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The catalog resource name. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.services.control_service.pagers.ListControlsAsyncPager: Response for ListControls method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.services.control_service.pagers.ListControlsAsyncPager"
          ]
        }
      }
    ]
  },
  "GenerativeQuestionService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "update_generative_questions_feature_config",
          "description": "Manages overal generative question feature state --\nenables toggling feature on and off.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_update_generative_questions_feature_config():\n        # Create a client\n        client = retail_v2.GenerativeQuestionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        generative_questions_feature_config = retail_v2.GenerativeQuestionsFeatureConfig()\n        generative_questions_feature_config.catalog = \"catalog_value\"\n\n        request = retail_v2.UpdateGenerativeQuestionsFeatureConfigRequest(\n            genera",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "generative_questions_feature_config": {
                "type": "google.cloud.retail_v2.types.GenerativeQuestionsFeatureConfig",
                "description": "Required. The configuration managing the feature state.  This corresponds to the ``generative_questions_feature_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Indicates which fields in the provided [GenerativeQuestionsFeatureConfig][google.cloud.retail.v2.GenerativeQuestionsFeatureConfig] to update. If not set or empty, all supported fields are updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.GenerativeQuestionsFeatureConfig: Configuration for overall generative question feature state."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "generative_questions_feature_config",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.GenerativeQuestionsFeatureConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_generative_questions_feature_config",
          "description": "Manages overal generative question feature state --\nenables toggling feature on and off.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_get_generative_questions_feature_config():\n        # Create a client\n        client = retail_v2.GenerativeQuestionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.GetGenerativeQuestionsFeatureConfigRequest(\n            catalog=\"catalog_value\",\n        )\n\n        # Make the request\n        response = await client.get_generative_questions_feature_config(request=request)\n\n        # Handle the ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "catalog": {
                "type": "str",
                "description": "Required. Resource name of the parent catalog. Format: projects/{project}/locations/{location}/catalogs/{catalog}  This corresponds to the ``catalog`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.GenerativeQuestionsFeatureConfig: Configuration for overall generative question feature state."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "catalog",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.GenerativeQuestionsFeatureConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_generative_question_configs",
          "description": "Returns all questions for a given catalog.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_list_generative_question_configs():\n        # Create a client\n        client = retail_v2.GenerativeQuestionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.ListGenerativeQuestionConfigsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.list_generative_question_configs(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Resource name of the parent catalog. Format: projects/{project}/locations/{location}/catalogs/{catalog}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.ListGenerativeQuestionConfigsResponse: Response for ListQuestions method."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.ListGenerativeQuestionConfigsResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_generative_question_config",
          "description": "Allows management of individual questions.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_update_generative_question_config():\n        # Create a client\n        client = retail_v2.GenerativeQuestionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        generative_question_config = retail_v2.GenerativeQuestionConfig()\n        generative_question_config.catalog = \"catalog_value\"\n        generative_question_config.facet = \"facet_value\"\n\n        request = retail_v2.UpdateGenerativeQuestionConfigRequest(\n            generative_question_config=generative_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "generative_question_config": {
                "type": "google.cloud.retail_v2.types.GenerativeQuestionConfig",
                "description": "Required. The question to update. This corresponds to the ``generative_question_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Indicates which fields in the provided [GenerativeQuestionConfig][google.cloud.retail.v2.GenerativeQuestionConfig] to update. The following are NOT supported:  -  [GenerativeQuestionConfig.frequency][google.cloud.retail.v2.GenerativeQuestionConfig.frequency]  If not set or empty, all supported fields are updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.GenerativeQuestionConfig: Configuration for a single generated question."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "generative_question_config",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.GenerativeQuestionConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_update_generative_question_configs",
          "description": "Allows management of multiple questions.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_batch_update_generative_question_configs():\n        # Create a client\n        client = retail_v2.GenerativeQuestionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        requests = retail_v2.UpdateGenerativeQuestionConfigRequest()\n        requests.generative_question_config.catalog = \"catalog_value\"\n        requests.generative_question_config.facet = \"facet_value\"\n\n        request = retail_v2.BatchUpdateGenerativeQuestionConfigsRequest(\n            requests=reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Optional. Resource name of the parent catalog. Format: projects/{project}/locations/{location}/catalogs/{catalog}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "requests": {
                "type": "MutableSequence[google.cloud.retail_v2.types.UpdateGenerativeQuestionConfigRequest]",
                "description": "Required. The updates question configs.  This corresponds to the ``requests`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.BatchUpdateGenerativeQuestionConfigsResponse: Aggregated response for UpdateGenerativeQuestionConfig method."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.BatchUpdateGenerativeQuestionConfigsResponse"
          ]
        }
      }
    ]
  },
  "ModelService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_model",
          "description": "Creates a new model.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_create_model():\n        # Create a client\n        client = retail_v2.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        model = retail_v2.Model()\n        model.name = \"name_value\"\n        model.display_name = \"display_name_value\"\n        model.type_ = \"type__value\"\n\n        request = retail_v2.CreateModelRequest(\n            parent=\"parent_value\",\n            model=model,\n        )\n\n        # Make the request\n        operation = client.create_model(request=request)\n\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource under which to create the model. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "model": {
                "type": "google.cloud.retail_v2.types.Model",
                "description": "Required. The payload of the [Model][google.cloud.retail.v2.Model] to create.  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.retail_v2.types.Model` Metadata that describes the training and serving parameters of a [Model][google.cloud.retail.v2.Model]. A [Model][google.cloud.retail.v2.Model] can be associated with a [ServingConfig][google.cloud.retail.v2.ServingConfig] and then queried through the Predict API."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "model",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_model",
          "description": "Gets a model.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_get_model():\n        # Create a client\n        client = retail_v2.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.GetModelRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_model(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.retail_v2.types.GetModelRequest, dict]]):\n        The request object. Request for getting a model.\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the [Model][google.cloud.retail.v2.Model] to get. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog}/models/{model_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.Model: Metadata that describes the training and serving parameters of a [Model][google.cloud.retail.v2.Model]. A [Model][google.cloud.retail.v2.Model] can be associated with a [ServingConfig][google.cloud.retail.v2.ServingConfig] and then queried through the Predict API."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.Model"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "pause_model",
          "description": "Pauses the training of an existing model.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_pause_model():\n        # Create a client\n        client = retail_v2.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.PauseModelRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.pause_model(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.retail_v2.types.PauseModelRequest, dict]]):\n        The request ob",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the model to pause. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.Model: Metadata that describes the training and serving parameters of a [Model][google.cloud.retail.v2.Model]. A [Model][google.cloud.retail.v2.Model] can be associated with a [ServingConfig][google.cloud.retail.v2.ServingConfig] and then queried through the Predict API."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.Model"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "resume_model",
          "description": "Resumes the training of an existing model.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_resume_model():\n        # Create a client\n        client = retail_v2.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.ResumeModelRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.resume_model(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.retail_v2.types.ResumeModelRequest, dict]]):\n        The reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the model to resume. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.Model: Metadata that describes the training and serving parameters of a [Model][google.cloud.retail.v2.Model]. A [Model][google.cloud.retail.v2.Model] can be associated with a [ServingConfig][google.cloud.retail.v2.ServingConfig] and then queried through the Predict API."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.Model"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_model",
          "description": "Deletes an existing model.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_delete_model():\n        # Create a client\n        client = retail_v2.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.DeleteModelRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_model(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.retail_v2.types.DeleteModelRequest, dict]]):\n        The request object. Request for deleting a model.\n    name (:class:`str`):\n        Required",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the [Model][google.cloud.retail.v2.Model] to delete. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_models",
          "description": "Lists all the models linked to this event store.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_list_models():\n        # Create a client\n        client = retail_v2.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.ListModelsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_models(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.retail_v2.t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent for which to list models. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.services.model_service.pagers.ListModelsAsyncPager: Response to a ListModelRequest.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.services.model_service.pagers.ListModelsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_model",
          "description": "Update of model metadata. Only fields that currently can be\nupdated are: ``filtering_option`` and ``periodic_tuning_state``.\nIf other values are provided, this API method ignores them.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_update_model():\n        # Create a client\n        client = retail_v2.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        model = retail_v2.Model()\n        model.name = \"name_value\"\n        model.display_name = \"display_name_value\"\n        model.type_ = \"type__value\"\n\n        request = retail_v2.UpdateModelRequest(",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "google.cloud.retail_v2.types.Model",
                "description": "Required. The body of the updated [Model][google.cloud.retail.v2.Model].  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Indicates which fields in the provided 'model' to update. If not set, by default updates all fields.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.Model: Metadata that describes the training and serving parameters of a [Model][google.cloud.retail.v2.Model]. A [Model][google.cloud.retail.v2.Model] can be associated with a [ServingConfig][google.cloud.retail.v2.ServingConfig] and then queried through the Predict API."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.Model"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "tune_model",
          "description": "Tunes an existing model.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_tune_model():\n        # Create a client\n        client = retail_v2.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.TuneModelRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.tune_model(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[go",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the model to tune. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.retail_v2.types.TuneModelResponse` Response associated with a tune operation."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      }
    ]
  },
  "PredictionService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "predict",
          "description": "Makes a recommendation prediction.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_predict():\n        # Create a client\n        client = retail_v2.PredictionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        user_event = retail_v2.UserEvent()\n        user_event.event_type = \"event_type_value\"\n        user_event.visitor_id = \"visitor_id_value\"\n\n        request = retail_v2.PredictRequest(\n            placement=\"placement_value\",\n            user_event=user_event,\n        )\n\n        # Make the request\n        response = await client.predict(request=",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.PredictResponse"
          ]
        }
      }
    ]
  },
  "ProductService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_product",
          "description": "Creates a [Product][google.cloud.retail.v2.Product].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_create_product():\n        # Create a client\n        client = retail_v2.ProductServiceAsyncClient()\n\n        # Initialize request argument(s)\n        product = retail_v2.Product()\n        product.title = \"title_value\"\n\n        request = retail_v2.CreateProductRequest(\n            parent=\"parent_value\",\n            product=product,\n            product_id=\"product_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_product(request=req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent catalog resource name, such as ``projects/*/locations/global/catalogs/default_catalog/branches/default_branch``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "product": {
                "type": "google.cloud.retail_v2.types.Product",
                "description": "Required. The [Product][google.cloud.retail.v2.Product] to create.  This corresponds to the ``product`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "product_id": {
                "type": "str",
                "description": "Required. The ID to use for the [Product][google.cloud.retail.v2.Product], which will become the final component of the [Product.name][google.cloud.retail.v2.Product.name].  If the caller does not have permission to create the [Product][google.cloud.retail.v2.Product], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  This field must be unique among all [Product][google.cloud.retail.v2.Product]s with the same [parent][google.cloud.retail.v2.CreateProductRequest.parent]. Otherwise, an ALREADY_EXISTS error is returned.  This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.  This corresponds to the ``product_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.Product: Product captures all metadata information of items to be recommended or searched."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "product",
              "product_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.Product"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_product",
          "description": "Gets a [Product][google.cloud.retail.v2.Product].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_get_product():\n        # Create a client\n        client = retail_v2.ProductServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.GetProductRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_product(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.retail_v2.types.GetProductRequest, dict]]):\n        The ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of [Product][google.cloud.retail.v2.Product], such as ``projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/some_product_id``.  If the caller does not have permission to access the [Product][google.cloud.retail.v2.Product], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the requested [Product][google.cloud.retail.v2.Product] does not exist, a NOT_FOUND error is returned.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.Product: Product captures all metadata information of items to be recommended or searched."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.Product"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_products",
          "description": "Gets a list of [Product][google.cloud.retail.v2.Product]s.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_list_products():\n        # Create a client\n        client = retail_v2.ProductServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.ListProductsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_products(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent branch resource name, such as ``projects/*/locations/global/catalogs/default_catalog/branches/0``. Use ``default_branch`` as the branch ID, to list products under the default branch.  If the caller does not have permission to list [Product][google.cloud.retail.v2.Product]s under this branch, regardless of whether or not this branch exists, a PERMISSION_DENIED error is returned.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.services.product_service.pagers.ListProductsAsyncPager: Response message for [ProductService.ListProducts][google.cloud.retail.v2.ProductService.ListProducts] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.services.product_service.pagers.ListProductsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_product",
          "description": "Updates a [Product][google.cloud.retail.v2.Product].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_update_product():\n        # Create a client\n        client = retail_v2.ProductServiceAsyncClient()\n\n        # Initialize request argument(s)\n        product = retail_v2.Product()\n        product.title = \"title_value\"\n\n        request = retail_v2.UpdateProductRequest(\n            product=product,\n        )\n\n        # Make the request\n        response = await client.update_product(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "product": {
                "type": "google.cloud.retail_v2.types.Product",
                "description": "Required. The product to update/create.  If the caller does not have permission to update the [Product][google.cloud.retail.v2.Product], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the [Product][google.cloud.retail.v2.Product] to update does not exist and [allow_missing][google.cloud.retail.v2.UpdateProductRequest.allow_missing] is not set, a NOT_FOUND error is returned.  This corresponds to the ``product`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Indicates which fields in the provided [Product][google.cloud.retail.v2.Product] to update. The immutable and output only fields are NOT supported. If not set, all supported fields (the fields that are neither immutable nor output only) are updated.  If an unsupported or unknown field is provided, an INVALID_ARGUMENT error is returned.  The attribute key can be updated by setting the mask path as \"attributes.${key_name}\". If a key name is present in the mask but not in the patching product from the request, this key will be deleted after the update.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.Product: Product captures all metadata information of items to be recommended or searched."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "product",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.Product"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_product",
          "description": "Deletes a [Product][google.cloud.retail.v2.Product].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_delete_product():\n        # Create a client\n        client = retail_v2.ProductServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.DeleteProductRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_product(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.retail_v2.types.DeleteProductRequest, dict]]):\n        The request object. Request message for\n        [Produc",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of [Product][google.cloud.retail.v2.Product], such as ``projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/some_product_id``.  If the caller does not have permission to delete the [Product][google.cloud.retail.v2.Product], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the [Product][google.cloud.retail.v2.Product] to delete does not exist, a NOT_FOUND error is returned.  The [Product][google.cloud.retail.v2.Product] to delete can neither be a [Product.Type.COLLECTION][google.cloud.retail.v2.Product.Type.COLLECTION] [Product][google.cloud.retail.v2.Product] member nor a [Product.Type.PRIMARY][google.cloud.retail.v2.Product.Type.PRIMARY] [Product][google.cloud.retail.v2.Product] with more than one [variants][google.cloud.retail.v2.Product.Type.VARIANT]. Otherwise, an INVALID_ARGUMENT error is returned.  All inventory information for the named [Product][google.cloud.retail.v2.Product] will be deleted.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "purge_products",
          "description": "Permanently deletes all selected\n[Product][google.cloud.retail.v2.Product]s under a branch.\n\nThis process is asynchronous. If the request is valid, the\nremoval will be enqueued and processed offline. Depending on the\nnumber of [Product][google.cloud.retail.v2.Product]s, this\noperation could take hours to complete. Before the operation\ncompletes, some [Product][google.cloud.retail.v2.Product]s may\nstill be returned by\n[ProductService.GetProduct][google.cloud.retail.v2.ProductService.GetProduct]\nor\n[ProductService.ListProducts][google.cloud.retail.v2.ProductService.ListProducts].\n\nDepending on the number of\n[Product][google.cloud.retail.v2.Product]s, this operation could\ntake hours to complete. To get a sample of\n[Product][google.cloud.retail.v2.Product]s that would be\ndeleted, set\n[PurgeProductsRequest.force][google.cloud.retail.v2.PurgeProductsRequest.force]\nto false.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It wil",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_products",
          "description": "Bulk import of multiple\n[Product][google.cloud.retail.v2.Product]s.\n\nRequest processing may be synchronous. Non-existing items are\ncreated.\n\nNote that it is possible for a subset of the\n[Product][google.cloud.retail.v2.Product]s to be successfully\nupdated.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_import_products():\n        # Create a client\n        client = retail_v2.ProductServiceAsyncClient()\n\n        # Initialize request argument(s)\n        input_config = retail_v2.ProductInputConfig()\n        input_config.product_inline_source.products.title = \"title_valu",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "set_inventory",
          "description": "Updates inventory information for a\n[Product][google.cloud.retail.v2.Product] while respecting the\nlast update timestamps of each inventory field.\n\nThis process is asynchronous and does not require the\n[Product][google.cloud.retail.v2.Product] to exist before\nupdating fulfillment information. If the request is valid, the\nupdate is enqueued and processed downstream. As a consequence,\nwhen a response is returned, updates are not immediately\nmanifested in the [Product][google.cloud.retail.v2.Product]\nqueried by\n[ProductService.GetProduct][google.cloud.retail.v2.ProductService.GetProduct]\nor\n[ProductService.ListProducts][google.cloud.retail.v2.ProductService.ListProducts].\n\nWhen inventory is updated with\n[ProductService.CreateProduct][google.cloud.retail.v2.ProductService.CreateProduct]\nand\n[ProductService.UpdateProduct][google.cloud.retail.v2.ProductService.UpdateProduct],\nthe specified inventory field value(s) overwrite any existing\nvalue(s) while ignoring the last update time for this field.\nFurthermore, the l",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "inventory": {
                "type": "google.cloud.retail_v2.types.Product",
                "description": "Required. The inventory information to update. The allowable fields to update are:  -  [Product.price_info][google.cloud.retail.v2.Product.price_info] -  [Product.availability][google.cloud.retail.v2.Product.availability] -  [Product.available_quantity][google.cloud.retail.v2.Product.available_quantity] -  [Product.fulfillment_info][google.cloud.retail.v2.Product.fulfillment_info] The updated inventory fields must be specified in [SetInventoryRequest.set_mask][google.cloud.retail.v2.SetInventoryRequest.set_mask].  If [SetInventoryRequest.inventory.name][google.cloud.retail.v2.Product.name] is empty or invalid, an INVALID_ARGUMENT error is returned.  If the caller does not have permission to update the [Product][google.cloud.retail.v2.Product] named in [Product.name][google.cloud.retail.v2.Product.name], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the [Product][google.cloud.retail.v2.Product] to update does not have existing inventory information, the provided inventory information will be inserted.  If the [Product][google.cloud.retail.v2.Product] to update has existing inventory information, the provided inventory information will be merged while respecting the last update time for each inventory field, using the provided or default value for [SetInventoryRequest.set_time][google.cloud.retail.v2.SetInventoryRequest.set_time].  The caller can replace place IDs for a subset of fulfillment types in the following ways:  -  Adds \"fulfillment_info\" in [SetInventoryRequest.set_mask][google.cloud.retail.v2.SetInventoryRequest.set_mask] -  Specifies only the desired fulfillment types and corresponding place IDs to update in [SetInventoryRequest.inventory.fulfillment_info][google.cloud.retail.v2.Product.fulfillment_info]  The caller can clear all place IDs from a subset of fulfillment types in the following ways:  -  Adds \"fulfillment_info\" in [SetInventoryRequest.set_mask][google.cloud.retail.v2.SetInventoryRequest.set_mask] -  Specifies only the desired fulfillment types to clear in [SetInventoryRequest.inventory.fulfillment_info][google.cloud.retail.v2.Product.fulfillment_info] -  Checks that only the desired fulfillment info types have empty [SetInventoryRequest.inventory.fulfillment_info.place_ids][google.cloud.retail.v2.FulfillmentInfo.place_ids]  The last update time is recorded for the following inventory fields:  -  [Product.price_info][google.cloud.retail.v2.Product.price_info] -  [Product.availability][google.cloud.retail.v2.Product.availability] -  [Product.available_quantity][google.cloud.retail.v2.Product.available_quantity] -  [Product.fulfillment_info][google.cloud.retail.v2.Product.fulfillment_info]  If a full overwrite of inventory information while ignoring timestamps is needed, [ProductService.UpdateProduct][google.cloud.retail.v2.ProductService.UpdateProduct] should be invoked instead.  This corresponds to the ``inventory`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "set_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Indicates which inventory fields in the provided [Product][google.cloud.retail.v2.Product] to update.  At least one field must be provided.  If an unsupported or unknown field is provided, an INVALID_ARGUMENT error is returned and the entire update will be ignored.  This corresponds to the ``set_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.retail_v2.types.SetInventoryResponse` Response of the SetInventoryRequest. Currently empty because there is no meaningful response populated from the [ProductService.SetInventory][google.cloud.retail.v2.ProductService.SetInventory] method."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "inventory",
              "set_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "add_fulfillment_places",
          "description": "We recommend that you use the\n[ProductService.AddLocalInventories][google.cloud.retail.v2.ProductService.AddLocalInventories]\nmethod instead of the\n[ProductService.AddFulfillmentPlaces][google.cloud.retail.v2.ProductService.AddFulfillmentPlaces]\nmethod.\n[ProductService.AddLocalInventories][google.cloud.retail.v2.ProductService.AddLocalInventories]\nachieves the same results but provides more fine-grained control\nover ingesting local inventory data.\n\nIncrementally adds place IDs to\n[Product.fulfillment_info.place_ids][google.cloud.retail.v2.FulfillmentInfo.place_ids].\n\nThis process is asynchronous and does not require the\n[Product][google.cloud.retail.v2.Product] to exist before\nupdating fulfillment information. If the request is valid, the\nupdate will be enqueued and processed downstream. As a\nconsequence, when a response is returned, the added place IDs\nare not immediately manifested in the\n[Product][google.cloud.retail.v2.Product] queried by\n[ProductService.GetProduct][google.cloud.retail.v2.ProductService.G",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "product": {
                "type": "str",
                "description": "Required. Full resource name of [Product][google.cloud.retail.v2.Product], such as ``projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/some_product_id``.  If the caller does not have permission to access the [Product][google.cloud.retail.v2.Product], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  This corresponds to the ``product`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.retail_v2.types.AddFulfillmentPlacesResponse` Response of the AddFulfillmentPlacesRequest. Currently empty because there is no meaningful response populated from the [ProductService.AddFulfillmentPlaces][google.cloud.retail.v2.ProductService.AddFulfillmentPlaces] method."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "product",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "remove_fulfillment_places",
          "description": "We recommend that you use the\n[ProductService.RemoveLocalInventories][google.cloud.retail.v2.ProductService.RemoveLocalInventories]\nmethod instead of the\n[ProductService.RemoveFulfillmentPlaces][google.cloud.retail.v2.ProductService.RemoveFulfillmentPlaces]\nmethod.\n[ProductService.RemoveLocalInventories][google.cloud.retail.v2.ProductService.RemoveLocalInventories]\nachieves the same results but provides more fine-grained control\nover ingesting local inventory data.\n\nIncrementally removes place IDs from a\n[Product.fulfillment_info.place_ids][google.cloud.retail.v2.FulfillmentInfo.place_ids].\n\nThis process is asynchronous and does not require the\n[Product][google.cloud.retail.v2.Product] to exist before\nupdating fulfillment information. If the request is valid, the\nupdate will be enqueued and processed downstream. As a\nconsequence, when a response is returned, the removed place IDs\nare not immediately manifested in the\n[Product][google.cloud.retail.v2.Product] queried by\n[ProductService.GetProduct][google.cloud",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "product": {
                "type": "str",
                "description": "Required. Full resource name of [Product][google.cloud.retail.v2.Product], such as ``projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/some_product_id``.  If the caller does not have permission to access the [Product][google.cloud.retail.v2.Product], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  This corresponds to the ``product`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.retail_v2.types.RemoveFulfillmentPlacesResponse` Response of the RemoveFulfillmentPlacesRequest. Currently empty because there is no meaningful response populated from the [ProductService.RemoveFulfillmentPlaces][google.cloud.retail.v2.ProductService.RemoveFulfillmentPlaces] method."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "product",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "add_local_inventories",
          "description": "Updates local inventory information for a\n[Product][google.cloud.retail.v2.Product] at a list of places,\nwhile respecting the last update timestamps of each inventory\nfield.\n\nThis process is asynchronous and does not require the\n[Product][google.cloud.retail.v2.Product] to exist before\nupdating inventory information. If the request is valid, the\nupdate will be enqueued and processed downstream. As a\nconsequence, when a response is returned, updates are not\nimmediately manifested in the\n[Product][google.cloud.retail.v2.Product] queried by\n[ProductService.GetProduct][google.cloud.retail.v2.ProductService.GetProduct]\nor\n[ProductService.ListProducts][google.cloud.retail.v2.ProductService.ListProducts].\n\nLocal inventory information can only be modified using this\nmethod.\n[ProductService.CreateProduct][google.cloud.retail.v2.ProductService.CreateProduct]\nand\n[ProductService.UpdateProduct][google.cloud.retail.v2.ProductService.UpdateProduct]\nhas no effect on local inventories.\n\nThe returned [Operation][google.longru",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "product": {
                "type": "str",
                "description": "Required. Full resource name of [Product][google.cloud.retail.v2.Product], such as ``projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/some_product_id``.  If the caller does not have permission to access the [Product][google.cloud.retail.v2.Product], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  This corresponds to the ``product`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.retail_v2.types.AddLocalInventoriesResponse` Response of the [ProductService.AddLocalInventories][google.cloud.retail.v2.ProductService.AddLocalInventories] API. Currently empty because there is no meaningful response populated from the [ProductService.AddLocalInventories][google.cloud.retail.v2.ProductService.AddLocalInventories] method."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "product",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "remove_local_inventories",
          "description": "Remove local inventory information for a\n[Product][google.cloud.retail.v2.Product] at a list of places at\na removal timestamp.\n\nThis process is asynchronous. If the request is valid, the\nremoval will be enqueued and processed downstream. As a\nconsequence, when a response is returned, removals are not\nimmediately manifested in the\n[Product][google.cloud.retail.v2.Product] queried by\n[ProductService.GetProduct][google.cloud.retail.v2.ProductService.GetProduct]\nor\n[ProductService.ListProducts][google.cloud.retail.v2.ProductService.ListProducts].\n\nLocal inventory information can only be removed using this\nmethod.\n[ProductService.CreateProduct][google.cloud.retail.v2.ProductService.CreateProduct]\nand\n[ProductService.UpdateProduct][google.cloud.retail.v2.ProductService.UpdateProduct]\nhas no effect on local inventories.\n\nThe returned [Operation][google.longrunning.Operation]s will be\nobsolete after 1 day, and\n[GetOperation][google.longrunning.Operations.GetOperation] API\nwill return NOT_FOUND afterwards.\n\nIf conflic",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "product": {
                "type": "str",
                "description": "Required. Full resource name of [Product][google.cloud.retail.v2.Product], such as ``projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/some_product_id``.  If the caller does not have permission to access the [Product][google.cloud.retail.v2.Product], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  This corresponds to the ``product`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.retail_v2.types.RemoveLocalInventoriesResponse` Response of the [ProductService.RemoveLocalInventories][google.cloud.retail.v2.ProductService.RemoveLocalInventories] API. Currently empty because there is no meaningful response populated from the [ProductService.RemoveLocalInventories][google.cloud.retail.v2.ProductService.RemoveLocalInventories] method."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "product",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      }
    ]
  },
  "SearchService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "search",
          "description": "Performs a search.\n\nThis feature is only available for users who have Retail\nSearch enabled. Enable Retail Search on Cloud Console\nbefore using this feature.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_search():\n        # Create a client\n        client = retail_v2.SearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.SearchRequest(\n            placement=\"placement_value\",\n            visitor_id=\"visitor_id_value\",\n        )\n\n        # Make the request\n        page_result = client.search(request=request)\n\n        # Handl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.services.search_service.pagers.SearchAsyncPager"
          ]
        }
      }
    ]
  },
  "ServingConfigService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_serving_config",
          "description": "Creates a ServingConfig.\n\nA maximum of 100\n[ServingConfig][google.cloud.retail.v2.ServingConfig]s are\nallowed in a [Catalog][google.cloud.retail.v2.Catalog],\notherwise a FAILED_PRECONDITION error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_create_serving_config():\n        # Create a client\n        client = retail_v2.ServingConfigServiceAsyncClient()\n\n        # Initialize request argument(s)\n        serving_config = retail_v2.ServingConfig()\n        serving_config.display_name = \"display_name_value\"\n        serving_config.solution_types = ['SOLUTION_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Full resource name of parent. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "serving_config": {
                "type": "google.cloud.retail_v2.types.ServingConfig",
                "description": "Required. The ServingConfig to create.  This corresponds to the ``serving_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "serving_config_id": {
                "type": "str",
                "description": "Required. The ID to use for the ServingConfig, which will become the final component of the ServingConfig's resource name.  This value should be 4-63 characters, and valid characters are /[a-z][0-9]-_/.  This corresponds to the ``serving_config_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.ServingConfig: Configures metadata that is used to generate serving time results (e.g. search results or recommendation predictions)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "serving_config",
              "serving_config_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.ServingConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_serving_config",
          "description": "Deletes a ServingConfig.\n\nReturns a NotFound error if the ServingConfig does not\nexist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_delete_serving_config():\n        # Create a client\n        client = retail_v2.ServingConfigServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.DeleteServingConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_serving_config(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.retail_v2.types.DeleteServingConfigRequest, dict]",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the ServingConfig to delete. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/servingConfigs/{serving_config_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_serving_config",
          "description": "Updates a ServingConfig.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_update_serving_config():\n        # Create a client\n        client = retail_v2.ServingConfigServiceAsyncClient()\n\n        # Initialize request argument(s)\n        serving_config = retail_v2.ServingConfig()\n        serving_config.display_name = \"display_name_value\"\n        serving_config.solution_types = ['SOLUTION_TYPE_SEARCH']\n\n        request = retail_v2.UpdateServingConfigRequest(\n            serving_config=serving_config,\n        )\n\n        # Make the request\n        response = await client.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "serving_config": {
                "type": "google.cloud.retail_v2.types.ServingConfig",
                "description": "Required. The ServingConfig to update.  This corresponds to the ``serving_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Indicates which fields in the provided [ServingConfig][google.cloud.retail.v2.ServingConfig] to update. The following are NOT supported:  -  [ServingConfig.name][google.cloud.retail.v2.ServingConfig.name]  If not set, all supported fields are updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.ServingConfig: Configures metadata that is used to generate serving time results (e.g. search results or recommendation predictions)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "serving_config",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.ServingConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_serving_config",
          "description": "Gets a ServingConfig.\n\nReturns a NotFound error if the ServingConfig does not\nexist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_get_serving_config():\n        # Create a client\n        client = retail_v2.ServingConfigServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.GetServingConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_serving_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.c",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the ServingConfig to get. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/servingConfigs/{serving_config_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.ServingConfig: Configures metadata that is used to generate serving time results (e.g. search results or recommendation predictions)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.ServingConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_serving_configs",
          "description": "Lists all ServingConfigs linked to this catalog.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_list_serving_configs():\n        # Create a client\n        client = retail_v2.ServingConfigServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.ListServingConfigsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_serving_configs(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The catalog resource name. Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.services.serving_config_service.pagers.ListServingConfigsAsyncPager: Response for ListServingConfigs method. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.services.serving_config_service.pagers.ListServingConfigsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "add_control",
          "description": "Enables a Control on the specified ServingConfig. The control is\nadded in the last position of the list of controls it belongs to\n(e.g. if it's a facet spec control it will be applied in the\nlast position of servingConfig.facetSpecIds) Returns a\nALREADY_EXISTS error if the control has already been applied.\nReturns a FAILED_PRECONDITION error if the addition could exceed\nmaximum number of control allowed for that type of control.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_add_control():\n        # Create a client\n        client = retail_v2.ServingConfigServiceAsy",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "serving_config": {
                "type": "str",
                "description": "Required. The source ServingConfig resource name . Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/servingConfigs/{serving_config_id}``  This corresponds to the ``serving_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.ServingConfig: Configures metadata that is used to generate serving time results (e.g. search results or recommendation predictions)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "serving_config",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.ServingConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "remove_control",
          "description": "Disables a Control on the specified ServingConfig. The control\nis removed from the ServingConfig. Returns a NOT_FOUND error if\nthe Control is not enabled for the ServingConfig.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_remove_control():\n        # Create a client\n        client = retail_v2.ServingConfigServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.RemoveControlRequest(\n            serving_config=\"serving_config_value\",\n            control_id=\"control_id_value\",\n        )\n\n        # Make the request\n        response =",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "serving_config": {
                "type": "str",
                "description": "Required. The source ServingConfig resource name . Format: ``projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/servingConfigs/{serving_config_id}``  This corresponds to the ``serving_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.retail_v2.types.ServingConfig: Configures metadata that is used to generate serving time results (e.g. search results or recommendation predictions)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "serving_config",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.ServingConfig"
          ]
        }
      }
    ]
  },
  "UserEventService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "write_user_event",
          "description": "Writes a single user event.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_write_user_event():\n        # Create a client\n        client = retail_v2.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n        user_event = retail_v2.UserEvent()\n        user_event.event_type = \"event_type_value\"\n        user_event.visitor_id = \"visitor_id_value\"\n\n        request = retail_v2.WriteUserEventRequest(\n            parent=\"parent_value\",\n            user_event=user_event,\n        )\n\n        # Make the request\n        response = await client.write_user_eve",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.retail_v2.types.UserEvent"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "collect_user_event",
          "description": "Writes a single user event from the browser. This\nuses a GET request to due to browser restriction of\nPOST-ing to a 3rd party domain.\n\nThis method is used only by the Retail API JavaScript\npixel and Google Tag Manager. Users should not call this\nmethod directly.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_collect_user_event():\n        # Create a client\n        client = retail_v2.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.CollectUserEventRequest(\n            prebuilt_rule=\"prebuilt_rule_value\",\n            ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api.httpbody_pb2.HttpBody"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "purge_user_events",
          "description": "Deletes permanently all user events specified by the\nfilter provided. Depending on the number of events\nspecified by the filter, this operation could take hours\nor days to complete. To test a filter, use the list\ncommand first.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_purge_user_events():\n        # Create a client\n        client = retail_v2.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = retail_v2.PurgeUserEventsRequest(\n            parent=\"parent_value\",\n            filter=\"filter_value\",\n        )\n\n        # Make th",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_user_events",
          "description": "Bulk import of User events. Request processing might be\nsynchronous. Events that already exist are skipped. Use this\nmethod for backfilling historical user events.\n\n``Operation.response`` is of type ``ImportResponse``. Note that\nit is possible for a subset of the items to be successfully\ninserted. ``Operation.metadata`` is of type ``ImportMetadata``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2\n\n    async def sample_import_user_events():\n        # Create a client\n        client = retail_v2.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n        input_config = r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "rejoin_user_events",
          "description": "Starts a user-event rejoin operation with latest\nproduct catalog. Events are not annotated with detailed\nproduct information for products that are missing from\nthe catalog when the user event is ingested. These\nevents are stored as unjoined events with limited usage\non training and serving. You can use this method to\nstart a join operation on specified events with the\nlatest version of product catalog. You can also use this\nmethod to correct events joined with the wrong product\ncatalog. A rejoin operation can take hours or days to\ncomplete.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import retail_v2",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      }
    ]
  }
}