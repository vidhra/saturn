{
  "MetastoreService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_catalog",
          "description": "Creates a new catalog.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_create_catalog():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.CreateCatalogRequest(\n            parent=\"parent_value\",\n            catalog_id=\"catalog_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_catalog(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.c",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this catalog will be created. Format: projects/{project_id_or_number}/locations/{location_id}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "catalog": {
                "type": "google.cloud.bigquery_biglake_v1.types.Catalog",
                "description": "Required. The catalog to create. The ``name`` field does not need to be provided.  This corresponds to the ``catalog`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "catalog_id": {
                "type": "str",
                "description": "Required. The ID to use for the catalog, which will become the final component of the catalog's resource name.  This corresponds to the ``catalog_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.types.Catalog: Catalog is the container of databases."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "catalog",
              "catalog_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.CreateCatalogRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_catalog",
          "description": "Deletes an existing catalog specified by the catalog\nID.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_delete_catalog():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.DeleteCatalogRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.delete_catalog(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.bigquery",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the catalog to delete. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.types.Catalog: Catalog is the container of databases."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.DeleteCatalogRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_catalog",
          "description": "Gets the catalog specified by the resource name.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_get_catalog():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.GetCatalogRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_catalog(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.bigquery_biglake_v1.types",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the catalog to retrieve. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.types.Catalog: Catalog is the container of databases."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.GetCatalogRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_catalogs",
          "description": "List all catalogs in a specified project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_list_catalogs():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.ListCatalogsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_catalogs(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Option",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of catalogs. Format: projects/{project_id_or_number}/locations/{location_id}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.services.metastore_service.pagers.ListCatalogsAsyncPager: Response message for the ListCatalogs method. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.ListCatalogsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_database",
          "description": "Creates a new database.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_create_database():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.CreateDatabaseRequest(\n            parent=\"parent_value\",\n            database_id=\"database_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_database(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[go",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this database will be created. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "database": {
                "type": "google.cloud.bigquery_biglake_v1.types.Database",
                "description": "Required. The database to create. The ``name`` field does not need to be provided.  This corresponds to the ``database`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "database_id": {
                "type": "str",
                "description": "Required. The ID to use for the database, which will become the final component of the database's resource name.  This corresponds to the ``database_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.types.Database: Database is the container of tables."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "database",
              "database_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.CreateDatabaseRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_database",
          "description": "Deletes an existing database specified by the\ndatabase ID.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_delete_database():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.DeleteDatabaseRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.delete_database(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.big",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the database to delete. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.types.Database: Database is the container of tables."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.DeleteDatabaseRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_database",
          "description": "Updates an existing database specified by the\ndatabase ID.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_update_database():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.UpdateDatabaseRequest(\n        )\n\n        # Make the request\n        response = await client.update_database(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.bigquery_biglake_v1.types.UpdateDa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "database": {
                "type": "google.cloud.bigquery_biglake_v1.types.Database",
                "description": "Required. The database to update.  The database's ``name`` field is used to identify the database to update. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}  This corresponds to the ``database`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to update.  For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If not set, defaults to all of the fields that are allowed to update.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.types.Database: Database is the container of tables."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "database",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.UpdateDatabaseRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_database",
          "description": "Gets the database specified by the resource name.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_get_database():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.GetDatabaseRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_database(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.bigquery_biglake_v1.t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the database to retrieve. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.types.Database: Database is the container of tables."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.GetDatabaseRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_databases",
          "description": "List all databases in a specified catalog.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_list_databases():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.ListDatabasesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_databases(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Op",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of databases. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.services.metastore_service.pagers.ListDatabasesAsyncPager: Response message for the ListDatabases method. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.ListDatabasesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_table",
          "description": "Creates a new table.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_create_table():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.CreateTableRequest(\n            parent=\"parent_value\",\n            table_id=\"table_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_table(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.bigquer",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this table will be created. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "table": {
                "type": "google.cloud.bigquery_biglake_v1.types.Table",
                "description": "Required. The table to create. The ``name`` field does not need to be provided for the table creation.  This corresponds to the ``table`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "table_id": {
                "type": "str",
                "description": "Required. The ID to use for the table, which will become the final component of the table's resource name.  This corresponds to the ``table_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.types.Table: Represents a table."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "table",
              "table_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.CreateTableRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_table",
          "description": "Deletes an existing table specified by the table ID.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_delete_table():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.DeleteTableRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.delete_table(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.bigquery_biglake_v",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the table to delete. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.types.Table: Represents a table."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.DeleteTableRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_table",
          "description": "Updates an existing table specified by the table ID.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_update_table():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.UpdateTableRequest(\n        )\n\n        # Make the request\n        response = await client.update_table(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.bigquery_biglake_v1.types.UpdateTableRequest, dic",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "table": {
                "type": "google.cloud.bigquery_biglake_v1.types.Table",
                "description": "Required. The table to update.  The table's ``name`` field is used to identify the table to update. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}  This corresponds to the ``table`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to update.  For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If not set, defaults to all of the fields that are allowed to update.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.types.Table: Represents a table."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "table",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.UpdateTableRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "rename_table",
          "description": "Renames an existing table specified by the table ID.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_rename_table():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.RenameTableRequest(\n            name=\"name_value\",\n            new_name=\"new_name_value\",\n        )\n\n        # Make the request\n        response = await client.rename_table(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optiona",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The table's ``name`` field is used to identify the table to rename. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "new_name": {
                "type": "str",
                "description": "Required. The new ``name`` for the specified table, must be in the same database. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}  This corresponds to the ``new_name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.types.Table: Represents a table."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "new_name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.RenameTableRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_table",
          "description": "Gets the table specified by the resource name.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_get_table():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.GetTableRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_table(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.bigquery_biglake_v1.types.GetTabl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the table to retrieve. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.types.Table: Represents a table."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.GetTableRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_tables",
          "description": "List all tables in a specified database.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import bigquery_biglake_v1\n\n    async def sample_list_tables():\n        # Create a client\n        client = bigquery_biglake_v1.MetastoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = bigquery_biglake_v1.ListTablesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_tables(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Unio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of tables. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.bigquery_biglake_v1.services.metastore_service.pagers.ListTablesAsyncPager: Response message for the ListTables method. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.ListTablesRequest"
          ]
        }
      }
    ]
  }
}