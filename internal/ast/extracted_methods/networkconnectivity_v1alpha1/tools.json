{
  "HubService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_hubs",
          "description": "Lists Hubs in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1alpha1\n\n    async def sample_list_hubs():\n        # Create a client\n        client = networkconnectivity_v1alpha1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1alpha1.ListHubsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_hubs(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource's name. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1alpha1.services.hub_service.pagers.ListHubsAsyncPager: Response for [HubService.ListHubs][google.cloud.networkconnectivity.v1alpha1.HubService.ListHubs] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_hub",
          "description": "Gets details of a single Hub.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1alpha1\n\n    async def sample_get_hub():\n        # Create a client\n        client = networkconnectivity_v1alpha1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1alpha1.GetHubRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_hub(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.networkconnectivity_v1alpha1.types.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the Hub resource to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1alpha1.types.Hub: Network Connectivity Center is a hub-and-spoke abstraction for network connectivity management in Google Cloud. It reduces operational complexity through a simple, centralized connectivity management model. Following is the resource message of a hub."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_hub",
          "description": "Creates a new Hub in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1alpha1\n\n    async def sample_create_hub():\n        # Create a client\n        client = networkconnectivity_v1alpha1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1alpha1.CreateHubRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        operation = client.create_hub(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource's name of the Hub.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "hub": {
                "type": "google.cloud.networkconnectivity_v1alpha1.types.Hub",
                "description": "Required. Initial values for a new Hub.  This corresponds to the ``hub`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "hub_id": {
                "type": "str",
                "description": "Optional. Unique id for the Hub to create.  This corresponds to the ``hub_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.networkconnectivity_v1alpha1.types.Hub` Network Connectivity Center is a hub-and-spoke abstraction for network connectivity management in Google Cloud. It reduces operational complexity through a simple, centralized connectivity management model. Following is the resource message of a hub."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "hub",
              "hub_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_hub",
          "description": "Updates the parameters of a single Hub.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1alpha1\n\n    async def sample_update_hub():\n        # Create a client\n        client = networkconnectivity_v1alpha1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1alpha1.UpdateHubRequest(\n        )\n\n        # Make the request\n        operation = client.update_hub(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "hub": {
                "type": "google.cloud.networkconnectivity_v1alpha1.types.Hub",
                "description": "Required. The state that the Hub should be in after the update.  This corresponds to the ``hub`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Field mask is used to specify the fields to be overwritten in the Hub resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.networkconnectivity_v1alpha1.types.Hub` Network Connectivity Center is a hub-and-spoke abstraction for network connectivity management in Google Cloud. It reduces operational complexity through a simple, centralized connectivity management model. Following is the resource message of a hub."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "hub",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_hub",
          "description": "Deletes a single Hub.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1alpha1\n\n    async def sample_delete_hub():\n        # Create a client\n        client = networkconnectivity_v1alpha1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1alpha1.DeleteHubRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_hub(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        p",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the Hub to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_spokes",
          "description": "Lists Spokes in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1alpha1\n\n    async def sample_list_spokes():\n        # Create a client\n        client = networkconnectivity_v1alpha1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1alpha1.ListSpokesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_spokes(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent's resource name. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1alpha1.services.hub_service.pagers.ListSpokesAsyncPager: The response for [HubService.ListSpokes][google.cloud.networkconnectivity.v1alpha1.HubService.ListSpokes].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_spoke",
          "description": "Gets details of a single Spoke.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1alpha1\n\n    async def sample_get_spoke():\n        # Create a client\n        client = networkconnectivity_v1alpha1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1alpha1.GetSpokeRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_spoke(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.networkconnectivity_v1alpha",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of Spoke resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1alpha1.types.Spoke: A Spoke is an  abstraction of a network attachment being attached to a Hub. A Spoke can be underlying a VPN tunnel, a VLAN (interconnect) attachment, a Router appliance, etc."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_spoke",
          "description": "Creates a new Spoke in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1alpha1\n\n    async def sample_create_spoke():\n        # Create a client\n        client = networkconnectivity_v1alpha1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1alpha1.CreateSpokeRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        operation = client.create_spoke(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent's resource name of the Spoke.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "spoke": {
                "type": "google.cloud.networkconnectivity_v1alpha1.types.Spoke",
                "description": "Required. Initial values for a new Hub.  This corresponds to the ``spoke`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "spoke_id": {
                "type": "str",
                "description": "Optional. Unique id for the Spoke to create.  This corresponds to the ``spoke_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.networkconnectivity_v1alpha1.types.Spoke` A Spoke is an abstraction of a network attachment being attached to a Hub. A Spoke can be underlying a VPN tunnel, a VLAN (interconnect) attachment, a Router appliance, etc."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "spoke",
              "spoke_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_spoke",
          "description": "Updates the parameters of a single Spoke.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1alpha1\n\n    async def sample_update_spoke():\n        # Create a client\n        client = networkconnectivity_v1alpha1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1alpha1.UpdateSpokeRequest(\n        )\n\n        # Make the request\n        operation = client.update_spoke(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "spoke": {
                "type": "google.cloud.networkconnectivity_v1alpha1.types.Spoke",
                "description": "Required. The state that the Spoke should be in after the update.  This corresponds to the ``spoke`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Field mask is used to specify the fields to be overwritten in the Spoke resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.networkconnectivity_v1alpha1.types.Spoke` A Spoke is an abstraction of a network attachment being attached to a Hub. A Spoke can be underlying a VPN tunnel, a VLAN (interconnect) attachment, a Router appliance, etc."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "spoke",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_spoke",
          "description": "Deletes a single Spoke.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1alpha1\n\n    async def sample_delete_spoke():\n        # Create a client\n        client = networkconnectivity_v1alpha1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1alpha1.DeleteSpokeRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_spoke(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the Spoke to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  }
}