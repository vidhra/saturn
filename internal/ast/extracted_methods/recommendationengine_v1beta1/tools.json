{
  "CatalogService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_catalog_item",
          "description": "Creates a catalog item.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_create_catalog_item():\n        # Create a client\n        client = recommendationengine_v1beta1.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        catalog_item = recommendationengine_v1beta1.CatalogItem()\n        catalog_item.id = \"id_value\"\n        catalog_item.category_hierarchies.categories = ['categories_value1', 'categories_value2']\n        catalog_item.title = \"title_value\"\n\n        request = recommendationengine_v1beta1.CreateCatalogItemRequest",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent catalog resource name, such as ``projects/*/locations/global/catalogs/default_catalog``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "catalog_item": {
                "type": "google.cloud.recommendationengine_v1beta1.types.CatalogItem",
                "description": "Required. The catalog item to create. This corresponds to the ``catalog_item`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommendationengine_v1beta1.types.CatalogItem: CatalogItem captures all metadata information of items to be recommended."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "catalog_item",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "catalog_service.CreateCatalogItemRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_catalog_item",
          "description": "Gets a specific catalog item.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_get_catalog_item():\n        # Create a client\n        client = recommendationengine_v1beta1.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommendationengine_v1beta1.GetCatalogItemRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_catalog_item(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.recom",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of catalog item, such as ``projects/*/locations/global/catalogs/default_catalog/catalogitems/some_catalog_item_id``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommendationengine_v1beta1.types.CatalogItem: CatalogItem captures all metadata information of items to be recommended."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "catalog_service.GetCatalogItemRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_catalog_items",
          "description": "Gets a list of catalog items.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_list_catalog_items():\n        # Create a client\n        client = recommendationengine_v1beta1.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommendationengine_v1beta1.ListCatalogItemsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_catalog_items(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent catalog resource name, such as ``projects/*/locations/global/catalogs/default_catalog``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "filter": {
                "type": "str",
                "description": "Optional. A filter to apply on the list results.  This corresponds to the ``filter`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommendationengine_v1beta1.services.catalog_service.pagers.ListCatalogItemsAsyncPager: Response message for ListCatalogItems method. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "filter",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "catalog_service.ListCatalogItemsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_catalog_item",
          "description": "Updates a catalog item. Partial updating is\nsupported. Non-existing items will be created.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_update_catalog_item():\n        # Create a client\n        client = recommendationengine_v1beta1.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        catalog_item = recommendationengine_v1beta1.CatalogItem()\n        catalog_item.id = \"id_value\"\n        catalog_item.category_hierarchies.categories = ['categories_value1', 'categories_value2']\n        catalog_item.title = \"title_value\"\n\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of catalog item, such as ``projects/*/locations/global/catalogs/default_catalog/catalogItems/some_catalog_item_id``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "catalog_item": {
                "type": "google.cloud.recommendationengine_v1beta1.types.CatalogItem",
                "description": "Required. The catalog item to update/create. The 'catalog_item_id' field has to match that in the 'name'.  This corresponds to the ``catalog_item`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Indicates which fields in the provided 'item' to update. If not set, will by default update all fields.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommendationengine_v1beta1.types.CatalogItem: CatalogItem captures all metadata information of items to be recommended."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "catalog_item",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "catalog_service.UpdateCatalogItemRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_catalog_item",
          "description": "Deletes a catalog item.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_delete_catalog_item():\n        # Create a client\n        client = recommendationengine_v1beta1.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommendationengine_v1beta1.DeleteCatalogItemRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_catalog_item(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.recommendationengine_v1beta1.types.DeleteCatalogItemRequest, dict]])",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of catalog item, such as ``projects/*/locations/global/catalogs/default_catalog/catalogItems/some_catalog_item_id``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "catalog_service.DeleteCatalogItemRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_catalog_items",
          "description": "Bulk import of multiple catalog items. Request\nprocessing may be synchronous. No partial updating\nsupported. Non-existing items will be created.\n\nOperation.response is of type ImportResponse. Note that\nit is possible for a subset of the items to be\nsuccessfully updated.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_import_catalog_items():\n        # Create a client\n        client = recommendationengine_v1beta1.CatalogServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommendationengine_v1beta1.ImportCatalogItemsReq",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. ``projects/1234/locations/global/catalogs/default_catalog``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "request_id": {
                "type": "str",
                "description": "Optional. Unique identifier provided by client, within the ancestor dataset scope. Ensures idempotency and used for request deduplication. Server-generated if unspecified. Up to 128 characters long. This is returned as google.longrunning.Operation.name in the response.  This corresponds to the ``request_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "input_config": {
                "type": "google.cloud.recommendationengine_v1beta1.types.InputConfig",
                "description": "Required. The desired input location of the data.  This corresponds to the ``input_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "errors_config": {
                "type": "google.cloud.recommendationengine_v1beta1.types.ImportErrorsConfig",
                "description": "Optional. The desired location of errors incurred during the Import.  This corresponds to the ``errors_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.recommendationengine_v1beta1.types.ImportCatalogItemsResponse` Response of the ImportCatalogItemsRequest. If the long running operation is done, then this message is returned by the google.longrunning.Operations.response field if the operation was successful."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "request_id",
              "input_config",
              "errors_config",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "import_.ImportCatalogItemsRequest"
          ]
        }
      }
    ]
  },
  "PredictionApiKeyRegistry": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_prediction_api_key_registration",
          "description": "Register an API key for use with predict method.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_create_prediction_api_key_registration():\n        # Create a client\n        client = recommendationengine_v1beta1.PredictionApiKeyRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommendationengine_v1beta1.CreatePredictionApiKeyRegistrationRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_prediction_api_key_registration(request=request)\n\n        # ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource path. ``projects/*/locations/global/catalogs/default_catalog/eventStores/default_event_store``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "prediction_api_key_registration": {
                "type": "google.cloud.recommendationengine_v1beta1.types.PredictionApiKeyRegistration",
                "description": "Required. The prediction API key registration.  This corresponds to the ``prediction_api_key_registration`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommendationengine_v1beta1.types.PredictionApiKeyRegistration: Registered Api Key."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "prediction_api_key_registration",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "prediction_apikey_registry_service.CreatePredictionApiKeyRegistrationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_prediction_api_key_registrations",
          "description": "List the registered apiKeys for use with predict\nmethod.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_list_prediction_api_key_registrations():\n        # Create a client\n        client = recommendationengine_v1beta1.PredictionApiKeyRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommendationengine_v1beta1.ListPredictionApiKeyRegistrationsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_prediction_api_key_registrations(request=request)\n\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent placement resource name such as ``projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommendationengine_v1beta1.services.prediction_api_key_registry.pagers.ListPredictionApiKeyRegistrationsAsyncPager: Response message for the ListPredictionApiKeyRegistrations.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "prediction_apikey_registry_service.ListPredictionApiKeyRegistrationsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_prediction_api_key_registration",
          "description": "Unregister an apiKey from using for predict method.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_delete_prediction_api_key_registration():\n        # Create a client\n        client = recommendationengine_v1beta1.PredictionApiKeyRegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommendationengine_v1beta1.DeletePredictionApiKeyRegistrationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_prediction_api_key_registration(request=request)\n\nArgs:\n    request (Opt",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The API key to unregister including full resource path. ``projects/*/locations/global/catalogs/default_catalog/eventStores/default_event_store/predictionApiKeyRegistrations/<YOUR_API_KEY>``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "prediction_apikey_registry_service.DeletePredictionApiKeyRegistrationRequest"
          ]
        }
      }
    ]
  },
  "PredictionService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "predict",
          "description": "Makes a recommendation prediction. If using API Key based\nauthentication, the API Key must be registered using the\n[PredictionApiKeyRegistry][google.cloud.recommendationengine.v1beta1.PredictionApiKeyRegistry]\nservice. `Learn\nmore </recommendations-ai/docs/setting-up#register-key>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_predict():\n        # Create a client\n        client = recommendationengine_v1beta1.PredictionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        user_event = recommendationengine_v1beta1.UserEvent()\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of the format: ``{name=projects/*/locations/global/catalogs/default_catalog/eventStores/default_event_store/placements/*}`` The id of the recommendation engine placement. This id is used to identify the set of models that will be used to make the prediction.  We currently support three placements with the following IDs by default:  -  ``shopping_cart``: Predicts items frequently bought together with one or more catalog items in the same shopping session. Commonly displayed after ``add-to-cart`` events, on product detail pages, or on the shopping cart page.  -  ``home_page``: Predicts the next product that a user will most likely engage with or purchase based on the shopping or viewing history of the specified ``userId`` or ``visitorId``. For example - Recommendations for you.  -  ``product_detail``: Predicts the next product that a user will most likely engage with or purchase. The prediction is based on the shopping or viewing history of the specified ``userId`` or ``visitorId`` and its relevance to a specified ``CatalogItem``. Typically used on product detail pages. For example - More items like this.  -  ``recently_viewed_default``: Returns up to 75 items recently viewed by the specified ``userId`` or ``visitorId``, most recent ones first. Returns nothing if neither of them has viewed any items yet. For example - Recently viewed.  The full list of available placements can be seen at https://console.cloud.google.com/recommendation/datafeeds/default_catalog/dashboard  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "user_event": {
                "type": "google.cloud.recommendationengine_v1beta1.types.UserEvent",
                "description": "Required. Context about the user, what they are looking at and what action they took to trigger the predict request. Note that this user event detail won't be ingested to userEvent logs. Thus, a separate userEvent write request is required for event logging.  This corresponds to the ``user_event`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommendationengine_v1beta1.services.prediction_service.pagers.PredictAsyncPager: Response message for predict method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "user_event",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "prediction_service.PredictRequest"
          ]
        }
      }
    ]
  },
  "UserEventService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "write_user_event",
          "description": "Writes a single user event.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_write_user_event():\n        # Create a client\n        client = recommendationengine_v1beta1.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n        user_event = recommendationengine_v1beta1.UserEvent()\n        user_event.event_type = \"event_type_value\"\n        user_event.user_info.visitor_id = \"visitor_id_value\"\n\n        request = recommendationengine_v1beta1.WriteUserEventRequest(\n            parent=\"parent_value\",\n            user_event=user_event",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent eventStore resource name, such as ``projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "user_event": {
                "type": "google.cloud.recommendationengine_v1beta1.types.UserEvent",
                "description": "Required. User event to write. This corresponds to the ``user_event`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommendationengine_v1beta1.types.UserEvent: UserEvent captures all metadata information recommendation engine needs to know about how end users interact with customers' website."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "user_event",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "user_event_service.WriteUserEventRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "collect_user_event",
          "description": "Writes a single user event from the browser. This\nuses a GET request to due to browser restriction of\nPOST-ing to a 3rd party domain.\n\nThis method is used only by the Recommendations AI\nJavaScript pixel. Users should not call this method\ndirectly.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_collect_user_event():\n        # Create a client\n        client = recommendationengine_v1beta1.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommendationengine_v1beta1.CollectUserEventRequest(\n            parent=",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent eventStore name, such as ``projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "user_event": {
                "type": "str",
                "description": "Required. URL encoded UserEvent proto.  This corresponds to the ``user_event`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "uri": {
                "type": "str",
                "description": "Optional. The url including cgi-parameters but excluding the hash fragment. The URL must be truncated to 1.5K bytes to conservatively be under the 2K bytes. This is often more useful than the referer url, because many browsers only send the domain for 3rd party requests.  This corresponds to the ``uri`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "ets": {
                "type": "int",
                "description": "Optional. The event timestamp in milliseconds. This prevents browser caching of otherwise identical get requests. The name is abbreviated to reduce the payload bytes.  This corresponds to the ``ets`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api.httpbody_pb2.HttpBody: Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page.  This message can be used both in streaming and non-streaming API methods in the request as well as the response.  It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body.  Example:  message GetResourceRequest { // A unique request id. string request_id = 1;  // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2;  }  service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);  rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty);  }  Example with streaming methods:  service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody);  rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody);  }  Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "user_event",
              "uri",
              "ets",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "user_event_service.CollectUserEventRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_user_events",
          "description": "Gets a list of user events within a time range, with\npotential filtering.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_list_user_events():\n        # Create a client\n        client = recommendationengine_v1beta1.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommendationengine_v1beta1.ListUserEventsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_user_events(request=request)\n\n        # Handle the response\n        async for response in ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent eventStore resource name, such as ``projects/*/locations/*/catalogs/default_catalog/eventStores/default_event_store``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "filter": {
                "type": "str",
                "description": "Optional. Filtering expression to specify restrictions over returned events. This is a sequence of terms, where each term applies some kind of a restriction to the returned user events. Use this expression to restrict results to a specific time range, or filter events by eventType. eg: eventTime > \"2012-04-23T18:25:43.511Z\" eventsMissingCatalogItems eventTime<\"2012-04-23T18:25:43.511Z\" eventType=search  We expect only 3 types of fields:  ::  * eventTime: this can be specified a maximum of 2 times, once with a less than operator and once with a greater than operator. The eventTime restrict should result in one contiguous valid eventTime range.  * eventType: only 1 eventType restriction can be specified.  * eventsMissingCatalogItems: specififying this will restrict results to events for which catalog items were not found in the catalog. The default behavior is to return only those events for which catalog items were found.  Some examples of valid filters expressions:  -  Example 1: eventTime > \"2012-04-23T18:25:43.511Z\" eventTime < \"2012-04-23T18:30:43.511Z\" -  Example 2: eventTime > \"2012-04-23T18:25:43.511Z\" eventType = detail-page-view -  Example 3: eventsMissingCatalogItems eventType = search eventTime < \"2018-04-23T18:30:43.511Z\" -  Example 4: eventTime > \"2012-04-23T18:25:43.511Z\" -  Example 5: eventType = search -  Example 6: eventsMissingCatalogItems  This corresponds to the ``filter`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recommendationengine_v1beta1.services.user_event_service.pagers.ListUserEventsAsyncPager: Response message for ListUserEvents method. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "filter",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "user_event_service.ListUserEventsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "purge_user_events",
          "description": "Deletes permanently all user events specified by the\nfilter provided. Depending on the number of events\nspecified by the filter, this operation could take hours\nor days to complete. To test a filter, use the list\ncommand first.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_purge_user_events():\n        # Create a client\n        client = recommendationengine_v1beta1.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recommendationengine_v1beta1.PurgeUserEventsRequest(\n            parent=\"parent_value\",\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the event_store under which the events are created. The format is ``projects/${projectId}/locations/global/catalogs/${catalogId}/eventStores/${eventStoreId}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "filter": {
                "type": "str",
                "description": "Required. The filter string to specify the events to be deleted. Empty string filter is not allowed. This filter can also be used with ListUserEvents API to list events that will be deleted. The eligible fields for filtering are:  -  eventType - UserEvent.eventType field of type string. -  eventTime - in ISO 8601 \"zulu\" format. -  visitorId - field of type string. Specifying this will delete all events associated with a visitor. -  userId - field of type string. Specifying this will delete all events associated with a user. Example 1: Deleting all events in a time range. ``eventTime > \"2012-04-23T18:25:43.511Z\" eventTime < \"2012-04-23T18:30:43.511Z\"`` Example 2: Deleting specific eventType in time range. ``eventTime > \"2012-04-23T18:25:43.511Z\" eventType = \"detail-page-view\"`` Example 3: Deleting all events for a specific visitor ``visitorId = visitor1024`` The filtering fields are assumed to have an implicit AND.  This corresponds to the ``filter`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "force": {
                "type": "bool",
                "description": "Optional. The default value is false. Override this flag to true to actually perform the purge. If the field is not set to true, a sampling of events to be deleted will be returned.  This corresponds to the ``force`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.recommendationengine_v1beta1.types.PurgeUserEventsResponse` Response of the PurgeUserEventsRequest. If the long running operation is successfully done, then this message is returned by the google.longrunning.Operations.response field."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "filter",
              "force",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "user_event_service.PurgeUserEventsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_user_events",
          "description": "Bulk import of User events. Request processing might\nbe synchronous. Events that already exist are skipped.\nUse this method for backfilling historical user events.\n\nOperation.response is of type ImportResponse. Note that\nit is possible for a subset of the items to be\nsuccessfully inserted. Operation.metadata is of type\nImportMetadata.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recommendationengine_v1beta1\n\n    async def sample_import_user_events():\n        # Create a client\n        client = recommendationengine_v1beta1.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. ``projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "request_id": {
                "type": "str",
                "description": "Optional. Unique identifier provided by client, within the ancestor dataset scope. Ensures idempotency for expensive long running operations. Server-generated if unspecified. Up to 128 characters long. This is returned as google.longrunning.Operation.name in the response. Note that this field must not be set if the desired input config is catalog_inline_source.  This corresponds to the ``request_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "input_config": {
                "type": "google.cloud.recommendationengine_v1beta1.types.InputConfig",
                "description": "Required. The desired input location of the data.  This corresponds to the ``input_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "errors_config": {
                "type": "google.cloud.recommendationengine_v1beta1.types.ImportErrorsConfig",
                "description": "Optional. The desired location of errors incurred during the Import.  This corresponds to the ``errors_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.recommendationengine_v1beta1.types.ImportUserEventsResponse` Response of the ImportUserEventsRequest. If the long running operation was successful, then this message is returned by the google.longrunning.Operations.response field if the operation was successful."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "request_id",
              "input_config",
              "errors_config",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "import_.ImportUserEventsRequest"
          ]
        }
      }
    ]
  }
}