{
  "DataprocMetastore": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_services",
          "description": "Lists services in a project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_list_services():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.ListServicesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_services(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.clou",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The relative resource name of the location of metastore services to list, in the following form:  ``projects/{project_number}/locations/{location_id}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.metastore_v1.services.dataproc_metastore.pagers.ListServicesAsyncPager: Response message for [DataprocMetastore.ListServices][google.cloud.metastore.v1.DataprocMetastore.ListServices].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.ListServicesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_service",
          "description": "Gets the details of a single service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_get_service():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.GetServiceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_service(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.metastore_v1.types.GetServiceRequest, dict]]):\n        T",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The relative resource name of the metastore service to retrieve, in the following form:  ``projects/{project_number}/locations/{location_id}/services/{service_id}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.metastore_v1.types.Service: A managed metastore service that serves metadata queries."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.GetServiceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_service",
          "description": "Creates a metastore service in a project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_create_service():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.CreateServiceRequest(\n            parent=\"parent_value\",\n            service_id=\"service_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_service(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The relative resource name of the location in which to create a metastore service, in the following form:  ``projects/{project_number}/locations/{location_id}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "service": {
                "type": "google.cloud.metastore_v1.types.Service",
                "description": "Required. The Metastore service to create. The ``name`` field is ignored. The ID of the created metastore service must be provided in the request's ``service_id`` field.  This corresponds to the ``service`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "service_id": {
                "type": "str",
                "description": "Required. The ID of the metastore service, which is used as the final component of the metastore service's name.  This value must be between 2 and 63 characters long inclusive, begin with a letter, end with a letter or number, and consist of alpha-numeric ASCII characters or hyphens.  This corresponds to the ``service_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.metastore_v1.types.Service` A managed metastore service that serves metadata queries."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "service",
              "service_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.CreateServiceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_service",
          "description": "Updates the parameters of a single service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_update_service():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.UpdateServiceRequest(\n        )\n\n        # Make the request\n        operation = client.update_service(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Opt",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "service": {
                "type": "google.cloud.metastore_v1.types.Service",
                "description": "Required. The metastore service to update. The server only merges fields in the service if they are specified in ``update_mask``.  The metastore service's ``name`` field is used to identify the metastore service to be updated.  This corresponds to the ``service`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. A field mask used to specify the fields to be overwritten in the metastore service resource by the update. Fields specified in the ``update_mask`` are relative to the resource (not to the full request). A field is overwritten if it is in the mask.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.metastore_v1.types.Service` A managed metastore service that serves metadata queries."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "service",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.UpdateServiceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_service",
          "description": "Deletes a single service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_delete_service():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.DeleteServiceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_service(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The relative resource name of the metastore service to delete, in the following form:  ``projects/{project_number}/locations/{location_id}/services/{service_id}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.DeleteServiceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_metadata_imports",
          "description": "Lists imports in a service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_list_metadata_imports():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.ListMetadataImportsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_metadata_imports(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[go",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The relative resource name of the service whose metadata imports to list, in the following form:  ``projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.metastore_v1.services.dataproc_metastore.pagers.ListMetadataImportsAsyncPager: Response message for [DataprocMetastore.ListMetadataImports][google.cloud.metastore.v1.DataprocMetastore.ListMetadataImports].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.ListMetadataImportsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_metadata_import",
          "description": "Gets details of a single import.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_get_metadata_import():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.GetMetadataImportRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_metadata_import(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.metastore_v1.types.GetMetadataImportRe",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The relative resource name of the metadata import to retrieve, in the following form:  ``projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{import_id}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.metastore_v1.types.MetadataImport: A metastore resource that imports metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.GetMetadataImportRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_metadata_import",
          "description": "Creates a new MetadataImport in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_create_metadata_import():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.CreateMetadataImportRequest(\n            parent=\"parent_value\",\n            metadata_import_id=\"metadata_import_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_metadata_import(request=request)\n\n        print(\"Waiting for operation to comp",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The relative resource name of the service in which to create a metastore import, in the following form:  ``projects/{project_number}/locations/{location_id}/services/{service_id}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "metadata_import": {
                "type": "google.cloud.metastore_v1.types.MetadataImport",
                "description": "Required. The metadata import to create. The ``name`` field is ignored. The ID of the created metadata import must be provided in the request's ``metadata_import_id`` field.  This corresponds to the ``metadata_import`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "metadata_import_id": {
                "type": "str",
                "description": "Required. The ID of the metadata import, which is used as the final component of the metadata import's name.  This value must be between 1 and 64 characters long, begin with a letter, end with a letter or number, and consist of alpha-numeric ASCII characters or hyphens.  This corresponds to the ``metadata_import_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.metastore_v1.types.MetadataImport` A metastore resource that imports metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "metadata_import",
              "metadata_import_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.CreateMetadataImportRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_metadata_import",
          "description": "Updates a single import.\nOnly the description field of MetadataImport is\nsupported to be updated.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_update_metadata_import():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.UpdateMetadataImportRequest(\n        )\n\n        # Make the request\n        operation = client.update_metadata_import(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "metadata_import": {
                "type": "google.cloud.metastore_v1.types.MetadataImport",
                "description": "Required. The metadata import to update. The server only merges fields in the import if they are specified in ``update_mask``.  The metadata import's ``name`` field is used to identify the metastore import to be updated.  This corresponds to the ``metadata_import`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. A field mask used to specify the fields to be overwritten in the metadata import resource by the update. Fields specified in the ``update_mask`` are relative to the resource (not to the full request). A field is overwritten if it is in the mask.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.metastore_v1.types.MetadataImport` A metastore resource that imports metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "metadata_import",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.UpdateMetadataImportRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "export_metadata",
          "description": "Exports metadata from a service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_export_metadata():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.ExportMetadataRequest(\n            destination_gcs_folder=\"destination_gcs_folder_value\",\n            service=\"service_value\",\n        )\n\n        # Make the request\n        operation = client.export_metadata(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await op",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.ExportMetadataRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "restore_service",
          "description": "Restores a service from a backup.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_restore_service():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.RestoreServiceRequest(\n            service=\"service_value\",\n            backup=\"backup_value\",\n        )\n\n        # Make the request\n        operation = client.restore_service(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Ha",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "service": {
                "type": "str",
                "description": "Required. The relative resource name of the metastore service to run restore, in the following form:  ``projects/{project_id}/locations/{location_id}/services/{service_id}``.  This corresponds to the ``service`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "backup": {
                "type": "str",
                "description": "Required. The relative resource name of the metastore service backup to restore from, in the following form:  ``projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}``.  This corresponds to the ``backup`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.metastore_v1.types.Restore` The details of a metadata restore operation."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "service",
              "backup",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.RestoreServiceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_backups",
          "description": "Lists backups in a service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_list_backups():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.ListBackupsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_backups(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.metastore_v1.ty",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The relative resource name of the service whose backups to list, in the following form:  ``projects/{project_number}/locations/{location_id}/services/{service_id}/backups``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.metastore_v1.services.dataproc_metastore.pagers.ListBackupsAsyncPager: Response message for [DataprocMetastore.ListBackups][google.cloud.metastore.v1.DataprocMetastore.ListBackups].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.ListBackupsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_backup",
          "description": "Gets details of a single backup.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_get_backup():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.GetBackupRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_backup(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.metastore_v1.types.GetBackupRequest, dict]]):\n        The reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The relative resource name of the backup to retrieve, in the following form:  ``projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.metastore_v1.types.Backup: The details of a backup resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.GetBackupRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_backup",
          "description": "Creates a new backup in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_create_backup():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.CreateBackupRequest(\n            parent=\"parent_value\",\n            backup_id=\"backup_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_backup(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).resu",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The relative resource name of the service in which to create a backup of the following form:  ``projects/{project_number}/locations/{location_id}/services/{service_id}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "backup": {
                "type": "google.cloud.metastore_v1.types.Backup",
                "description": "Required. The backup to create. The ``name`` field is ignored. The ID of the created backup must be provided in the request's ``backup_id`` field.  This corresponds to the ``backup`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "backup_id": {
                "type": "str",
                "description": "Required. The ID of the backup, which is used as the final component of the backup's name.  This value must be between 1 and 64 characters long, begin with a letter, end with a letter or number, and consist of alpha-numeric ASCII characters or hyphens.  This corresponds to the ``backup_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.metastore_v1.types.Backup` The details of a backup resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "backup",
              "backup_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.CreateBackupRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_backup",
          "description": "Deletes a single backup.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_delete_backup():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.DeleteBackupRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_backup(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The relative resource name of the backup to delete, in the following form:  ``projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.DeleteBackupRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "query_metadata",
          "description": "Query DPMS metadata.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_query_metadata():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.QueryMetadataRequest(\n            service=\"service_value\",\n            query=\"query_value\",\n        )\n\n        # Make the request\n        operation = client.query_metadata(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.QueryMetadataRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "move_table_to_database",
          "description": "Move a table to another database.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_move_table_to_database():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.MoveTableToDatabaseRequest(\n            service=\"service_value\",\n            table_name=\"table_name_value\",\n            db_name=\"db_name_value\",\n            destination_db_name=\"destination_db_name_value\",\n        )\n\n        # Make the request\n        operation = client.move_table_to_database(request",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.MoveTableToDatabaseRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "alter_metadata_resource_location",
          "description": "Alter metadata resource location. The metadata\nresource can be a database, table, or partition. This\nfunctionality only updates the parent directory for the\nrespective metadata resource and does not transfer any\nexisting data to the new location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_alter_metadata_resource_location():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.AlterMetadataResourceLocationRequest(\n            service=\"service_value\",\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore.AlterMetadataResourceLocationRequest"
          ]
        }
      }
    ]
  },
  "DataprocMetastoreFederation": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_federations",
          "description": "Lists federations in a project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_list_federations():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreFederationAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.ListFederationsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_federations(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Opti",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The relative resource name of the location of metastore federations to list, in the following form: ``projects/{project_number}/locations/{location_id}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.metastore_v1.services.dataproc_metastore_federation.pagers.ListFederationsAsyncPager: Response message for ListFederations  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore_federation.ListFederationsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_federation",
          "description": "Gets the details of a single federation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_get_federation():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreFederationAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.GetFederationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_federation(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.metastore_v1.types.GetFederationRe",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The relative resource name of the metastore federation to retrieve, in the following form:  ``projects/{project_number}/locations/{location_id}/federations/{federation_id}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.metastore_v1.types.Federation: Represents a federation of multiple backend metastores."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore_federation.GetFederationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_federation",
          "description": "Creates a metastore federation in a project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_create_federation():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreFederationAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.CreateFederationRequest(\n            parent=\"parent_value\",\n            federation_id=\"federation_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_federation(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The relative resource name of the location in which to create a federation service, in the following form:  ``projects/{project_number}/locations/{location_id}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "federation": {
                "type": "google.cloud.metastore_v1.types.Federation",
                "description": "Required. The Metastore Federation to create. The ``name`` field is ignored. The ID of the created metastore federation must be provided in the request's ``federation_id`` field.  This corresponds to the ``federation`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "federation_id": {
                "type": "str",
                "description": "Required. The ID of the metastore federation, which is used as the final component of the metastore federation's name.  This value must be between 2 and 63 characters long inclusive, begin with a letter, end with a letter or number, and consist of alpha-numeric ASCII characters or hyphens.  This corresponds to the ``federation_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.metastore_v1.types.Federation` Represents a federation of multiple backend metastores."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "federation",
              "federation_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore_federation.CreateFederationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_federation",
          "description": "Updates the fields of a federation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_update_federation():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreFederationAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.UpdateFederationRequest(\n        )\n\n        # Make the request\n        operation = client.update_federation(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "federation": {
                "type": "google.cloud.metastore_v1.types.Federation",
                "description": "Required. The metastore federation to update. The server only merges fields in the service if they are specified in ``update_mask``.  The metastore federation's ``name`` field is used to identify the metastore service to be updated.  This corresponds to the ``federation`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. A field mask used to specify the fields to be overwritten in the metastore federation resource by the update. Fields specified in the ``update_mask`` are relative to the resource (not to the full request). A field is overwritten if it is in the mask.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.metastore_v1.types.Federation` Represents a federation of multiple backend metastores."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "federation",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore_federation.UpdateFederationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_federation",
          "description": "Deletes a single federation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import metastore_v1\n\n    async def sample_delete_federation():\n        # Create a client\n        client = metastore_v1.DataprocMetastoreFederationAsyncClient()\n\n        # Initialize request argument(s)\n        request = metastore_v1.DeleteFederationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_federation(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        prin",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The relative resource name of the metastore federation to delete, in the following form:  ``projects/{project_number}/locations/{location_id}/federations/{federation_id}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "metastore_federation.DeleteFederationRequest"
          ]
        }
      }
    ]
  }
}