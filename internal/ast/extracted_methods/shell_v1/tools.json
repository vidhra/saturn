{
  "CloudShellService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "get_environment",
          "description": "Gets an environment. Returns NOT_FOUND if the environment does\nnot exist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import shell_v1\n\n    async def sample_get_environment():\n        # Create a client\n        client = shell_v1.CloudShellServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = shell_v1.GetEnvironmentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_environment(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.shell_v1.types.GetEn",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the requested resource, for example ``users/me/environments/default`` or ``users/someone@example.com/environments/default``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.shell_v1.types.Environment: A Cloud Shell environment, which is defined as the combination of a Docker image specifying what is installed on the environment and a home directory containing the user's data that will remain across sessions. Each user has at least an environment with the ID \"default\"."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudshell.GetEnvironmentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "start_environment",
          "description": "Starts an existing environment, allowing clients to\nconnect to it. The returned operation will contain an\ninstance of StartEnvironmentMetadata in its metadata\nfield. Users can wait for the environment to start by\npolling this operation via GetOperation. Once the\nenvironment has finished starting and is ready to accept\nconnections, the operation will contain a\nStartEnvironmentResponse in its response field.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import shell_v1\n\n    async def sample_start_environment():\n        # Create a client\n        client = shell_v1.CloudShellServiceAsyncClient()\n\n        # ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudshell.StartEnvironmentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "authorize_environment",
          "description": "Sends OAuth credentials to a running environment on\nbehalf of a user. When this completes, the environment\nwill be authorized to run various Google Cloud command\nline tools without requiring the user to manually\nauthenticate.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import shell_v1\n\n    async def sample_authorize_environment():\n        # Create a client\n        client = shell_v1.CloudShellServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = shell_v1.AuthorizeEnvironmentRequest(\n        )\n\n        # Make the request\n        operation = client.authorize_environment(reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudshell.AuthorizeEnvironmentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "add_public_key",
          "description": "Adds a public SSH key to an environment, allowing clients with\nthe corresponding private key to connect to that environment via\nSSH. If a key with the same content already exists, this will\nerror with ALREADY_EXISTS.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import shell_v1\n\n    async def sample_add_public_key():\n        # Create a client\n        client = shell_v1.CloudShellServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = shell_v1.AddPublicKeyRequest(\n        )\n\n        # Make the request\n        operation = client.add_public_key(request=request)\n\n        print(\"Wait",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudshell.AddPublicKeyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "remove_public_key",
          "description": "Removes a public SSH key from an environment. Clients will no\nlonger be able to connect to the environment using the\ncorresponding private key. If a key with the same content is not\npresent, this will error with NOT_FOUND.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import shell_v1\n\n    async def sample_remove_public_key():\n        # Create a client\n        client = shell_v1.CloudShellServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = shell_v1.RemovePublicKeyRequest(\n        )\n\n        # Make the request\n        operation = client.remove_public_key(request=request)\n\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudshell.RemovePublicKeyRequest"
          ]
        }
      }
    ]
  }
}