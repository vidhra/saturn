{
  "CompletionService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "complete_query",
          "description": "Completes the specified user input with keyword\nsuggestions.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_complete_query():\n        # Create a client\n        client = discoveryengine_v1.CompletionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.CompleteQueryRequest(\n            data_store=\"data_store_value\",\n            query=\"query_value\",\n        )\n\n        # Make the request\n        response = await client.complete_query(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "completion_service.CompleteQueryRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_suggestion_deny_list_entries",
          "description": "Imports all\n[SuggestionDenyListEntry][google.cloud.discoveryengine.v1.SuggestionDenyListEntry]\nfor a DataStore.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_import_suggestion_deny_list_entries():\n        # Create a client\n        client = discoveryengine_v1.CompletionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        inline_source = discoveryengine_v1.InlineSource()\n        inline_source.entries.block_phrase = \"block_phrase_value\"\n        inline_source.entries.match_operator = \"CONTAINS\"\n\n        request = discoveryengine_v1.ImportSug",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "import_config.ImportSuggestionDenyListEntriesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "purge_suggestion_deny_list_entries",
          "description": "Permanently deletes all\n[SuggestionDenyListEntry][google.cloud.discoveryengine.v1.SuggestionDenyListEntry]\nfor a DataStore.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_purge_suggestion_deny_list_entries():\n        # Create a client\n        client = discoveryengine_v1.CompletionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.PurgeSuggestionDenyListEntriesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        operation = client.purge_suggestion_deny_list_entries(request",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "purge_config.PurgeSuggestionDenyListEntriesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_completion_suggestions",
          "description": "Imports\n[CompletionSuggestion][google.cloud.discoveryengine.v1.CompletionSuggestion]s\nfor a DataStore.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_import_completion_suggestions():\n        # Create a client\n        client = discoveryengine_v1.CompletionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        inline_source = discoveryengine_v1.InlineSource()\n        inline_source.suggestions.global_score = 0.126\n        inline_source.suggestions.suggestion = \"suggestion_value\"\n\n        request = discoveryengine_v1.ImportCompletionSuggestions",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "import_config.ImportCompletionSuggestionsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "purge_completion_suggestions",
          "description": "Permanently deletes all\n[CompletionSuggestion][google.cloud.discoveryengine.v1.CompletionSuggestion]s\nfor a DataStore.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_purge_completion_suggestions():\n        # Create a client\n        client = discoveryengine_v1.CompletionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.PurgeCompletionSuggestionsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        operation = client.purge_completion_suggestions(request=request)\n\n        pr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "purge_config.PurgeCompletionSuggestionsRequest"
          ]
        }
      }
    ]
  },
  "ControlService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_control",
          "description": "Creates a Control.\n\nBy default 1000 controls are allowed for a data store. A request\ncan be submitted to adjust this limit. If the\n[Control][google.cloud.discoveryengine.v1.Control] to create\nalready exists, an ALREADY_EXISTS error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_create_control():\n        # Create a client\n        client = discoveryengine_v1.ControlServiceAsyncClient()\n\n        # Initialize request argument(s)\n        control = discoveryengine_v1.Control()\n        control.boost_action.boost = 0.551\n        control.boost_action.f",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Full resource name of parent data store. Format: ``projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`` or ``projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "control": {
                "type": "google.cloud.discoveryengine_v1.types.Control",
                "description": "Required. The Control to create. This corresponds to the ``control`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "control_id": {
                "type": "str",
                "description": "Required. The ID to use for the Control, which will become the final component of the Control's resource name.  This value must be within 1-63 characters. Valid characters are /[a-z][0-9]-_/.  This corresponds to the ``control_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Control: Defines a conditioned behavior to employ during serving. Must be attached to a [ServingConfig][google.cloud.discoveryengine.v1.ServingConfig] to be considered at serving time. Permitted actions dependent on SolutionType."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "control",
              "control_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "control_service.CreateControlRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_control",
          "description": "Deletes a Control.\n\nIf the [Control][google.cloud.discoveryengine.v1.Control] to\ndelete does not exist, a NOT_FOUND error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_delete_control():\n        # Create a client\n        client = discoveryengine_v1.ControlServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.DeleteControlRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_control(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.d",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Control to delete. Format: ``projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "control_service.DeleteControlRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_control",
          "description": "Updates a Control.\n\n[Control][google.cloud.discoveryengine.v1.Control] action type\ncannot be changed. If the\n[Control][google.cloud.discoveryengine.v1.Control] to update\ndoes not exist, a NOT_FOUND error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_update_control():\n        # Create a client\n        client = discoveryengine_v1.ControlServiceAsyncClient()\n\n        # Initialize request argument(s)\n        control = discoveryengine_v1.Control()\n        control.boost_action.boost = 0.551\n        control.boost_action.filter = \"filter_value\"\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "control": {
                "type": "google.cloud.discoveryengine_v1.types.Control",
                "description": "Required. The Control to update. This corresponds to the ``control`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Indicates which fields in the provided [Control][google.cloud.discoveryengine.v1.Control] to update. The following are NOT supported:  -  [Control.name][google.cloud.discoveryengine.v1.Control.name] -  [Control.solution_type][google.cloud.discoveryengine.v1.Control.solution_type]  If not set or empty, all supported fields are updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Control: Defines a conditioned behavior to employ during serving. Must be attached to a [ServingConfig][google.cloud.discoveryengine.v1.ServingConfig] to be considered at serving time. Permitted actions dependent on SolutionType."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "control",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "control_service.UpdateControlRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_control",
          "description": "Gets a Control.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_get_control():\n        # Create a client\n        client = discoveryengine_v1.ControlServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.GetControlRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_control(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discoveryengine_v1.types.GetControlRequest, dict]]):\n        Th",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Control to get. Format: ``projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Control: Defines a conditioned behavior to employ during serving. Must be attached to a [ServingConfig][google.cloud.discoveryengine.v1.ServingConfig] to be considered at serving time. Permitted actions dependent on SolutionType."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "control_service.GetControlRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_controls",
          "description": "Lists all Controls by their parent\n[DataStore][google.cloud.discoveryengine.v1.DataStore].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_list_controls():\n        # Create a client\n        client = discoveryengine_v1.ControlServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.ListControlsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_controls(request=request)\n\n        # Handle the response\n        async for response in page_result:\n          ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The data store resource name. Format: ``projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`` or ``projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.services.control_service.pagers.ListControlsAsyncPager: Response for ListControls method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "control_service.ListControlsRequest"
          ]
        }
      }
    ]
  },
  "ConversationalSearchService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "converse_conversation",
          "description": "Converses a conversation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_converse_conversation():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.ConverseConversationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.converse_conversation(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discoverye",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Conversation to get. Format: ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}``. Use ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/-`` to activate auto session mode, which automatically creates a new conversation inside a ConverseConversation session.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "query": {
                "type": "google.cloud.discoveryengine_v1.types.TextInput",
                "description": "Required. Current user input. This corresponds to the ``query`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.ConverseConversationResponse: Response message for [ConversationalSearchService.ConverseConversation][google.cloud.discoveryengine.v1.ConversationalSearchService.ConverseConversation] method."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "query",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.ConverseConversationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_conversation",
          "description": "Creates a Conversation.\n\nIf the\n[Conversation][google.cloud.discoveryengine.v1.Conversation] to\ncreate already exists, an ALREADY_EXISTS error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_create_conversation():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.CreateConversationRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_conversation(re",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Full resource name of parent data store. Format: ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "conversation": {
                "type": "google.cloud.discoveryengine_v1.types.Conversation",
                "description": "Required. The conversation to create. This corresponds to the ``conversation`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Conversation: External conversation proto definition."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "conversation",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.CreateConversationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_conversation",
          "description": "Deletes a Conversation.\n\nIf the\n[Conversation][google.cloud.discoveryengine.v1.Conversation] to\ndelete does not exist, a NOT_FOUND error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_delete_conversation():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.DeleteConversationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_conversation(request=request)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Conversation to delete. Format: ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.DeleteConversationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_conversation",
          "description": "Updates a Conversation.\n\n[Conversation][google.cloud.discoveryengine.v1.Conversation]\naction type cannot be changed. If the\n[Conversation][google.cloud.discoveryengine.v1.Conversation] to\nupdate does not exist, a NOT_FOUND error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_update_conversation():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.UpdateConversationRequest(\n        )\n\n        # Make the request\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "conversation": {
                "type": "google.cloud.discoveryengine_v1.types.Conversation",
                "description": "Required. The Conversation to update. This corresponds to the ``conversation`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Indicates which fields in the provided [Conversation][google.cloud.discoveryengine.v1.Conversation] to update. The following are NOT supported:  -  [Conversation.name][google.cloud.discoveryengine.v1.Conversation.name]  If not set or empty, all supported fields are updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Conversation: External conversation proto definition."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "conversation",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.UpdateConversationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_conversation",
          "description": "Gets a Conversation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_get_conversation():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.GetConversationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_conversation(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discoveryengine_v1.types.GetCo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Conversation to get. Format: ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Conversation: External conversation proto definition."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.GetConversationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_conversations",
          "description": "Lists all Conversations by their parent\n[DataStore][google.cloud.discoveryengine.v1.DataStore].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_list_conversations():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.ListConversationsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_conversations(request=request)\n\n        # Handle the response\n        async for re",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The data store resource name. Format: ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.services.conversational_search_service.pagers.ListConversationsAsyncPager: Response for ListConversations method. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.ListConversationsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "answer_query",
          "description": "Answer query method.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_answer_query():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        query = discoveryengine_v1.Query()\n        query.text = \"text_value\"\n\n        request = discoveryengine_v1.AnswerQueryRequest(\n            serving_config=\"serving_config_value\",\n            query=query,\n        )\n\n        # Make the request\n        response = await client.answer_query(request=request)\n\n        # Handle the ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.AnswerQueryRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_answer",
          "description": "Gets a Answer.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_get_answer():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.GetAnswerRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_answer(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discoveryengine_v1.types.GetAnswerRequest, dict]]):\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Answer to get. Format: ``projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}/sessions/{session_id}/answers/{answer_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Answer: Defines an answer."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.GetAnswerRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_session",
          "description": "Creates a Session.\n\nIf the [Session][google.cloud.discoveryengine.v1.Session] to\ncreate already exists, an ALREADY_EXISTS error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_create_session():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.CreateSessionRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_session(request=request)\n\n        # Hand",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Full resource name of parent data store. Format: ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "session": {
                "type": "google.cloud.discoveryengine_v1.types.Session",
                "description": "Required. The session to create. This corresponds to the ``session`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Session: External session proto definition."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "session",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.CreateSessionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_session",
          "description": "Deletes a Session.\n\nIf the [Session][google.cloud.discoveryengine.v1.Session] to\ndelete does not exist, a NOT_FOUND error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_delete_session():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.DeleteSessionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_session(request=request)\n\nArgs:\n    request (Optional[Union[g",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Session to delete. Format: ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.DeleteSessionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_session",
          "description": "Updates a Session.\n\n[Session][google.cloud.discoveryengine.v1.Session] action type\ncannot be changed. If the\n[Session][google.cloud.discoveryengine.v1.Session] to update\ndoes not exist, a NOT_FOUND error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_update_session():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.UpdateSessionRequest(\n        )\n\n        # Make the request\n        response = await client.update",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "session": {
                "type": "google.cloud.discoveryengine_v1.types.Session",
                "description": "Required. The Session to update. This corresponds to the ``session`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Indicates which fields in the provided [Session][google.cloud.discoveryengine.v1.Session] to update. The following are NOT supported:  -  [Session.name][google.cloud.discoveryengine.v1.Session.name]  If not set or empty, all supported fields are updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Session: External session proto definition."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "session",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.UpdateSessionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_session",
          "description": "Gets a Session.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_get_session():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.GetSessionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_session(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discoveryengine_v1.types.GetSessionRequest, dict]]",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Session to get. Format: ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Session: External session proto definition."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.GetSessionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_sessions",
          "description": "Lists all Sessions by their parent\n[DataStore][google.cloud.discoveryengine.v1.DataStore].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_list_sessions():\n        # Create a client\n        client = discoveryengine_v1.ConversationalSearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.ListSessionsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_sessions(request=request)\n\n        # Handle the response\n        async for response in page_resul",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The data store resource name. Format: ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.services.conversational_search_service.pagers.ListSessionsAsyncPager: Response for ListSessions method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "conversational_search_service.ListSessionsRequest"
          ]
        }
      }
    ]
  },
  "DataStoreService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_data_store",
          "description": "Creates a\n[DataStore][google.cloud.discoveryengine.v1.DataStore].\n\nDataStore is for storing\n[Documents][google.cloud.discoveryengine.v1.Document]. To serve\nthese documents for Search, or Recommendation use case, an\n[Engine][google.cloud.discoveryengine.v1.Engine] needs to be\ncreated separately.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_create_data_store():\n        # Create a client\n        client = discoveryengine_v1.DataStoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        data_store = discoveryengine_v1.DataStore()\n        data",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource name, such as ``projects/{project}/locations/{location}/collections/{collection}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "data_store": {
                "type": "google.cloud.discoveryengine_v1.types.DataStore",
                "description": "Required. The [DataStore][google.cloud.discoveryengine.v1.DataStore] to create.  This corresponds to the ``data_store`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "data_store_id": {
                "type": "str",
                "description": "Required. The ID to use for the [DataStore][google.cloud.discoveryengine.v1.DataStore], which will become the final component of the [DataStore][google.cloud.discoveryengine.v1.DataStore]'s resource name.  This field must conform to `RFC-1034 <https://tools.ietf.org/html/rfc1034>`__ standard with a length limit of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.  This corresponds to the ``data_store_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.discoveryengine_v1.types.DataStore` DataStore captures global settings and configs at the DataStore level."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "data_store",
              "data_store_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "data_store_service.CreateDataStoreRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_data_store",
          "description": "Gets a [DataStore][google.cloud.discoveryengine.v1.DataStore].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_get_data_store():\n        # Create a client\n        client = discoveryengine_v1.DataStoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.GetDataStoreRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_data_store(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discov",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of [DataStore][google.cloud.discoveryengine.v1.DataStore], such as ``projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}``.  If the caller does not have permission to access the [DataStore][google.cloud.discoveryengine.v1.DataStore], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the requested [DataStore][google.cloud.discoveryengine.v1.DataStore] does not exist, a NOT_FOUND error is returned.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.DataStore: DataStore captures global settings and configs at the DataStore level."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "data_store_service.GetDataStoreRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_data_stores",
          "description": "Lists all the\n[DataStore][google.cloud.discoveryengine.v1.DataStore]s\nassociated with the project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_list_data_stores():\n        # Create a client\n        client = discoveryengine_v1.DataStoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.ListDataStoresRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_data_stores(request=request)\n\n        # Handle the response\n        async for response in page_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent branch resource name, such as ``projects/{project}/locations/{location}/collections/{collection_id}``.  If the caller does not have permission to list [DataStore][google.cloud.discoveryengine.v1.DataStore]s under this location, regardless of whether or not this data store exists, a PERMISSION_DENIED error is returned.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.services.data_store_service.pagers.ListDataStoresAsyncPager: Response message for [DataStoreService.ListDataStores][google.cloud.discoveryengine.v1.DataStoreService.ListDataStores] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "data_store_service.ListDataStoresRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_data_store",
          "description": "Deletes a\n[DataStore][google.cloud.discoveryengine.v1.DataStore].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_delete_data_store():\n        # Create a client\n        client = discoveryengine_v1.DataStoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.DeleteDataStoreRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_data_store(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of [DataStore][google.cloud.discoveryengine.v1.DataStore], such as ``projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}``.  If the caller does not have permission to delete the [DataStore][google.cloud.discoveryengine.v1.DataStore], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the [DataStore][google.cloud.discoveryengine.v1.DataStore] to delete does not exist, a NOT_FOUND error is returned.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "data_store_service.DeleteDataStoreRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_data_store",
          "description": "Updates a [DataStore][google.cloud.discoveryengine.v1.DataStore]\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_update_data_store():\n        # Create a client\n        client = discoveryengine_v1.DataStoreServiceAsyncClient()\n\n        # Initialize request argument(s)\n        data_store = discoveryengine_v1.DataStore()\n        data_store.display_name = \"display_name_value\"\n\n        request = discoveryengine_v1.UpdateDataStoreRequest(\n            data_store=data_store,\n        )\n\n        # Make the request\n        response = await client.update_data_store(req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "data_store": {
                "type": "google.cloud.discoveryengine_v1.types.DataStore",
                "description": "Required. The [DataStore][google.cloud.discoveryengine.v1.DataStore] to update.  If the caller does not have permission to update the [DataStore][google.cloud.discoveryengine.v1.DataStore], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the [DataStore][google.cloud.discoveryengine.v1.DataStore] to update does not exist, a NOT_FOUND error is returned.  This corresponds to the ``data_store`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Indicates which fields in the provided [DataStore][google.cloud.discoveryengine.v1.DataStore] to update.  If an unsupported or unknown field is provided, an INVALID_ARGUMENT error is returned.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.DataStore: DataStore captures global settings and configs at the DataStore level."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "data_store",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "data_store_service.UpdateDataStoreRequest"
          ]
        }
      }
    ]
  },
  "DocumentService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "get_document",
          "description": "Gets a [Document][google.cloud.discoveryengine.v1.Document].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_get_document():\n        # Create a client\n        client = discoveryengine_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.GetDocumentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_document(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discoveryengin",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of [Document][google.cloud.discoveryengine.v1.Document], such as ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}``.  If the caller does not have permission to access the [Document][google.cloud.discoveryengine.v1.Document], regardless of whether or not it exists, a ``PERMISSION_DENIED`` error is returned.  If the requested [Document][google.cloud.discoveryengine.v1.Document] does not exist, a ``NOT_FOUND`` error is returned.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Document: Document captures all raw metadata information of items to be recommended or searched."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "document_service.GetDocumentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_documents",
          "description": "Gets a list of\n[Document][google.cloud.discoveryengine.v1.Document]s.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_list_documents():\n        # Create a client\n        client = discoveryengine_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.ListDocumentsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_documents(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent branch resource name, such as ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}``. Use ``default_branch`` as the branch ID, to list documents under the default branch.  If the caller does not have permission to list [Document][google.cloud.discoveryengine.v1.Document]s under this branch, regardless of whether or not this branch exists, a ``PERMISSION_DENIED`` error is returned.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.services.document_service.pagers.ListDocumentsAsyncPager: Response message for [DocumentService.ListDocuments][google.cloud.discoveryengine.v1.DocumentService.ListDocuments] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "document_service.ListDocumentsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_document",
          "description": "Creates a [Document][google.cloud.discoveryengine.v1.Document].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_create_document():\n        # Create a client\n        client = discoveryengine_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.CreateDocumentRequest(\n            parent=\"parent_value\",\n            document_id=\"document_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_document(request=request)\n\n        # Handle the response\n        print(response)\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource name, such as ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "document": {
                "type": "google.cloud.discoveryengine_v1.types.Document",
                "description": "Required. The [Document][google.cloud.discoveryengine.v1.Document] to create.  This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "document_id": {
                "type": "str",
                "description": "Required. The ID to use for the [Document][google.cloud.discoveryengine.v1.Document], which becomes the final component of the [Document.name][google.cloud.discoveryengine.v1.Document.name].  If the caller does not have permission to create the [Document][google.cloud.discoveryengine.v1.Document], regardless of whether or not it exists, a ``PERMISSION_DENIED`` error is returned.  This field must be unique among all [Document][google.cloud.discoveryengine.v1.Document]s with the same [parent][google.cloud.discoveryengine.v1.CreateDocumentRequest.parent]. Otherwise, an ``ALREADY_EXISTS`` error is returned.  This field must conform to `RFC-1034 <https://tools.ietf.org/html/rfc1034>`__ standard with a length limit of 63 characters. Otherwise, an ``INVALID_ARGUMENT`` error is returned.  This corresponds to the ``document_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Document: Document captures all raw metadata information of items to be recommended or searched."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "document",
              "document_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "document_service.CreateDocumentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_document",
          "description": "Updates a [Document][google.cloud.discoveryengine.v1.Document].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_update_document():\n        # Create a client\n        client = discoveryengine_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.UpdateDocumentRequest(\n        )\n\n        # Make the request\n        response = await client.update_document(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discoveryengine_v1.types.UpdateDo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "document": {
                "type": "google.cloud.discoveryengine_v1.types.Document",
                "description": "Required. The document to update/create.  If the caller does not have permission to update the [Document][google.cloud.discoveryengine.v1.Document], regardless of whether or not it exists, a ``PERMISSION_DENIED`` error is returned.  If the [Document][google.cloud.discoveryengine.v1.Document] to update does not exist and [allow_missing][google.cloud.discoveryengine.v1.UpdateDocumentRequest.allow_missing] is not set, a ``NOT_FOUND`` error is returned.  This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Indicates which fields in the provided imported 'document' to update. If not set, by default updates all fields.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Document: Document captures all raw metadata information of items to be recommended or searched."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "document",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "document_service.UpdateDocumentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_document",
          "description": "Deletes a [Document][google.cloud.discoveryengine.v1.Document].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_delete_document():\n        # Create a client\n        client = discoveryengine_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.DeleteDocumentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_document(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.discoveryengine_v1.types.DeleteDocumentRequest, dict]]):\n        The",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of [Document][google.cloud.discoveryengine.v1.Document], such as ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}``.  If the caller does not have permission to delete the [Document][google.cloud.discoveryengine.v1.Document], regardless of whether or not it exists, a ``PERMISSION_DENIED`` error is returned.  If the [Document][google.cloud.discoveryengine.v1.Document] to delete does not exist, a ``NOT_FOUND`` error is returned.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "document_service.DeleteDocumentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_documents",
          "description": "Bulk import of multiple\n[Document][google.cloud.discoveryengine.v1.Document]s. Request\nprocessing may be synchronous. Non-existing items are created.\n\nNote: It is possible for a subset of the\n[Document][google.cloud.discoveryengine.v1.Document]s to be\nsuccessfully updated.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_import_documents():\n        # Create a client\n        client = discoveryengine_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.ImportDocumentsRequest(\n            parent=\"parent_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "import_config.ImportDocumentsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "purge_documents",
          "description": "Permanently deletes all selected\n[Document][google.cloud.discoveryengine.v1.Document]s in a\nbranch.\n\nThis process is asynchronous. Depending on the number of\n[Document][google.cloud.discoveryengine.v1.Document]s to be\ndeleted, this operation can take hours to complete. Before the\ndelete operation completes, some\n[Document][google.cloud.discoveryengine.v1.Document]s might\nstill be returned by\n[DocumentService.GetDocument][google.cloud.discoveryengine.v1.DocumentService.GetDocument]\nor\n[DocumentService.ListDocuments][google.cloud.discoveryengine.v1.DocumentService.ListDocuments].\n\nTo get a list of the\n[Document][google.cloud.discoveryengine.v1.Document]s to be\ndeleted, set\n[PurgeDocumentsRequest.force][google.cloud.discoveryengine.v1.PurgeDocumentsRequest.force]\nto false.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initiali",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "purge_config.PurgeDocumentsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_get_documents_metadata",
          "description": "Gets index freshness metadata for\n[Document][google.cloud.discoveryengine.v1.Document]s. Supported\nfor website search only.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_batch_get_documents_metadata():\n        # Create a client\n        client = discoveryengine_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.BatchGetDocumentsMetadataRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.batch_get_documents_metadata(request=request)\n\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent branch resource name, such as ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.BatchGetDocumentsMetadataResponse: Response message for [DocumentService.BatchGetDocumentsMetadata][google.cloud.discoveryengine.v1.DocumentService.BatchGetDocumentsMetadata] method."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "document_service.BatchGetDocumentsMetadataRequest"
          ]
        }
      }
    ]
  },
  "EngineService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_engine",
          "description": "Creates a [Engine][google.cloud.discoveryengine.v1.Engine].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_create_engine():\n        # Create a client\n        client = discoveryengine_v1.EngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        engine = discoveryengine_v1.Engine()\n        engine.display_name = \"display_name_value\"\n        engine.solution_type = \"SOLUTION_TYPE_GENERATIVE_CHAT\"\n\n        request = discoveryengine_v1.CreateEngineRequest(\n            parent=\"parent_value\",\n            engine=engine,\n            engine_id=\"engi",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource name, such as ``projects/{project}/locations/{location}/collections/{collection}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "engine": {
                "type": "google.cloud.discoveryengine_v1.types.Engine",
                "description": "Required. The [Engine][google.cloud.discoveryengine.v1.Engine] to create.  This corresponds to the ``engine`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "engine_id": {
                "type": "str",
                "description": "Required. The ID to use for the [Engine][google.cloud.discoveryengine.v1.Engine], which will become the final component of the [Engine][google.cloud.discoveryengine.v1.Engine]'s resource name.  This field must conform to `RFC-1034 <https://tools.ietf.org/html/rfc1034>`__ standard with a length limit of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.  This corresponds to the ``engine_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.discoveryengine_v1.types.Engine` Metadata that describes the training and serving parameters of an [Engine][google.cloud.discoveryengine.v1.Engine]."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "engine",
              "engine_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "engine_service.CreateEngineRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_engine",
          "description": "Deletes a [Engine][google.cloud.discoveryengine.v1.Engine].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_delete_engine():\n        # Create a client\n        client = discoveryengine_v1.EngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.DeleteEngineRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_engine(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle th",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of [Engine][google.cloud.discoveryengine.v1.Engine], such as ``projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}``.  If the caller does not have permission to delete the [Engine][google.cloud.discoveryengine.v1.Engine], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the [Engine][google.cloud.discoveryengine.v1.Engine] to delete does not exist, a NOT_FOUND error is returned.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "engine_service.DeleteEngineRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_engine",
          "description": "Updates an [Engine][google.cloud.discoveryengine.v1.Engine]\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_update_engine():\n        # Create a client\n        client = discoveryengine_v1.EngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        engine = discoveryengine_v1.Engine()\n        engine.display_name = \"display_name_value\"\n        engine.solution_type = \"SOLUTION_TYPE_GENERATIVE_CHAT\"\n\n        request = discoveryengine_v1.UpdateEngineRequest(\n            engine=engine,\n        )\n\n        # Make the request\n        response = await",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "engine": {
                "type": "google.cloud.discoveryengine_v1.types.Engine",
                "description": "Required. The [Engine][google.cloud.discoveryengine.v1.Engine] to update.  If the caller does not have permission to update the [Engine][google.cloud.discoveryengine.v1.Engine], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the [Engine][google.cloud.discoveryengine.v1.Engine] to update does not exist, a NOT_FOUND error is returned.  This corresponds to the ``engine`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Indicates which fields in the provided [Engine][google.cloud.discoveryengine.v1.Engine] to update.  If an unsupported or unknown field is provided, an INVALID_ARGUMENT error is returned.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Engine: Metadata that describes the training and serving parameters of an [Engine][google.cloud.discoveryengine.v1.Engine]."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "engine",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "engine_service.UpdateEngineRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_engine",
          "description": "Gets a [Engine][google.cloud.discoveryengine.v1.Engine].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_get_engine():\n        # Create a client\n        client = discoveryengine_v1.EngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.GetEngineRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_engine(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discoveryengine_v1.types.G",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of [Engine][google.cloud.discoveryengine.v1.Engine], such as ``projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Engine: Metadata that describes the training and serving parameters of an [Engine][google.cloud.discoveryengine.v1.Engine]."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "engine_service.GetEngineRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_engines",
          "description": "Lists all the [Engine][google.cloud.discoveryengine.v1.Engine]s\nassociated with the project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_list_engines():\n        # Create a client\n        client = discoveryengine_v1.EngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.ListEnginesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_engines(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource name, such as ``projects/{project}/locations/{location}/collections/{collection_id}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.services.engine_service.pagers.ListEnginesAsyncPager: Response message for [EngineService.ListEngines][google.cloud.discoveryengine.v1.EngineService.ListEngines] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "engine_service.ListEnginesRequest"
          ]
        }
      }
    ]
  },
  "GroundedGenerationService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "stream_generate_grounded_content",
          "description": "Generates grounded content in a streaming fashion.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_stream_generate_grounded_content():\n        # Create a client\n        client = discoveryengine_v1.GroundedGenerationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.GenerateGroundedContentRequest(\n            location=\"location_value\",\n        )\n\n        # This method expects an iterator which contains\n        # 'discoveryengine_v1.GenerateGroundedContentRequest' objects\n        # Here we create a generator th",
          "parameters": {
            "type": "object",
            "properties": {
              "requests": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "generate_grounded_content",
          "description": "Generates grounded content.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_generate_grounded_content():\n        # Create a client\n        client = discoveryengine_v1.GroundedGenerationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.GenerateGroundedContentRequest(\n            location=\"location_value\",\n        )\n\n        # Make the request\n        response = await client.generate_grounded_content(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[goog",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grounded_generation_service.GenerateGroundedContentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "check_grounding",
          "description": "Performs a grounding check.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_check_grounding():\n        # Create a client\n        client = discoveryengine_v1.GroundedGenerationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.CheckGroundingRequest(\n            grounding_config=\"grounding_config_value\",\n        )\n\n        # Make the request\n        response = await client.check_grounding(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.disc",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grounded_generation_service.CheckGroundingRequest"
          ]
        }
      }
    ]
  },
  "ProjectService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "provision_project",
          "description": "Provisions the project resource. During the process, related\nsystems will get prepared and initialized.\n\nCaller must read the `Terms for data\nuse <https://cloud.google.com/retail/data-use-terms>`__, and\noptionally specify in request to provide consent to that service\nterms.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_provision_project():\n        # Create a client\n        client = discoveryengine_v1.ProjectServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.ProvisionProjectRequest(\n            name=\"name_va",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of a [Project][google.cloud.discoveryengine.v1.Project], such as ``projects/{project_id_or_number}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.discoveryengine_v1.types.Project` Metadata and configurations for a Google Cloud project in the service."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "project_service.ProvisionProjectRequest"
          ]
        }
      }
    ]
  },
  "RankService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "rank",
          "description": "Ranks a list of text records based on the given input\nquery.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_rank():\n        # Create a client\n        client = discoveryengine_v1.RankServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.RankRequest(\n            ranking_config=\"ranking_config_value\",\n        )\n\n        # Make the request\n        response = await client.rank(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discoveryengine_v1.ty",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "rank_service.RankRequest"
          ]
        }
      }
    ]
  },
  "RecommendationService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "recommend",
          "description": "Makes a recommendation, which requires a contextual\nuser event.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_recommend():\n        # Create a client\n        client = discoveryengine_v1.RecommendationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        user_event = discoveryengine_v1.UserEvent()\n        user_event.event_type = \"event_type_value\"\n        user_event.user_pseudo_id = \"user_pseudo_id_value\"\n\n        request = discoveryengine_v1.RecommendRequest(\n            serving_config=\"serving_config_value\",\n            user_event=user_ev",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recommendation_service.RecommendRequest"
          ]
        }
      }
    ]
  },
  "SchemaService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "get_schema",
          "description": "Gets a [Schema][google.cloud.discoveryengine.v1.Schema].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_get_schema():\n        # Create a client\n        client = discoveryengine_v1.SchemaServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.GetSchemaRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_schema(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discoveryengine_v1.types.G",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The full resource name of the schema, in the format of ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.Schema: Defines the structure and layout of a type of document data."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "schema_service.GetSchemaRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_schemas",
          "description": "Gets a list of\n[Schema][google.cloud.discoveryengine.v1.Schema]s.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_list_schemas():\n        # Create a client\n        client = discoveryengine_v1.SchemaServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.ListSchemasRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_schemas(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent data store resource name, in the format of ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.services.schema_service.pagers.ListSchemasAsyncPager: Response message for [SchemaService.ListSchemas][google.cloud.discoveryengine.v1.SchemaService.ListSchemas] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "schema_service.ListSchemasRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_schema",
          "description": "Creates a [Schema][google.cloud.discoveryengine.v1.Schema].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_create_schema():\n        # Create a client\n        client = discoveryengine_v1.SchemaServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.CreateSchemaRequest(\n            parent=\"parent_value\",\n            schema_id=\"schema_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_schema(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (a",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent data store resource name, in the format of ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "schema": {
                "type": "google.cloud.discoveryengine_v1.types.Schema",
                "description": "Required. The [Schema][google.cloud.discoveryengine.v1.Schema] to create.  This corresponds to the ``schema`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "schema_id": {
                "type": "str",
                "description": "Required. The ID to use for the [Schema][google.cloud.discoveryengine.v1.Schema], which becomes the final component of the [Schema.name][google.cloud.discoveryengine.v1.Schema.name].  This field should conform to `RFC-1034 <https://tools.ietf.org/html/rfc1034>`__ standard with a length limit of 63 characters.  This corresponds to the ``schema_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.discoveryengine_v1.types.Schema` Defines the structure and layout of a type of document data."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "schema",
              "schema_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "schema_service.CreateSchemaRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_schema",
          "description": "Updates a [Schema][google.cloud.discoveryengine.v1.Schema].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_update_schema():\n        # Create a client\n        client = discoveryengine_v1.SchemaServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.UpdateSchemaRequest(\n        )\n\n        # Make the request\n        operation = client.update_schema(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(respon",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "schema_service.UpdateSchemaRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_schema",
          "description": "Deletes a [Schema][google.cloud.discoveryengine.v1.Schema].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_delete_schema():\n        # Create a client\n        client = discoveryengine_v1.SchemaServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.DeleteSchemaRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_schema(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle th",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The full resource name of the schema, in the format of ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "schema_service.DeleteSchemaRequest"
          ]
        }
      }
    ]
  },
  "SearchService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "search",
          "description": "Performs a search.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_search():\n        # Create a client\n        client = discoveryengine_v1.SearchServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.SearchRequest(\n            serving_config=\"serving_config_value\",\n        )\n\n        # Make the request\n        page_result = client.search(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discoveryen",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "search_service.SearchRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "search_lite",
          "description": "Performs a search. Similar to the\n[SearchService.Search][google.cloud.discoveryengine.v1.SearchService.Search]\nmethod, but a lite version that allows API key for\nauthentication, where OAuth and IAM checks are not required.\n\nOnly public website search is supported by this method. If data\nstores and engines not associated with public website search are\nspecified, a ``FAILED_PRECONDITION`` error is returned.\n\nThis method can be used for easy onboarding without having to\nimplement an authentication backend. However, it is strongly\nrecommended to use\n[SearchService.Search][google.cloud.discoveryengine.v1.SearchService.Search]\ninstead with required OAuth and IAM checks to provide better\ndata security.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "search_service.SearchRequest"
          ]
        }
      }
    ]
  },
  "SearchTuningService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "train_custom_model",
          "description": "Trains a custom model.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_train_custom_model():\n        # Create a client\n        client = discoveryengine_v1.SearchTuningServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.TrainCustomModelRequest(\n            data_store=\"data_store_value\",\n        )\n\n        # Make the request\n        operation = client.train_custom_model(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the res",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "search_tuning_service.TrainCustomModelRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_custom_models",
          "description": "Gets a list of all the custom models.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_list_custom_models():\n        # Create a client\n        client = discoveryengine_v1.SearchTuningServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.ListCustomModelsRequest(\n            data_store=\"data_store_value\",\n        )\n\n        # Make the request\n        response = await client.list_custom_models(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.disc",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "search_tuning_service.ListCustomModelsRequest"
          ]
        }
      }
    ]
  },
  "SiteSearchEngineService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "get_site_search_engine",
          "description": "Gets the\n[SiteSearchEngine][google.cloud.discoveryengine.v1.SiteSearchEngine].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_get_site_search_engine():\n        # Create a client\n        client = discoveryengine_v1.SiteSearchEngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.GetSiteSearchEngineRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_site_search_engine(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of [SiteSearchEngine][google.cloud.discoveryengine.v1.SiteSearchEngine], such as ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine``.  If the caller does not have permission to access the [SiteSearchEngine], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.SiteSearchEngine: SiteSearchEngine captures DataStore level site search persisting configurations. It is a singleton value per data store."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "site_search_engine_service.GetSiteSearchEngineRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_target_site",
          "description": "Creates a\n[TargetSite][google.cloud.discoveryengine.v1.TargetSite].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_create_target_site():\n        # Create a client\n        client = discoveryengine_v1.SiteSearchEngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        target_site = discoveryengine_v1.TargetSite()\n        target_site.provided_uri_pattern = \"provided_uri_pattern_value\"\n\n        request = discoveryengine_v1.CreateTargetSiteRequest(\n            parent=\"parent_value\",\n            target_site=target_site,\n        )\n\n        # Ma",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent resource name of [TargetSite][google.cloud.discoveryengine.v1.TargetSite], such as ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "target_site": {
                "type": "google.cloud.discoveryengine_v1.types.TargetSite",
                "description": "Required. The [TargetSite][google.cloud.discoveryengine.v1.TargetSite] to create.  This corresponds to the ``target_site`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.discoveryengine_v1.types.TargetSite` A target site for the SiteSearchEngine."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "target_site",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "site_search_engine_service.CreateTargetSiteRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_create_target_sites",
          "description": "Creates [TargetSite][google.cloud.discoveryengine.v1.TargetSite]\nin a batch.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_batch_create_target_sites():\n        # Create a client\n        client = discoveryengine_v1.SiteSearchEngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        requests = discoveryengine_v1.CreateTargetSiteRequest()\n        requests.parent = \"parent_value\"\n        requests.target_site.provided_uri_pattern = \"provided_uri_pattern_value\"\n\n        request = discoveryengine_v1.BatchCreateTargetSitesRequest(\n            p",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "site_search_engine_service.BatchCreateTargetSitesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_target_site",
          "description": "Gets a [TargetSite][google.cloud.discoveryengine.v1.TargetSite].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_get_target_site():\n        # Create a client\n        client = discoveryengine_v1.SiteSearchEngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.GetTargetSiteRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_target_site(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of [TargetSite][google.cloud.discoveryengine.v1.TargetSite], such as ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}``.  If the caller does not have permission to access the [TargetSite][google.cloud.discoveryengine.v1.TargetSite], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the requested [TargetSite][google.cloud.discoveryengine.v1.TargetSite] does not exist, a NOT_FOUND error is returned.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.types.TargetSite: A target site for the SiteSearchEngine."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "site_search_engine_service.GetTargetSiteRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_target_site",
          "description": "Updates a\n[TargetSite][google.cloud.discoveryengine.v1.TargetSite].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_update_target_site():\n        # Create a client\n        client = discoveryengine_v1.SiteSearchEngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        target_site = discoveryengine_v1.TargetSite()\n        target_site.provided_uri_pattern = \"provided_uri_pattern_value\"\n\n        request = discoveryengine_v1.UpdateTargetSiteRequest(\n            target_site=target_site,\n        )\n\n        # Make the request\n        operation = ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "target_site": {
                "type": "google.cloud.discoveryengine_v1.types.TargetSite",
                "description": "Required. The target site to update. If the caller does not have permission to update the [TargetSite][google.cloud.discoveryengine.v1.TargetSite], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the [TargetSite][google.cloud.discoveryengine.v1.TargetSite] to update does not exist, a NOT_FOUND error is returned.  This corresponds to the ``target_site`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.discoveryengine_v1.types.TargetSite` A target site for the SiteSearchEngine."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "target_site",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "site_search_engine_service.UpdateTargetSiteRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_target_site",
          "description": "Deletes a\n[TargetSite][google.cloud.discoveryengine.v1.TargetSite].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_delete_target_site():\n        # Create a client\n        client = discoveryengine_v1.SiteSearchEngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.DeleteTargetSiteRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_target_site(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operatio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Full resource name of [TargetSite][google.cloud.discoveryengine.v1.TargetSite], such as ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}``.  If the caller does not have permission to access the [TargetSite][google.cloud.discoveryengine.v1.TargetSite], regardless of whether or not it exists, a PERMISSION_DENIED error is returned.  If the requested [TargetSite][google.cloud.discoveryengine.v1.TargetSite] does not exist, a NOT_FOUND error is returned.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "site_search_engine_service.DeleteTargetSiteRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_target_sites",
          "description": "Gets a list of\n[TargetSite][google.cloud.discoveryengine.v1.TargetSite]s.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_list_target_sites():\n        # Create a client\n        client = discoveryengine_v1.SiteSearchEngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.ListTargetSitesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_target_sites(request=request)\n\n        # Handle the response\n        async for response in page_result:\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent site search engine resource name, such as ``projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine``.  If the caller does not have permission to list [TargetSite][google.cloud.discoveryengine.v1.TargetSite]s under this site search engine, regardless of whether or not this branch exists, a PERMISSION_DENIED error is returned.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.discoveryengine_v1.services.site_search_engine_service.pagers.ListTargetSitesAsyncPager: Response message for [SiteSearchEngineService.ListTargetSites][google.cloud.discoveryengine.v1.SiteSearchEngineService.ListTargetSites] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "site_search_engine_service.ListTargetSitesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "enable_advanced_site_search",
          "description": "Upgrade from basic site search to advanced site\nsearch.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_enable_advanced_site_search():\n        # Create a client\n        client = discoveryengine_v1.SiteSearchEngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.EnableAdvancedSiteSearchRequest(\n            site_search_engine=\"site_search_engine_value\",\n        )\n\n        # Make the request\n        operation = client.enable_advanced_site_search(request=request)\n\n        print(\"Waiting for operation to complet",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "site_search_engine_service.EnableAdvancedSiteSearchRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "disable_advanced_site_search",
          "description": "Downgrade from advanced site search to basic site\nsearch.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_disable_advanced_site_search():\n        # Create a client\n        client = discoveryengine_v1.SiteSearchEngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.DisableAdvancedSiteSearchRequest(\n            site_search_engine=\"site_search_engine_value\",\n        )\n\n        # Make the request\n        operation = client.disable_advanced_site_search(request=request)\n\n        print(\"Waiting for operation to co",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "site_search_engine_service.DisableAdvancedSiteSearchRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "recrawl_uris",
          "description": "Request on-demand recrawl for a list of URIs.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_recrawl_uris():\n        # Create a client\n        client = discoveryengine_v1.SiteSearchEngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.RecrawlUrisRequest(\n            site_search_engine=\"site_search_engine_value\",\n            uris=['uris_value1', 'uris_value2'],\n        )\n\n        # Make the request\n        operation = client.recrawl_uris(request=request)\n\n        print(\"Waiting for operation to complete...",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "site_search_engine_service.RecrawlUrisRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_verify_target_sites",
          "description": "Verify target sites' ownership and validity.\nThis API sends all the target sites under site search\nengine for verification.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_batch_verify_target_sites():\n        # Create a client\n        client = discoveryengine_v1.SiteSearchEngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.BatchVerifyTargetSitesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        operation = client.batch_verify_target_sites(request=request)\n\n        p",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "site_search_engine_service.BatchVerifyTargetSitesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "fetch_domain_verification_status",
          "description": "Returns list of target sites with its domain verification\nstatus. This method can only be called under data store with\nBASIC_SITE_SEARCH state at the moment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_fetch_domain_verification_status():\n        # Create a client\n        client = discoveryengine_v1.SiteSearchEngineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.FetchDomainVerificationStatusRequest(\n            site_search_engine=\"site_search_engine_value\",\n        )\n\n        # Make the request\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "site_search_engine_service.FetchDomainVerificationStatusRequest"
          ]
        }
      }
    ]
  },
  "UserEventService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "write_user_event",
          "description": "Writes a single user event.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_write_user_event():\n        # Create a client\n        client = discoveryengine_v1.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.WriteUserEventRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.write_user_event(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.discoveryengine_v1.types.WriteU",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "user_event_service.WriteUserEventRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "collect_user_event",
          "description": "Writes a single user event from the browser. This\nuses a GET request to due to browser restriction of\nPOST-ing to a third-party domain.\n\nThis method is used only by the Discovery Engine API\nJavaScript pixel and Google Tag Manager. Users should\nnot call this method directly.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_collect_user_event():\n        # Create a client\n        client = discoveryengine_v1.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.CollectUserEventRequest(\n            parent=\"pa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "user_event_service.CollectUserEventRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "purge_user_events",
          "description": "Deletes permanently all user events specified by the\nfilter provided. Depending on the number of events\nspecified by the filter, this operation could take hours\nor days to complete. To test a filter, use the list\ncommand first.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_purge_user_events():\n        # Create a client\n        client = discoveryengine_v1.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = discoveryengine_v1.PurgeUserEventsRequest(\n            parent=\"parent_value\",\n            filter=\"filter_value\",\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "purge_config.PurgeUserEventsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_user_events",
          "description": "Bulk import of user events. Request processing might\nbe synchronous. Events that already exist are skipped.\nUse this method for backfilling historical user events.\n\nOperation.response is of type ImportResponse. Note that\nit is possible for a subset of the items to be\nsuccessfully inserted. Operation.metadata is of type\nImportMetadata.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import discoveryengine_v1\n\n    async def sample_import_user_events():\n        # Create a client\n        client = discoveryengine_v1.UserEventServiceAsyncClient()\n\n        # Initialize request argument(s)\n        inline_source ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "import_config.ImportUserEventsRequest"
          ]
        }
      }
    ]
  }
}