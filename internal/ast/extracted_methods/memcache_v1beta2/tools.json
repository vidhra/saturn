{
  "CloudMemcache": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_instances",
          "description": "Lists Instances in a given location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import memcache_v1beta2\n\n    async def sample_list_instances():\n        # Create a client\n        client = memcache_v1beta2.CloudMemcacheAsyncClient()\n\n        # Initialize request argument(s)\n        request = memcache_v1beta2.ListInstancesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_instances(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[googl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the instance location using the form: ``projects/{project_id}/locations/{location_id}`` where ``location_id`` refers to a GCP region  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.memcache_v1beta2.services.cloud_memcache.pagers.ListInstancesAsyncPager: Response for [ListInstances][google.cloud.memcache.v1beta2.CloudMemcache.ListInstances].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloud_memcache.ListInstancesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_instance",
          "description": "Gets details of a single Instance.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import memcache_v1beta2\n\n    async def sample_get_instance():\n        # Create a client\n        client = memcache_v1beta2.CloudMemcacheAsyncClient()\n\n        # Initialize request argument(s)\n        request = memcache_v1beta2.GetInstanceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_instance(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.memcache_v1beta2.types.GetInstanceRequest, dict]",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Memcached instance resource name in the format: ``projects/{project_id}/locations/{location_id}/instances/{instance_id}`` where ``location_id`` refers to a GCP region  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.memcache_v1beta2.types.Instance: A Memorystore for Memcached instance"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloud_memcache.GetInstanceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_instance",
          "description": "Creates a new Instance in a given location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import memcache_v1beta2\n\n    async def sample_create_instance():\n        # Create a client\n        client = memcache_v1beta2.CloudMemcacheAsyncClient()\n\n        # Initialize request argument(s)\n        resource = memcache_v1beta2.Instance()\n        resource.name = \"name_value\"\n        resource.node_count = 1070\n        resource.node_config.cpu_count = 976\n        resource.node_config.memory_size_mb = 1505\n\n        request = memcache_v1beta2.CreateInstanceRequest(\n            parent=\"parent_value\",\n            inst",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the instance location using the form: ``projects/{project_id}/locations/{location_id}`` where ``location_id`` refers to a GCP region  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "instance_id": {
                "type": "str",
                "description": "Required. The logical name of the Memcached instance in the user project with the following restrictions:  -  Must contain only lowercase letters, numbers, and hyphens. -  Must start with a letter. -  Must be between 1-40 characters. -  Must end with a number or a letter. -  Must be unique within the user project / location.  If any of the above are not met, the API raises an invalid argument error.  This corresponds to the ``instance_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "resource": {
                "type": "google.cloud.memcache_v1beta2.types.Instance",
                "description": "Required. A Memcached [Instance] resource This corresponds to the ``resource`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.memcache_v1beta2.types.Instance` A Memorystore for Memcached instance"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "instance_id",
              "resource",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloud_memcache.CreateInstanceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_instance",
          "description": "Updates an existing Instance in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import memcache_v1beta2\n\n    async def sample_update_instance():\n        # Create a client\n        client = memcache_v1beta2.CloudMemcacheAsyncClient()\n\n        # Initialize request argument(s)\n        resource = memcache_v1beta2.Instance()\n        resource.name = \"name_value\"\n        resource.node_count = 1070\n        resource.node_config.cpu_count = 976\n        resource.node_config.memory_size_mb = 1505\n\n        request = memcache_v1beta2.UpdateInstanceRequest(\n            resource=resource,\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Mask of fields to update.  -  ``displayName``  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "resource": {
                "type": "google.cloud.memcache_v1beta2.types.Instance",
                "description": "Required. A Memcached [Instance] resource. Only fields specified in update_mask are updated.  This corresponds to the ``resource`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.memcache_v1beta2.types.Instance` A Memorystore for Memcached instance"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "update_mask",
              "resource",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloud_memcache.UpdateInstanceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_parameters",
          "description": "Updates the defined Memcached parameters for an existing\ninstance. This method only stages the parameters, it must be\nfollowed by ``ApplyParameters`` to apply the parameters to nodes\nof the Memcached instance.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import memcache_v1beta2\n\n    async def sample_update_parameters():\n        # Create a client\n        client = memcache_v1beta2.CloudMemcacheAsyncClient()\n\n        # Initialize request argument(s)\n        request = memcache_v1beta2.UpdateParametersRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.u",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the Memcached instance for which the parameters should be updated.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Mask of fields to update. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "parameters": {
                "type": "google.cloud.memcache_v1beta2.types.MemcacheParameters",
                "description": "The parameters to apply to the instance.  This corresponds to the ``parameters`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.memcache_v1beta2.types.Instance` A Memorystore for Memcached instance"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "update_mask",
              "parameters",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloud_memcache.UpdateParametersRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_instance",
          "description": "Deletes a single Instance.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import memcache_v1beta2\n\n    async def sample_delete_instance():\n        # Create a client\n        client = memcache_v1beta2.CloudMemcacheAsyncClient()\n\n        # Initialize request argument(s)\n        request = memcache_v1beta2.DeleteInstanceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_instance(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Memcached instance resource name in the format: ``projects/{project_id}/locations/{location_id}/instances/{instance_id}`` where ``location_id`` refers to a GCP region  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloud_memcache.DeleteInstanceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "apply_parameters",
          "description": "``ApplyParameters`` restarts the set of specified nodes in order\nto update them to the current set of parameters for the\nMemcached Instance.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import memcache_v1beta2\n\n    async def sample_apply_parameters():\n        # Create a client\n        client = memcache_v1beta2.CloudMemcacheAsyncClient()\n\n        # Initialize request argument(s)\n        request = memcache_v1beta2.ApplyParametersRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.apply_parameters(request=request)\n\n        print(\"Waiting for operation ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the Memcached instance for which parameter group updates should be applied.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "node_ids": {
                "type": "MutableSequence[str]",
                "description": "Nodes to which the instance-level parameter group is applied.  This corresponds to the ``node_ids`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "apply_all": {
                "type": "bool",
                "description": "Whether to apply instance-level parameter group to all nodes. If set to true, users are restricted from specifying individual nodes, and ``ApplyParameters`` updates all nodes within the instance.  This corresponds to the ``apply_all`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.memcache_v1beta2.types.Instance` A Memorystore for Memcached instance"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "node_ids",
              "apply_all",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloud_memcache.ApplyParametersRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "apply_software_update",
          "description": "Updates software on the selected nodes of the\nInstance.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import memcache_v1beta2\n\n    async def sample_apply_software_update():\n        # Create a client\n        client = memcache_v1beta2.CloudMemcacheAsyncClient()\n\n        # Initialize request argument(s)\n        request = memcache_v1beta2.ApplySoftwareUpdateRequest(\n            instance=\"instance_value\",\n        )\n\n        # Make the request\n        operation = client.apply_software_update(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "instance": {
                "type": "str",
                "description": "Required. Resource name of the Memcached instance for which software update should be applied.  This corresponds to the ``instance`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "node_ids": {
                "type": "MutableSequence[str]",
                "description": "Nodes to which we should apply the update to. Note all the selected nodes are updated in parallel.  This corresponds to the ``node_ids`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "apply_all": {
                "type": "bool",
                "description": "Whether to apply the update to all nodes. If set to true, will explicitly restrict users from specifying any nodes, and apply software update to all nodes (where applicable) within the instance.  This corresponds to the ``apply_all`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.memcache_v1beta2.types.Instance` A Memorystore for Memcached instance"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "instance",
              "node_ids",
              "apply_all",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloud_memcache.ApplySoftwareUpdateRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "reschedule_maintenance",
          "description": "Performs the apply phase of the RescheduleMaintenance\nverb.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import memcache_v1beta2\n\n    async def sample_reschedule_maintenance():\n        # Create a client\n        client = memcache_v1beta2.CloudMemcacheAsyncClient()\n\n        # Initialize request argument(s)\n        request = memcache_v1beta2.RescheduleMaintenanceRequest(\n            instance=\"instance_value\",\n            reschedule_type=\"SPECIFIC_TIME\",\n        )\n\n        # Make the request\n        operation = client.reschedule_maintenance(request=request)\n\n        print(\"Waiting for operation to complet",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "instance": {
                "type": "str",
                "description": "Required. Memcache instance resource name using the form: ``projects/{project_id}/locations/{location_id}/instances/{instance_id}`` where ``location_id`` refers to a GCP region.  This corresponds to the ``instance`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "reschedule_type": {
                "type": "google.cloud.memcache_v1beta2.types.RescheduleMaintenanceRequest.RescheduleType",
                "description": "Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as well.  This corresponds to the ``reschedule_type`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "schedule_time": {
                "type": "google.protobuf.timestamp_pb2.Timestamp",
                "description": "Timestamp when the maintenance shall be rescheduled to if reschedule_type=SPECIFIC_TIME, in RFC 3339 format, for example ``2012-11-15T16:19:00.094Z``.  This corresponds to the ``schedule_time`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.memcache_v1beta2.types.Instance` A Memorystore for Memcached instance"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "instance",
              "reschedule_type",
              "schedule_time",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloud_memcache.RescheduleMaintenanceRequest"
          ]
        }
      }
    ]
  }
}