{
  "AlertPolicyService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_alert_policies",
          "description": "Lists the existing alerting policies for the\nworkspace.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_alert_policies():\n        # Create a client\n        client = monitoring_v3.AlertPolicyServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListAlertPoliciesRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        page_result = client.list_alert_policies(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ whose alert policies are to be listed. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  Note that this field names the parent container in which the alerting policies to be listed are stored. To retrieve a single alerting policy by name, use the [GetAlertPolicy][google.monitoring.v3.AlertPolicyService.GetAlertPolicy] operation, instead.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.services.alert_policy_service.pagers.ListAlertPoliciesAsyncPager: The protocol for the ListAlertPolicies response.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.alert_policy_service.pagers.ListAlertPoliciesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_alert_policy",
          "description": "Gets a single alerting policy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_get_alert_policy():\n        # Create a client\n        client = monitoring_v3.AlertPolicyServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.GetAlertPolicyRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_alert_policy(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.types.GetAlertPolicyRequest, di",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The alerting policy to retrieve. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.AlertPolicy: A description of the conditions under which some aspect of your system is considered to be \"unhealthy\" and the ways to notify people or services about this state. For an overview of alert policies, see [Introduction to Alerting](\\ https://cloud.google.com/monitoring/alerts/)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.AlertPolicy"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_alert_policy",
          "description": "Creates a new alerting policy.\n\nDesign your application to single-thread API calls that\nmodify the state of alerting policies in a single\nproject. This includes calls to CreateAlertPolicy,\nDeleteAlertPolicy and UpdateAlertPolicy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_create_alert_policy():\n        # Create a client\n        client = monitoring_v3.AlertPolicyServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.CreateAlertPolicyRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ in which to create the alerting policy. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  Note that this field names the parent container in which the alerting policy will be written, not the name of the created policy. \\|name\\| must be a host project of a Metrics Scope, otherwise INVALID_ARGUMENT error will return. The alerting policy that is returned will have a name that contains a normalized representation of this name as a prefix but adds a suffix of the form ``/alertPolicies/[ALERT_POLICY_ID]``, identifying the policy in the container.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "alert_policy": {
                "type": "google.cloud.monitoring_v3.types.AlertPolicy",
                "description": "Required. The requested alerting policy. You should omit the ``name`` field in this policy. The name will be returned in the new policy, including a new ``[ALERT_POLICY_ID]`` value.  This corresponds to the ``alert_policy`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.AlertPolicy: A description of the conditions under which some aspect of your system is considered to be \"unhealthy\" and the ways to notify people or services about this state. For an overview of alert policies, see [Introduction to Alerting](\\ https://cloud.google.com/monitoring/alerts/)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "alert_policy",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.AlertPolicy"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_alert_policy",
          "description": "Deletes an alerting policy.\n\nDesign your application to single-thread API calls that\nmodify the state of alerting policies in a single\nproject. This includes calls to CreateAlertPolicy,\nDeleteAlertPolicy and UpdateAlertPolicy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_delete_alert_policy():\n        # Create a client\n        client = monitoring_v3.AlertPolicyServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.DeleteAlertPolicyRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        awai",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The alerting policy to delete. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID]  For more information, see [AlertPolicy][google.monitoring.v3.AlertPolicy].  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_alert_policy",
          "description": "Updates an alerting policy. You can either replace the entire\npolicy with a new one or replace only certain fields in the\ncurrent alerting policy by specifying the fields to be updated\nvia ``updateMask``. Returns the updated alerting policy.\n\nDesign your application to single-thread API calls that modify\nthe state of alerting policies in a single project. This\nincludes calls to CreateAlertPolicy, DeleteAlertPolicy and\nUpdateAlertPolicy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_update_alert_policy():\n        # Create a client\n        client = monitoring_v3",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. A list of alerting policy field names. If this field is not empty, each listed field in the existing alerting policy is set to the value of the corresponding field in the supplied policy (``alert_policy``), or to the field's default value if the field is not in the supplied alerting policy. Fields not listed retain their previous value.  Examples of valid field masks include ``display_name``, ``documentation``, ``documentation.content``, ``documentation.mime_type``, ``user_labels``, ``user_label.nameofkey``, ``enabled``, ``conditions``, ``combiner``, etc.  If this field is empty, then the supplied alerting policy replaces the existing policy. It is the same as deleting the existing policy and adding the supplied policy, except for the following:  -  The new policy will have the same ``[ALERT_POLICY_ID]`` as the former policy. This gives you continuity with the former policy in your notifications and incidents. -  Conditions in the new policy will keep their former ``[CONDITION_ID]`` if the supplied condition includes the ``name`` field with that ``[CONDITION_ID]``. If the supplied condition omits the ``name`` field, then a new ``[CONDITION_ID]`` is created.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "alert_policy": {
                "type": "google.cloud.monitoring_v3.types.AlertPolicy",
                "description": "Required. The updated alerting policy or the updated values for the fields listed in ``update_mask``. If ``update_mask`` is not empty, any fields in this policy that are not in ``update_mask`` are ignored.  This corresponds to the ``alert_policy`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.AlertPolicy: A description of the conditions under which some aspect of your system is considered to be \"unhealthy\" and the ways to notify people or services about this state. For an overview of alert policies, see [Introduction to Alerting](\\ https://cloud.google.com/monitoring/alerts/)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "update_mask",
              "alert_policy",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.AlertPolicy"
          ]
        }
      }
    ]
  },
  "GroupService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_groups",
          "description": "Lists the existing groups.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_groups():\n        # Create a client\n        client = monitoring_v3.GroupServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListGroupsRequest(\n            children_of_group=\"children_of_group_value\",\n            name=\"name_value\",\n        )\n\n        # Make the request\n        page_result = client.list_groups(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ whose groups are to be listed. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.services.group_service.pagers.ListGroupsAsyncPager: The ListGroups response.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.group_service.pagers.ListGroupsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_group",
          "description": "Gets a single group.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_get_group():\n        # Create a client\n        client = monitoring_v3.GroupServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.GetGroupRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_group(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.types.GetGroupRequest, dict]]):\n        The request object. The ``G",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The group to retrieve. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.Group: The description of a dynamic collection of monitored resources. Each group has a filter that is matched against monitored resources and their associated metadata. If a group's filter matches an available monitored resource, then that resource is a member of that group. Groups can contain any number of monitored resources, and each monitored resource can be a member of any number of groups.  Groups can be nested in parent-child hierarchies. The parentName field identifies an optional parent for each group. If a group has a parent, then the only monitored resources available to be matched by the group's filter are the resources contained in the parent group. In other words, a group contains the monitored resources that match its filter and the filters of all the group's ancestors. A group without a parent can contain any monitored resource.  For example, consider an infrastructure running a set of instances with two user-defined tags: \"environment\" and \"role\". A parent group has a filter, environment=\"production\". A child of that parent group has a filter, role=\"transcoder\". The parent group contains all instances in the production environment, regardless of their roles. The child group contains instances that have the transcoder role *and* are in the production environment.  The monitored resources contained in a group can change at any moment, depending on what resources exist and what filters are associated with the group and its ancestors."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.Group"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_group",
          "description": "Creates a new group.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_create_group():\n        # Create a client\n        client = monitoring_v3.GroupServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.CreateGroupRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.create_group(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.types.CreateGroupRequest, dict]]):\n        The request obj",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ in which to create the group. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "group": {
                "type": "google.cloud.monitoring_v3.types.Group",
                "description": "Required. A group definition. It is an error to define the ``name`` field because the system assigns the name.  This corresponds to the ``group`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.Group: The description of a dynamic collection of monitored resources. Each group has a filter that is matched against monitored resources and their associated metadata. If a group's filter matches an available monitored resource, then that resource is a member of that group. Groups can contain any number of monitored resources, and each monitored resource can be a member of any number of groups.  Groups can be nested in parent-child hierarchies. The parentName field identifies an optional parent for each group. If a group has a parent, then the only monitored resources available to be matched by the group's filter are the resources contained in the parent group. In other words, a group contains the monitored resources that match its filter and the filters of all the group's ancestors. A group without a parent can contain any monitored resource.  For example, consider an infrastructure running a set of instances with two user-defined tags: \"environment\" and \"role\". A parent group has a filter, environment=\"production\". A child of that parent group has a filter, role=\"transcoder\". The parent group contains all instances in the production environment, regardless of their roles. The child group contains instances that have the transcoder role *and* are in the production environment.  The monitored resources contained in a group can change at any moment, depending on what resources exist and what filters are associated with the group and its ancestors."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "group",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.Group"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_group",
          "description": "Updates an existing group. You can change any group attributes\nexcept ``name``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_update_group():\n        # Create a client\n        client = monitoring_v3.GroupServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.UpdateGroupRequest(\n        )\n\n        # Make the request\n        response = await client.update_group(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.types.UpdateGroupRequest, dict",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "group": {
                "type": "google.cloud.monitoring_v3.types.Group",
                "description": "Required. The new definition of the group. All fields of the existing group, excepting ``name``, are replaced with the corresponding fields of this group.  This corresponds to the ``group`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.Group: The description of a dynamic collection of monitored resources. Each group has a filter that is matched against monitored resources and their associated metadata. If a group's filter matches an available monitored resource, then that resource is a member of that group. Groups can contain any number of monitored resources, and each monitored resource can be a member of any number of groups.  Groups can be nested in parent-child hierarchies. The parentName field identifies an optional parent for each group. If a group has a parent, then the only monitored resources available to be matched by the group's filter are the resources contained in the parent group. In other words, a group contains the monitored resources that match its filter and the filters of all the group's ancestors. A group without a parent can contain any monitored resource.  For example, consider an infrastructure running a set of instances with two user-defined tags: \"environment\" and \"role\". A parent group has a filter, environment=\"production\". A child of that parent group has a filter, role=\"transcoder\". The parent group contains all instances in the production environment, regardless of their roles. The child group contains instances that have the transcoder role *and* are in the production environment.  The monitored resources contained in a group can change at any moment, depending on what resources exist and what filters are associated with the group and its ancestors."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "group",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.Group"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_group",
          "description": "Deletes an existing group.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_delete_group():\n        # Create a client\n        client = monitoring_v3.GroupServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.DeleteGroupRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_group(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.types.DeleteGroupRequest, dict]]):\n        The request object. The ``DeleteGroup`` request. The default behavior is to",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The group to delete. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_group_members",
          "description": "Lists the monitored resources that are members of a\ngroup.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_group_members():\n        # Create a client\n        client = monitoring_v3.GroupServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListGroupMembersRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        page_result = client.list_group_members(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (O",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The group whose members are listed. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.services.group_service.pagers.ListGroupMembersAsyncPager: The ListGroupMembers response.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.group_service.pagers.ListGroupMembersAsyncPager"
          ]
        }
      }
    ]
  },
  "MetricService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_monitored_resource_descriptors",
          "description": "Lists monitored resource descriptors that match a\nfilter.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_monitored_resource_descriptors():\n        # Create a client\n        client = monitoring_v3.MetricServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListMonitoredResourceDescriptorsRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        page_result = client.list_monitored_resource_descriptors(request=request)\n\n        # Handle the response\n        async for response in page_result:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ on which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.services.metric_service.pagers.ListMonitoredResourceDescriptorsAsyncPager: The ListMonitoredResourceDescriptors response.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.metric_service.pagers.ListMonitoredResourceDescriptorsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_monitored_resource_descriptor",
          "description": "Gets a single monitored resource descriptor.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_get_monitored_resource_descriptor():\n        # Create a client\n        client = monitoring_v3.MetricServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.GetMonitoredResourceDescriptorRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_monitored_resource_descriptor(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The monitored resource descriptor to get. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/monitoredResourceDescriptors/[RESOURCE_TYPE]  The ``[RESOURCE_TYPE]`` is a predefined type, such as ``cloudsql_database``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api.monitored_resource_pb2.MonitoredResourceDescriptor: An object that describes the schema of a [MonitoredResource][google.api.MonitoredResource] object using a type name and a set of labels. For example, the monitored resource descriptor for Google Compute Engine VM instances has a type of \"gce_instance\" and specifies the use of the labels \"instance_id\" and \"zone\" to identify particular VM instances.  Different APIs can support different monitored resource types. APIs generally provide a list method that returns the monitored resource descriptors used by the API."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api.monitored_resource_pb2.MonitoredResourceDescriptor"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_metric_descriptors",
          "description": "Lists metric descriptors that match a filter.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_metric_descriptors():\n        # Create a client\n        client = monitoring_v3.MetricServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListMetricDescriptorsRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        page_result = client.list_metric_descriptors(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ on which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.services.metric_service.pagers.ListMetricDescriptorsAsyncPager: The ListMetricDescriptors response.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.metric_service.pagers.ListMetricDescriptorsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_metric_descriptor",
          "description": "Gets a single metric descriptor.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_get_metric_descriptor():\n        # Create a client\n        client = monitoring_v3.MetricServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.GetMetricDescriptorRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_metric_descriptor(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.types.GetMetricDesc",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The metric descriptor on which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/metricDescriptors/[METRIC_ID]  An example value of ``[METRIC_ID]`` is ``\"compute.googleapis.com/instance/disk/read_bytes_count\"``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api.metric_pb2.MetricDescriptor: Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api.metric_pb2.MetricDescriptor"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_metric_descriptor",
          "description": "Creates a new metric descriptor. The creation is executed\nasynchronously. User-created metric descriptors define `custom\nmetrics <https://cloud.google.com/monitoring/custom-metrics>`__.\nThe metric descriptor is updated if it already exists, except\nthat metric labels are never removed.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_create_metric_descriptor():\n        # Create a client\n        client = monitoring_v3.MetricServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.CreateMetricDescriptorRequest(\n            name=",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ on which to execute the request. The format is: 4 projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "metric_descriptor": {
                "type": "google.api.metric_pb2.MetricDescriptor",
                "description": "Required. The new `custom metric <https://cloud.google.com/monitoring/custom-metrics>`__ descriptor.  This corresponds to the ``metric_descriptor`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api.metric_pb2.MetricDescriptor: Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "metric_descriptor",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api.metric_pb2.MetricDescriptor"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_metric_descriptor",
          "description": "Deletes a metric descriptor. Only user-created `custom\nmetrics <https://cloud.google.com/monitoring/custom-metrics>`__\ncan be deleted.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_delete_metric_descriptor():\n        # Create a client\n        client = monitoring_v3.MetricServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.DeleteMetricDescriptorRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_metric_descriptor(request=request)\n\nArgs:\n    request (Optional[Union[g",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The metric descriptor on which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/metricDescriptors/[METRIC_ID]  An example of ``[METRIC_ID]`` is: ``\"custom.googleapis.com/my_test_metric\"``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_time_series",
          "description": "Lists time series that match a filter.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_time_series():\n        # Create a client\n        client = monitoring_v3.MetricServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListTimeSeriesRequest(\n            name=\"name_value\",\n            filter=\"filter_value\",\n            view=\"HEADERS\",\n        )\n\n        # Make the request\n        page_result = client.list_time_series(request=request)\n\n        # Handle the response\n        async for response in page_result:\n           ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__, organization or folder on which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER] organizations/[ORGANIZATION_ID] folders/[FOLDER_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "filter": {
                "type": "str",
                "description": "Required. A `monitoring filter <https://cloud.google.com/monitoring/api/v3/filters>`__ that specifies which time series should be returned. The filter must specify a single metric type, and can additionally specify metric labels and other information. For example:  ::  metric.type = \"compute.googleapis.com/instance/cpu/usage_time\" AND metric.labels.instance_name = \"my-instance-name\"  This corresponds to the ``filter`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "interval": {
                "type": "google.cloud.monitoring_v3.types.TimeInterval",
                "description": "Required. The time interval for which results should be returned. Only time series that contain data points in the specified interval are included in the response.  This corresponds to the ``interval`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "view": {
                "type": "google.cloud.monitoring_v3.types.ListTimeSeriesRequest.TimeSeriesView",
                "description": "Required. Specifies which information is returned about the time series.  This corresponds to the ``view`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.services.metric_service.pagers.ListTimeSeriesAsyncPager: The ListTimeSeries response.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "filter",
              "interval",
              "view",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.metric_service.pagers.ListTimeSeriesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_time_series",
          "description": "Creates or adds data to one or more time series. The response is\nempty if all time series in the request were written. If any\ntime series could not be written, a corresponding failure\nmessage is included in the error response. This method does not\nsupport `resource locations constraint of an organization\npolicy <https://cloud.google.com/resource-manager/docs/organization-policy/defining-locations#setting_the_organization_policy>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_create_time_series():\n        # Create a client\n        client = monitoring_v3.Metr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ on which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "time_series": {
                "type": "MutableSequence[google.cloud.monitoring_v3.types.TimeSeries]",
                "description": "Required. The new data to be added to a list of time series. Adds at most one data point to each of several time series. The new data point must be more recent than any other point in its time series. Each ``TimeSeries`` value must fully specify a unique time series by supplying all label values for the metric and the monitored resource.  The maximum number of ``TimeSeries`` objects per ``Create`` request is 200.  This corresponds to the ``time_series`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "time_series",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_service_time_series",
          "description": "Creates or adds data to one or more service time series. A\nservice time series is a time series for a metric from a Google\nCloud service. The response is empty if all time series in the\nrequest were written. If any time series could not be written, a\ncorresponding failure message is included in the error response.\nThis endpoint rejects writes to user-defined metrics. This\nmethod is only for use by Google Cloud services. Use\n[projects.timeSeries.create][google.monitoring.v3.MetricService.CreateTimeSeries]\ninstead.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_c",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ on which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "time_series": {
                "type": "MutableSequence[google.cloud.monitoring_v3.types.TimeSeries]",
                "description": "Required. The new data to be added to a list of time series. Adds at most one data point to each of several time series. The new data point must be more recent than any other point in its time series. Each ``TimeSeries`` value must fully specify a unique time series by supplying all label values for the metric and the monitored resource.  The maximum number of ``TimeSeries`` objects per ``Create`` request is 200.  This corresponds to the ``time_series`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "time_series",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      }
    ]
  },
  "NotificationChannelService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_notification_channel_descriptors",
          "description": "Lists the descriptors for supported channel types.\nThe use of descriptors makes it possible for new channel\ntypes to be dynamically added.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_notification_channel_descriptors():\n        # Create a client\n        client = monitoring_v3.NotificationChannelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListNotificationChannelDescriptorsRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        page_result = client.list_notification_channel_de",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The REST resource name of the parent from which to retrieve the notification channel descriptors. The expected syntax is:  ::  projects/[PROJECT_ID_OR_NUMBER]  Note that this `names <https://cloud.google.com/monitoring/api/v3#project_name>`__ the parent container in which to look for the descriptors; to retrieve a single descriptor by name, use the [GetNotificationChannelDescriptor][google.monitoring.v3.NotificationChannelService.GetNotificationChannelDescriptor] operation, instead.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.services.notification_channel_service.pagers.ListNotificationChannelDescriptorsAsyncPager: The ListNotificationChannelDescriptors response.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.notification_channel_service.pagers.ListNotificationChannelDescriptorsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_notification_channel_descriptor",
          "description": "Gets a single channel descriptor. The descriptor\nindicates which fields are expected / permitted for a\nnotification channel of the given type.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_get_notification_channel_descriptor():\n        # Create a client\n        client = monitoring_v3.NotificationChannelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.GetNotificationChannelDescriptorRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_notification_channel_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The channel type for which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/notificationChannelDescriptors/[CHANNEL_TYPE]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.NotificationChannelDescriptor: A description of a notification channel. The descriptor includes the properties of the channel and the set of labels or fields that must be specified to configure channels of a given type."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.NotificationChannelDescriptor"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_notification_channels",
          "description": "Lists the notification channels that have been created for the\nproject. To list the types of notification channels that are\nsupported, use the ``ListNotificationChannelDescriptors``\nmethod.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_notification_channels():\n        # Create a client\n        client = monitoring_v3.NotificationChannelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListNotificationChannelsRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        page_result = clien",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ on which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This names the container in which to look for the notification channels; it does not name a specific channel. To query a specific channel by REST resource name, use the [``GetNotificationChannel``][google.monitoring.v3.NotificationChannelService.GetNotificationChannel] operation.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.services.notification_channel_service.pagers.ListNotificationChannelsAsyncPager: The ListNotificationChannels response.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.notification_channel_service.pagers.ListNotificationChannelsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_notification_channel",
          "description": "Gets a single notification channel. The channel\nincludes the relevant configuration details with which\nthe channel was created. However, the response may\ntruncate or omit passwords, API keys, or other private\nkey matter and thus the response may not be 100%\nidentical to the information that was supplied in the\ncall to the create method.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_get_notification_channel():\n        # Create a client\n        client = monitoring_v3.NotificationChannelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The channel for which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.NotificationChannel: A NotificationChannel is a medium through which an alert is delivered when a policy violation is detected. Examples of channels include email, SMS, and third-party messaging applications. Fields containing sensitive information like authentication tokens or contact info are only partially populated on retrieval."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.NotificationChannel"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_notification_channel",
          "description": "Creates a new notification channel, representing a\nsingle notification endpoint such as an email address,\nSMS number, or PagerDuty service.\n\nDesign your application to single-thread API calls that\nmodify the state of notification channels in a single\nproject. This includes calls to\nCreateNotificationChannel, DeleteNotificationChannel and\nUpdateNotificationChannel.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_create_notification_channel():\n        # Create a client\n        client = monitoring_v3.NotificationChannelServiceAsyncClient()\n\n        # Initialize req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ on which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This names the container into which the channel will be written, this does not name the newly created channel. The resulting channel's name will have a normalized version of this field as a prefix, but will add ``/notificationChannels/[CHANNEL_ID]`` to identify the channel.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "notification_channel": {
                "type": "google.cloud.monitoring_v3.types.NotificationChannel",
                "description": "Required. The definition of the ``NotificationChannel`` to create.  This corresponds to the ``notification_channel`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.NotificationChannel: A NotificationChannel is a medium through which an alert is delivered when a policy violation is detected. Examples of channels include email, SMS, and third-party messaging applications. Fields containing sensitive information like authentication tokens or contact info are only partially populated on retrieval."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "notification_channel",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.NotificationChannel"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_notification_channel",
          "description": "Updates a notification channel. Fields not specified\nin the field mask remain unchanged.\n\nDesign your application to single-thread API calls that\nmodify the state of notification channels in a single\nproject. This includes calls to\nCreateNotificationChannel, DeleteNotificationChannel and\nUpdateNotificationChannel.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_update_notification_channel():\n        # Create a client\n        client = monitoring_v3.NotificationChannelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.Up",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The fields to update. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "notification_channel": {
                "type": "google.cloud.monitoring_v3.types.NotificationChannel",
                "description": "Required. A description of the changes to be applied to the specified notification channel. The description must provide a definition for fields to be updated; the names of these fields should also be included in the ``update_mask``.  This corresponds to the ``notification_channel`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.NotificationChannel: A NotificationChannel is a medium through which an alert is delivered when a policy violation is detected. Examples of channels include email, SMS, and third-party messaging applications. Fields containing sensitive information like authentication tokens or contact info are only partially populated on retrieval."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "update_mask",
              "notification_channel",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.NotificationChannel"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_notification_channel",
          "description": "Deletes a notification channel.\n\nDesign your application to single-thread API calls that\nmodify the state of notification channels in a single\nproject. This includes calls to\nCreateNotificationChannel, DeleteNotificationChannel and\nUpdateNotificationChannel.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_delete_notification_channel():\n        # Create a client\n        client = monitoring_v3.NotificationChannelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.DeleteNotificationChannelRequest(\n            name=\"name_va",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The channel for which to execute the request. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "force": {
                "type": "bool",
                "description": "If true, the notification channel will be deleted regardless of its use in alert policies (the policies will be updated to remove the channel). If false, channels that are still referenced by an existing alerting policy will fail to be deleted in a delete operation.  This corresponds to the ``force`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "force",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "send_notification_channel_verification_code",
          "description": "Causes a verification code to be delivered to the channel. The\ncode can then be supplied in ``VerifyNotificationChannel`` to\nverify the channel.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_send_notification_channel_verification_code():\n        # Create a client\n        client = monitoring_v3.NotificationChannelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.SendNotificationChannelVerificationCodeRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.send_notification_c",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The notification channel to which to send a verification code.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_notification_channel_verification_code",
          "description": "Requests a verification code for an already verified\nchannel that can then be used in a call to\nVerifyNotificationChannel() on a different channel with\nan equivalent identity in the same or in a different\nproject. This makes it possible to copy a channel\nbetween projects without requiring manual reverification\nof the channel. If the channel is not in the verified\nstate, this method will fail (in other words, this may\nonly be used if the\nSendNotificationChannelVerificationCode and\nVerifyNotificationChannel paths have already been used\nto put the given channel into the verified state).\n\nThere is no guarantee that the verification codes\nreturned by this method will be of a similar structure\nor form as the ones that are delivered to the channel\nvia SendNotificationChannelVerificationCode; while\nVerifyNotificationChannel() will recognize both the\ncodes delivered via\nSendNotificationChannelVerificationCode() and returned\nfrom GetNotificationChannelVerificationCode(), it is\ntypically the case that the verification c",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The notification channel for which a verification code is to be generated and retrieved. This must name a channel that is already verified; if the specified channel is not verified, the request will fail.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.GetNotificationChannelVerificationCodeResponse: The GetNotificationChannelVerificationCode request."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.GetNotificationChannelVerificationCodeResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "verify_notification_channel",
          "description": "Verifies a ``NotificationChannel`` by proving receipt of the\ncode delivered to the channel as a result of calling\n``SendNotificationChannelVerificationCode``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_verify_notification_channel():\n        # Create a client\n        client = monitoring_v3.NotificationChannelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.VerifyNotificationChannelRequest(\n            name=\"name_value\",\n            code=\"code_value\",\n        )\n\n        # Make the request\n        response = await ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The notification channel to verify.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "code": {
                "type": "str",
                "description": "Required. The verification code that was delivered to the channel as a result of invoking the ``SendNotificationChannelVerificationCode`` API method or that was retrieved from a verified channel via ``GetNotificationChannelVerificationCode``. For example, one might have \"G-123456\" or \"TKNZGhhd2EyN3I1MnRnMjRv\" (in general, one is only guaranteed that the code is valid UTF-8; one should not make any assumptions regarding the structure or format of the code).  This corresponds to the ``code`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.NotificationChannel: A NotificationChannel is a medium through which an alert is delivered when a policy violation is detected. Examples of channels include email, SMS, and third-party messaging applications. Fields containing sensitive information like authentication tokens or contact info are only partially populated on retrieval."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "code",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.NotificationChannel"
          ]
        }
      }
    ]
  },
  "QueryService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "query_time_series",
          "description": "Queries time series using Monitoring Query Language.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_query_time_series():\n        # Create a client\n        client = monitoring_v3.QueryServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.QueryTimeSeriesRequest(\n            name=\"name_value\",\n            query=\"query_value\",\n        )\n\n        # Make the request\n        page_result = client.query_time_series(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(respons",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.query_service.pagers.QueryTimeSeriesAsyncPager"
          ]
        }
      }
    ]
  },
  "ServiceMonitoringService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_service",
          "description": "Create a ``Service``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_create_service():\n        # Create a client\n        client = monitoring_v3.ServiceMonitoringServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.CreateServiceRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_service(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.types.CreateServiceRequest, dict]])",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Resource `name <https://cloud.google.com/monitoring/api/v3#project_name>`__ of the parent Metrics Scope. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "service": {
                "type": "google.cloud.monitoring_v3.types.Service",
                "description": "Required. The ``Service`` to create. This corresponds to the ``service`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.Service: A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern ([Wikipedia](https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "service",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.Service"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_service",
          "description": "Get the named ``Service``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_get_service():\n        # Create a client\n        client = monitoring_v3.ServiceMonitoringServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.GetServiceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_service(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.types.GetServiceRequest, dict]]):\n        T",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the ``Service``. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.Service: A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern ([Wikipedia](https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.Service"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_services",
          "description": "List ``Service``\\ s for this Metrics Scope.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_services():\n        # Create a client\n        client = monitoring_v3.ServiceMonitoringServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListServicesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_services(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Resource name of the parent containing the listed services, either a `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ or a Monitoring Metrics Scope. The formats are:  ::  projects/[PROJECT_ID_OR_NUMBER] workspaces/[HOST_PROJECT_ID_OR_NUMBER]  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.services.service_monitoring_service.pagers.ListServicesAsyncPager: The ListServices response.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.service_monitoring_service.pagers.ListServicesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_service",
          "description": "Update this ``Service``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_update_service():\n        # Create a client\n        client = monitoring_v3.ServiceMonitoringServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.UpdateServiceRequest(\n        )\n\n        # Make the request\n        response = await client.update_service(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.types.UpdateServiceRequest, dict]]):\n        The request object. Th",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "service": {
                "type": "google.cloud.monitoring_v3.types.Service",
                "description": "Required. The ``Service`` to draw updates from. The given ``name`` specifies the resource to update.  This corresponds to the ``service`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.Service: A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern ([Wikipedia](https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "service",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.Service"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_service",
          "description": "Soft delete this ``Service``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_delete_service():\n        # Create a client\n        client = monitoring_v3.ServiceMonitoringServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.DeleteServiceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_service(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.types.DeleteServiceRequest, dict]]):\n        The request object. The ``DeleteService`` request.\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the ``Service`` to delete. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_service_level_objective",
          "description": "Create a ``ServiceLevelObjective`` for the given ``Service``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_create_service_level_objective():\n        # Create a client\n        client = monitoring_v3.ServiceMonitoringServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.CreateServiceLevelObjectiveRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_service_level_objective(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Resource name of the parent ``Service``. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "service_level_objective": {
                "type": "google.cloud.monitoring_v3.types.ServiceLevelObjective",
                "description": "Required. The ``ServiceLevelObjective`` to create. The provided ``name`` will be respected if no ``ServiceLevelObjective`` exists with this name.  This corresponds to the ``service_level_objective`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.ServiceLevelObjective: A Service-Level Objective (SLO) describes a level of desired good service. It consists of a service-level indicator (SLI), a performance goal, and a period over which the objective is to be evaluated against that goal. The SLO can use SLIs defined in a number of different manners. Typical SLOs might include \"99% of requests in each rolling week have latency below 200 milliseconds\" or \"99.5% of requests in each calendar month return successfully.\""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "service_level_objective",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.ServiceLevelObjective"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_service_level_objective",
          "description": "Get a ``ServiceLevelObjective`` by name.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_get_service_level_objective():\n        # Create a client\n        client = monitoring_v3.ServiceMonitoringServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.GetServiceLevelObjectiveRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_service_level_objective(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.clo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the ``ServiceLevelObjective`` to get. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.ServiceLevelObjective: A Service-Level Objective (SLO) describes a level of desired good service. It consists of a service-level indicator (SLI), a performance goal, and a period over which the objective is to be evaluated against that goal. The SLO can use SLIs defined in a number of different manners. Typical SLOs might include \"99% of requests in each rolling week have latency below 200 milliseconds\" or \"99.5% of requests in each calendar month return successfully.\""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.ServiceLevelObjective"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_service_level_objectives",
          "description": "List the ``ServiceLevelObjective``\\ s for the given ``Service``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_service_level_objectives():\n        # Create a client\n        client = monitoring_v3.ServiceMonitoringServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListServiceLevelObjectivesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_service_level_objectives(request=request)\n\n        # Handle the response\n        async for response in page_res",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Resource name of the parent containing the listed SLOs, either a project or a Monitoring Metrics Scope. The formats are:  ::  projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID] workspaces/[HOST_PROJECT_ID_OR_NUMBER]/services/-  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.services.service_monitoring_service.pagers.ListServiceLevelObjectivesAsyncPager: The ListServiceLevelObjectives response.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.service_monitoring_service.pagers.ListServiceLevelObjectivesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_service_level_objective",
          "description": "Update the given ``ServiceLevelObjective``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_update_service_level_objective():\n        # Create a client\n        client = monitoring_v3.ServiceMonitoringServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.UpdateServiceLevelObjectiveRequest(\n        )\n\n        # Make the request\n        response = await client.update_service_level_objective(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.ty",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "service_level_objective": {
                "type": "google.cloud.monitoring_v3.types.ServiceLevelObjective",
                "description": "Required. The ``ServiceLevelObjective`` to draw updates from. The given ``name`` specifies the resource to update.  This corresponds to the ``service_level_objective`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.ServiceLevelObjective: A Service-Level Objective (SLO) describes a level of desired good service. It consists of a service-level indicator (SLI), a performance goal, and a period over which the objective is to be evaluated against that goal. The SLO can use SLIs defined in a number of different manners. Typical SLOs might include \"99% of requests in each rolling week have latency below 200 milliseconds\" or \"99.5% of requests in each calendar month return successfully.\""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "service_level_objective",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.ServiceLevelObjective"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_service_level_objective",
          "description": "Delete the given ``ServiceLevelObjective``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_delete_service_level_objective():\n        # Create a client\n        client = monitoring_v3.ServiceMonitoringServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.DeleteServiceLevelObjectiveRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_service_level_objective(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.types.DeleteServiceLevelObjectiveRequ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the ``ServiceLevelObjective`` to delete. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      }
    ]
  },
  "SnoozeService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_snooze",
          "description": "Creates a ``Snooze`` that will prevent alerts, which match the\nprovided criteria, from being opened. The ``Snooze`` applies for\na specific time interval.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_create_snooze():\n        # Create a client\n        client = monitoring_v3.SnoozeServiceAsyncClient()\n\n        # Initialize request argument(s)\n        snooze = monitoring_v3.Snooze()\n        snooze.name = \"name_value\"\n        snooze.display_name = \"display_name_value\"\n\n        request = monitoring_v3.CreateSnoozeRequest(\n            parent=\"parent_value\",\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ in which a ``Snooze`` should be created. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "snooze": {
                "type": "google.cloud.monitoring_v3.types.Snooze",
                "description": "Required. The ``Snooze`` to create. Omit the ``name`` field, as it will be filled in by the API.  This corresponds to the ``snooze`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.Snooze: A Snooze will prevent any alerts from being opened, and close any that are already open. The Snooze will work on alerts that match the criteria defined in the Snooze. The Snooze will be active from interval.start_time through interval.end_time."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "snooze",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.Snooze"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_snoozes",
          "description": "Lists the ``Snooze``\\ s associated with a project. Can\noptionally pass in ``filter``, which specifies predicates to\nmatch ``Snooze``\\ s.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_snoozes():\n        # Create a client\n        client = monitoring_v3.SnoozeServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListSnoozesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_snoozes(request=request)\n\n        # Handle the response\n        async for response",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ whose ``Snooze``\\ s should be listed. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.services.snooze_service.pagers.ListSnoozesAsyncPager: The results of a successful ListSnoozes call, containing the matching Snoozes.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.snooze_service.pagers.ListSnoozesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_snooze",
          "description": "Retrieves a ``Snooze`` by ``name``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_get_snooze():\n        # Create a client\n        client = monitoring_v3.SnoozeServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.GetSnoozeRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_snooze(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.types.GetSnoozeRequest, dict]]):\n        The req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The ID of the ``Snooze`` to retrieve. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.Snooze: A Snooze will prevent any alerts from being opened, and close any that are already open. The Snooze will work on alerts that match the criteria defined in the Snooze. The Snooze will be active from interval.start_time through interval.end_time."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.Snooze"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_snooze",
          "description": "Updates a ``Snooze``, identified by its ``name``, with the\nparameters in the given ``Snooze`` object.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_update_snooze():\n        # Create a client\n        client = monitoring_v3.SnoozeServiceAsyncClient()\n\n        # Initialize request argument(s)\n        snooze = monitoring_v3.Snooze()\n        snooze.name = \"name_value\"\n        snooze.display_name = \"display_name_value\"\n\n        request = monitoring_v3.UpdateSnoozeRequest(\n            snooze=snooze,\n        )\n\n        # Make the request\n        response = await clien",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "snooze": {
                "type": "google.cloud.monitoring_v3.types.Snooze",
                "description": "Required. The ``Snooze`` to update. Must have the name field present.  This corresponds to the ``snooze`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The fields to update.  For each field listed in ``update_mask``:  -  If the ``Snooze`` object supplied in the ``UpdateSnoozeRequest`` has a value for that field, the value of the field in the existing ``Snooze`` will be set to the value of the field in the supplied ``Snooze``. -  If the field does not have a value in the supplied ``Snooze``, the field in the existing ``Snooze`` is set to its default value.  Fields not listed retain their existing value.  The following are the field names that are accepted in ``update_mask``:  -  ``display_name`` -  ``interval.start_time`` -  ``interval.end_time``  That said, the start time and end time of the ``Snooze`` determines which fields can legally be updated. Before attempting an update, users should consult the documentation for ``UpdateSnoozeRequest``, which talks about which fields can be updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.Snooze: A Snooze will prevent any alerts from being opened, and close any that are already open. The Snooze will work on alerts that match the criteria defined in the Snooze. The Snooze will be active from interval.start_time through interval.end_time."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "snooze",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.Snooze"
          ]
        }
      }
    ]
  },
  "UptimeCheckService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_uptime_check_configs",
          "description": "Lists the existing valid Uptime check configurations\nfor the project (leaving out any invalid\nconfigurations).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_uptime_check_configs():\n        # Create a client\n        client = monitoring_v3.UptimeCheckServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListUptimeCheckConfigsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_uptime_check_configs(request=request)\n\n        # Handle the response\n        as",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ whose Uptime check configurations are listed. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.services.uptime_check_service.pagers.ListUptimeCheckConfigsAsyncPager: The protocol for the ListUptimeCheckConfigs response.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.uptime_check_service.pagers.ListUptimeCheckConfigsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_uptime_check_config",
          "description": "Gets a single Uptime check configuration.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_get_uptime_check_config():\n        # Create a client\n        client = monitoring_v3.UptimeCheckServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.GetUptimeCheckConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_uptime_check_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.monitoring_v3.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The Uptime check configuration to retrieve. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/uptimeCheckConfigs/[UPTIME_CHECK_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.UptimeCheckConfig: This message configures which resources and services to monitor for availability."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.UptimeCheckConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_uptime_check_config",
          "description": "Creates a new Uptime check configuration.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_create_uptime_check_config():\n        # Create a client\n        client = monitoring_v3.UptimeCheckServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.CreateUptimeCheckConfigRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_uptime_check_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.m",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The `project <https://cloud.google.com/monitoring/api/v3#project_name>`__ in which to create the Uptime check. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "uptime_check_config": {
                "type": "google.cloud.monitoring_v3.types.UptimeCheckConfig",
                "description": "Required. The new Uptime check configuration.  This corresponds to the ``uptime_check_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.UptimeCheckConfig: This message configures which resources and services to monitor for availability."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "uptime_check_config",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.UptimeCheckConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_uptime_check_config",
          "description": "Updates an Uptime check configuration. You can either replace\nthe entire configuration with a new one or replace only certain\nfields in the current configuration by specifying the fields to\nbe updated via ``updateMask``. Returns the updated\nconfiguration.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_update_uptime_check_config():\n        # Create a client\n        client = monitoring_v3.UptimeCheckServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.UpdateUptimeCheckConfigRequest(\n        )\n\n        # Make the request\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "uptime_check_config": {
                "type": "google.cloud.monitoring_v3.types.UptimeCheckConfig",
                "description": "Required. If an ``updateMask`` has been specified, this field gives the values for the set of fields mentioned in the ``updateMask``. If an ``updateMask`` has not been given, this Uptime check configuration replaces the current configuration. If a field is mentioned in ``updateMask`` but the corresponding field is omitted in this partial Uptime check configuration, it has the effect of deleting/clearing the field from the configuration on the server.  The following fields can be updated: ``display_name``, ``http_check``, ``tcp_check``, ``timeout``, ``content_matchers``, and ``selected_regions``.  This corresponds to the ``uptime_check_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.monitoring_v3.types.UptimeCheckConfig: This message configures which resources and services to monitor for availability."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "uptime_check_config",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.types.UptimeCheckConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_uptime_check_config",
          "description": "Deletes an Uptime check configuration. Note that this\nmethod will fail if the Uptime check configuration is\nreferenced by an alert policy or other dependent configs\nthat would be rendered invalid by the deletion.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_delete_uptime_check_config():\n        # Create a client\n        client = monitoring_v3.UptimeCheckServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.DeleteUptimeCheckConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The Uptime check configuration to delete. The format is:  ::  projects/[PROJECT_ID_OR_NUMBER]/uptimeCheckConfigs/[UPTIME_CHECK_ID]  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_uptime_check_ips",
          "description": "Returns the list of IP addresses that checkers run\nfrom\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import monitoring_v3\n\n    async def sample_list_uptime_check_ips():\n        # Create a client\n        client = monitoring_v3.UptimeCheckServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = monitoring_v3.ListUptimeCheckIpsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_uptime_check_ips(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.monitoring_v3.services.uptime_check_service.pagers.ListUptimeCheckIpsAsyncPager"
          ]
        }
      }
    ]
  }
}