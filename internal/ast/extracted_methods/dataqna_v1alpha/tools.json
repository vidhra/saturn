{
  "AutoSuggestionService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "suggest_queries",
          "description": "Gets a list of suggestions based on a prefix string.\nAutoSuggestion tolerance should be less than 1 second.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataqna_v1alpha\n\n    async def sample_suggest_queries():\n        # Create a client\n        client = dataqna_v1alpha.AutoSuggestionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataqna_v1alpha.SuggestQueriesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.suggest_queries(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "QuestionService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "get_question",
          "description": "Gets a previously created question.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataqna_v1alpha\n\n    async def sample_get_question():\n        # Create a client\n        client = dataqna_v1alpha.QuestionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataqna_v1alpha.GetQuestionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_question(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.dataqna_v1alpha.types.GetQuestionRequest, dict]]",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The unique identifier for the question. Example: ``projects/foo/locations/bar/questions/1234``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataqna_v1alpha.types.Question: The question resource represents a natural language query, its settings, understanding generated by the system, and answer retrieval status. A question cannot be modified."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_question",
          "description": "Creates a question.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataqna_v1alpha\n\n    async def sample_create_question():\n        # Create a client\n        client = dataqna_v1alpha.QuestionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        question = dataqna_v1alpha.Question()\n        question.scopes = ['scopes_value1', 'scopes_value2']\n        question.query = \"query_value\"\n\n        request = dataqna_v1alpha.CreateQuestionRequest(\n            parent=\"parent_value\",\n            question=question,\n        )\n\n        # Make the request\n        response = await client.create_qu",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the project this data source reference belongs to. Example: ``projects/foo/locations/bar``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "question": {
                "type": "google.cloud.dataqna_v1alpha.types.Question",
                "description": "Required. The question to create. This corresponds to the ``question`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataqna_v1alpha.types.Question: The question resource represents a natural language query, its settings, understanding generated by the system, and answer retrieval status. A question cannot be modified."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "question",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "execute_question",
          "description": "Executes an interpretation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataqna_v1alpha\n\n    async def sample_execute_question():\n        # Create a client\n        client = dataqna_v1alpha.QuestionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataqna_v1alpha.ExecuteQuestionRequest(\n            name=\"name_value\",\n            interpretation_index=2159,\n        )\n\n        # Make the request\n        response = await client.execute_question(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.dataq",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The unique identifier for the question. Example: ``projects/foo/locations/bar/questions/1234``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "interpretation_index": {
                "type": "int",
                "description": "Required. Index of the interpretation to execute.  This corresponds to the ``interpretation_index`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataqna_v1alpha.types.Question: The question resource represents a natural language query, its settings, understanding generated by the system, and answer retrieval status. A question cannot be modified."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "interpretation_index",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_user_feedback",
          "description": "Gets previously created user feedback.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataqna_v1alpha\n\n    async def sample_get_user_feedback():\n        # Create a client\n        client = dataqna_v1alpha.QuestionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = dataqna_v1alpha.GetUserFeedbackRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_user_feedback(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.dataqna_v1alpha.types.GetUserFe",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The unique identifier for the user feedback. User feedback is a singleton resource on a Question. Example: ``projects/foo/locations/bar/questions/1234/userFeedback``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataqna_v1alpha.types.UserFeedback: Feedback provided by a user."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_user_feedback",
          "description": "Updates user feedback. This creates user feedback if\nthere was none before (upsert).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import dataqna_v1alpha\n\n    async def sample_update_user_feedback():\n        # Create a client\n        client = dataqna_v1alpha.QuestionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        user_feedback = dataqna_v1alpha.UserFeedback()\n        user_feedback.name = \"name_value\"\n\n        request = dataqna_v1alpha.UpdateUserFeedbackRequest(\n            user_feedback=user_feedback,\n        )\n\n        # Make the request\n        response = await client.update_us",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "user_feedback": {
                "type": "google.cloud.dataqna_v1alpha.types.UserFeedback",
                "description": "Required. The user feedback to update. This can be called even if there is no user feedback so far. The feedback's name field is used to identify the user feedback (and the corresponding question) to update.  This corresponds to the ``user_feedback`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.dataqna_v1alpha.types.UserFeedback: Feedback provided by a user."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "user_feedback",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  }
}