{
  "ChatService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_message",
          "description": "Creates a message in a Google Chat space. For an example, see\n`Send a\nmessage <https://developers.google.com/workspace/chat/create-messages>`__.\n\nThe ``create()`` method requires either user or app\nauthentication. Chat attributes the message sender differently\ndepending on the type of authentication that you use in your\nrequest.\n\nThe following image shows how Chat attributes a message when you\nuse app authentication. Chat displays the Chat app as the\nmessage sender. The content of the message can contain text\n(``text``), cards (``cardsV2``), and accessory widgets\n(``accessoryWidgets``).\n\n|Message sent with app authentication async|\n\nThe following image shows how Chat attributes a message when you\nuse user authentication. Chat displays the user as the message\nsender and attributes the Chat app to the message by displaying\nits name. The content of message can only contain text\n(``text``).\n\n|Message sent with user authentication async|\n\nThe maximum message size, including the message contents, is\n32,000 bytes.\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the space in which to create a message.  Format: ``spaces/{space}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "message": {
                "type": "google.apps.chat_v1.types.Message",
                "description": "Required. Message body. This corresponds to the ``message`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "message_id": {
                "type": "str",
                "description": "Optional. A custom ID for a message. Lets Chat apps get, update, or delete a message without needing to store the system-assigned ID in the message's resource name (represented in the message ``name`` field).  The value for this field must meet the following requirements:  -  Begins with ``client-``. For example, ``client-custom-name`` is a valid custom ID, but ``custom-name`` is not. -  Contains up to 63 characters and only lowercase letters, numbers, and hyphens. -  Is unique within a space. A Chat app can't use the same custom ID for different messages.  For details, see `Name a message <https://developers.google.com/workspace/chat/create-messages#name_a_created_message>`__.  This corresponds to the ``message_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.Message: A message in a Google Chat space."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "message",
              "message_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_messages",
          "description": "Lists messages in a space that the caller is a member of,\nincluding messages from blocked members and spaces. If you list\nmessages from a space with no messages, the response is an empty\nobject. When using a REST/HTTP interface, the response contains\nan empty JSON object, ``{}``. For an example, see `List\nmessages <https://developers.google.com/workspace/chat/api/guides/v1/messages/list>`__.\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_list_messages():\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the space to list messages from.  Format: ``spaces/{space}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.services.chat_service.pagers.ListMessagesAsyncPager: Response message for listing messages. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_memberships",
          "description": "Lists memberships in a space. For an example, see `List users\nand Google Chat apps in a\nspace <https://developers.google.com/workspace/chat/list-members>`__.\nListing memberships with `app\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-app>`__\nlists memberships in spaces that the Chat app has access to, but\nexcludes Chat app memberships, including its own. Listing\nmemberships with `User\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__\nlists memberships in spaces that the authenticated user has\naccess to.\n\nRequires\n`authentication <https://developers.google.com/workspace/chat/authenticate-authorize>`__.\nSupports `app\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-app>`__\nand `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the space for which to fetch a membership list.  Format: spaces/{space}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.services.chat_service.pagers.ListMembershipsAsyncPager: Response to list memberships of the space. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_membership",
          "description": "Returns details about a membership. For an example, see `Get\ndetails about a user's or Google Chat app's\nmembership <https://developers.google.com/workspace/chat/get-members>`__.\n\nRequires\n`authentication <https://developers.google.com/workspace/chat/authenticate-authorize>`__.\nSupports `app\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-app>`__\nand `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_get_membership():\n        # ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the membership to retrieve.  To get the app's own membership `by using user authentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__, you can optionally use ``spaces/{space}/members/app``.  Format: ``spaces/{space}/members/{member}`` or ``spaces/{space}/members/app``  When `authenticated as a user <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__, you can use the user's email as an alias for ``{member}``. For example, ``spaces/{space}/members/example@gmail.com`` where ``example@gmail.com`` is the email of the Google Chat user.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.Membership: Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_message",
          "description": "Returns details about a message. For an example, see `Get\ndetails about a\nmessage <https://developers.google.com/workspace/chat/get-messages>`__.\n\nRequires\n`authentication <https://developers.google.com/workspace/chat/authenticate-authorize>`__.\nSupports `app\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-app>`__\nand `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\nNote: Might return a message from a blocked member or space.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the message.  Format: ``spaces/{space}/messages/{message}``  If you've set a custom ID for your message, you can use the value from the ``clientAssignedMessageId`` field for ``{message}``. For details, see [Name a message] (https://developers.google.com/workspace/chat/create-messages#name_a_created_message).  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.Message: A message in a Google Chat space."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_message",
          "description": "Updates a message. There's a difference between the ``patch``\nand ``update`` methods. The ``patch`` method uses a ``patch``\nrequest while the ``update`` method uses a ``put`` request. We\nrecommend using the ``patch`` method. For an example, see\n`Update a\nmessage <https://developers.google.com/workspace/chat/update-messages>`__.\n\nRequires\n`authentication <https://developers.google.com/workspace/chat/authenticate-authorize>`__.\nSupports `app\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-app>`__\nand `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\nWhen using app authentication, requests can only update messages\ncreated by the calling Chat app.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require sp",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "message": {
                "type": "google.apps.chat_v1.types.Message",
                "description": "Required. Message with fields updated.  This corresponds to the ``message`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The field paths to update. Separate multiple values with commas or use ``*`` to update all field paths.  Currently supported field paths:  -  ``text``  -  ``attachment``  -  ``cards`` (Requires `app authentication </chat/api/guides/auth/service-accounts>`__.)  -  ``cards_v2`` (Requires `app authentication </chat/api/guides/auth/service-accounts>`__.)  -  ``accessory_widgets`` (Requires `app authentication </chat/api/guides/auth/service-accounts>`__.)  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.Message: A message in a Google Chat space."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "message",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_message",
          "description": "Deletes a message. For an example, see `Delete a\nmessage <https://developers.google.com/workspace/chat/delete-messages>`__.\n\nRequires\n`authentication <https://developers.google.com/workspace/chat/authenticate-authorize>`__.\nSupports `app\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-app>`__\nand `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\nWhen using app authentication, requests can only delete messages\ncreated by the calling Chat app.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    as",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the message.  Format: ``spaces/{space}/messages/{message}``  If you've set a custom ID for your message, you can use the value from the ``clientAssignedMessageId`` field for ``{message}``. For details, see [Name a message] (https://developers.google.com/workspace/chat/create-messages#name_a_created_message).  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_attachment",
          "description": "Gets the metadata of a message attachment. The attachment data\nis fetched using the `media\nAPI <https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download>`__.\nFor an example, see `Get metadata about a message\nattachment <https://developers.google.com/workspace/chat/get-media-attachments>`__.\nRequires `app\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-app>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_get_attachment():\n        # Create a client\n        client = chat_v1.ChatServiceAsyncClient()\n\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the attachment, in the form ``spaces/{space}/messages/{message}/attachments/{attachment}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.Attachment: An attachment in Google Chat."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "upload_attachment",
          "description": "Uploads an attachment. For an example, see `Upload media as a\nfile\nattachment <https://developers.google.com/workspace/chat/upload-media-attachments>`__.\nRequires user\n`authentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\nYou can upload attachments up to 200 MB. Certain file types\naren't supported. For details, see `File types blocked by Google\nChat <https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_up",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_spaces",
          "description": "Lists spaces the caller is a member of. Group chats and DMs\naren't listed until the first message is sent. For an example,\nsee `List\nspaces <https://developers.google.com/workspace/chat/list-spaces>`__.\n\nRequires\n`authentication <https://developers.google.com/workspace/chat/authenticate-authorize>`__.\nSupports `app\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-app>`__\nand `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\nLists spaces visible to the caller or authenticated user. Group\nchats and DMs aren't listed until the first message is sent.\n\nTo list all named spaces by Google Workspace organization, use\nthe\n```spaces.search()`` <https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search>`__\nmethod using Workspace administrator privileges instead.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It wil",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "search_spaces",
          "description": "Returns a list of spaces in a Google Workspace organization\nbased on an administrator's search. Requires `user\nauthentication with administrator\nprivileges <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges>`__.\nIn the request, set ``use_admin_access`` to ``true``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_search_spaces():\n        # Create a client\n        client = chat_v1.ChatServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = chat_v1.SearchSpacesRequest(\n            query=\"query_value\",\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_space",
          "description": "Returns details about a space. For an example, see `Get details\nabout a\nspace <https://developers.google.com/workspace/chat/get-spaces>`__.\n\nRequires\n`authentication <https://developers.google.com/workspace/chat/authenticate-authorize>`__.\nSupports `app\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-app>`__\nand `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_get_space():\n        # Create a client\n        client = chat_v1.Cha",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the space, in the form ``spaces/{space}``.  Format: ``spaces/{space}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.Space: A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_space",
          "description": "Creates a space with no members. Can be used to create a named\nspace. Spaces grouped by topics aren't supported. For an\nexample, see `Create a\nspace <https://developers.google.com/workspace/chat/create-spaces>`__.\n\nIf you receive the error message ``ALREADY_EXISTS`` when\ncreating a space, try a different ``displayName``. An existing\nspace within the Google Workspace organization might already use\nthis display name.\n\nIf you're a member of the `Developer Preview\nprogram <https://developers.google.com/workspace/preview>`__,\nyou can create a group chat in import mode using\n``spaceType.GROUP_CHAT``.\n\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints whe",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "space": {
                "type": "google.apps.chat_v1.types.Space",
                "description": "Required. The ``displayName`` and ``spaceType`` fields must be populated. Only ``SpaceType.SPACE`` is supported.  If you receive the error message ``ALREADY_EXISTS``, try a different ``displayName``. An existing space within the Google Workspace organization might already use this display name.  If you're a member of the `Developer Preview program <https://developers.google.com/workspace/preview>`__, ``SpaceType.GROUP_CHAT`` can be used if ``importMode`` is set to true.  The space ``name`` is assigned on the server so anything specified in this field will be ignored.  This corresponds to the ``space`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.Space: A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "space",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "set_up_space",
          "description": "Creates a space and adds specified users to it. The calling user\nis automatically added to the space, and shouldn't be specified\nas a membership in the request. For an example, see `Set up a\nspace with initial\nmembers <https://developers.google.com/workspace/chat/set-up-spaces>`__.\n\nTo specify the human members to add, add memberships with the\nappropriate ``membership.member.name``. To add a human user, use\n``users/{user}``, where ``{user}`` can be the email address for\nthe user. For users in the same Workspace organization\n``{user}`` can also be the ``id`` for the person from the People\nAPI, or the ``id`` for the user in the Directory API. For\nexample, if the People API Person profile ID for\n``user@example.com`` is ``123456789``, you can add the user to\nthe space by setting the ``membership.member.name`` to\n``users/user@example.com`` or ``users/123456789``.\n\nTo specify the Google groups to add, add memberships with the\nappropriate ``membership.group_member.name``. To add or invite a\nGoogle group, use ``group",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_space",
          "description": "Updates a space. For an example, see `Update a\nspace <https://developers.google.com/workspace/chat/update-spaces>`__.\n\nIf you're updating the ``displayName`` field and receive the\nerror message ``ALREADY_EXISTS``, try a different display name..\nAn existing space within the Google Workspace organization might\nalready use this display name.\n\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_update_space():\n        # Create a client\n        client = chat_v1.Chat",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "space": {
                "type": "google.apps.chat_v1.types.Space",
                "description": "Required. Space with fields to be updated. ``Space.name`` must be populated in the form of ``spaces/{space}``. Only fields specified by ``update_mask`` are updated.  This corresponds to the ``space`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The updated field paths, comma separated if there are multiple.  You can update the following fields for a space:  ``space_details``: Updates the space's description. Supports up to 150 characters.  ``display_name``: Only supports updating the display name for spaces where ``spaceType`` field is ``SPACE``. If you receive the error message ``ALREADY_EXISTS``, try a different value. An existing space within the Google Workspace organization might already use this display name.  ``space_type``: Only supports changing a ``GROUP_CHAT`` space type to ``SPACE``. Include ``display_name`` together with ``space_type`` in the update mask and ensure that the specified space has a non-empty display name and the ``SPACE`` space type. Including the ``space_type`` mask and the ``SPACE`` type in the specified space when updating the display name is optional if the existing space already has the ``SPACE`` type. Trying to update the space type in other ways results in an invalid argument error. ``space_type`` is not supported with ``useAdminAccess``.  ``space_history_state``: Updates `space history settings <https://support.google.com/chat/answer/7664687>`__ by turning history on or off for the space. Only supported if history settings are enabled for the Google Workspace organization. To update the space history state, you must omit all other field masks in your request. ``space_history_state`` is not supported with ``useAdminAccess``.  ``access_settings.audience``: Updates the `access setting <https://support.google.com/chat/answer/11971020>`__ of who can discover the space, join the space, and preview the messages in named space where ``spaceType`` field is ``SPACE``. If the existing space has a target audience, you can remove the audience and restrict space access by omitting a value for this field mask. To update access settings for a space, the authenticating user must be a space manager and omit all other field masks in your request. You can't update this field if the space is in `import mode <https://developers.google.com/workspace/chat/import-data-overview>`__. To learn more, see `Make a space discoverable to specific users <https://developers.google.com/workspace/chat/space-target-audience>`__. ``access_settings.audience`` is not supported with ``useAdminAccess``.  ``permission_settings``: Supports changing the `permission settings <https://support.google.com/chat/answer/13340792>`__ of a space. When updating permission settings, you can only specify ``permissionSettings`` field masks; you cannot update other field masks at the same time. ``permissionSettings`` is not supported with ``useAdminAccess``. The supported field masks include:  -  ``permission_settings.manageMembersAndGroups`` -  ``permission_settings.modifySpaceDetails`` -  ``permission_settings.toggleHistory`` -  ``permission_settings.useAtMentionAll`` -  ``permission_settings.manageApps`` -  ``permission_settings.manageWebhooks`` -  ``permission_settings.replyMessages``  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.Space: A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "space",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_space",
          "description": "Deletes a named space. Always performs a cascading delete, which\nmeans that the space's child resources\u2014like messages posted in\nthe space and memberships in the space\u2014are also deleted. For an\nexample, see `Delete a\nspace <https://developers.google.com/workspace/chat/delete-spaces>`__.\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__\nfrom a user who has permission to delete the space.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_delete_space():\n        # Create a client\n        client = chat_v1.ChatServi",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the space to delete.  Format: ``spaces/{space}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "complete_import_space",
          "description": "Completes the `import\nprocess <https://developers.google.com/workspace/chat/import-data>`__\nfor the specified space and makes it visible to users. Requires\napp authentication and domain-wide delegation. For more\ninformation, see `Authorize Google Chat apps to import\ndata <https://developers.google.com/workspace/chat/authorize-import>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_complete_import_space():\n        # Create a client\n        client = chat_v1.ChatServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = chat_v1.CompleteImportSpac",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "find_direct_message",
          "description": "Returns the existing direct message with the specified user. If\nno direct message space is found, returns a ``404 NOT_FOUND``\nerror. For an example, see `Find a direct\nmessage </chat/api/guides/v1/spaces/find-direct-message>`__.\n\nWith `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__,\nreturns the direct message space between the specified user and\nthe authenticated user.\n\nWith `app\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-app>`__,\nreturns the direct message space between the specified user and\nthe calling Chat app.\n\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__\nor `app\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-app>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    #",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_membership",
          "description": "Creates a membership for the calling Chat app, a user, or a\nGoogle Group. Creating memberships for other Chat apps isn't\nsupported. When creating a membership, if the specified member\nhas their auto-accept policy turned off, then they're invited,\nand must accept the space invitation before joining. Otherwise,\ncreating a membership adds the member directly to the specified\nspace. Requires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\nFor example usage, see:\n\n-  `Invite or add a user to a\n   space <https://developers.google.com/workspace/chat/create-members#create-user-membership>`__.\n\n-  `Invite or add a Google Group to a\n   space <https://developers.google.com/workspace/chat/create-members#create-group-membership>`__.\n\n-  `Add the Chat app to a\n   space <https://developers.google.com/workspace/chat/create-members#create-membership-calling-api>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the space for which to create the membership.  Format: spaces/{space}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "membership": {
                "type": "google.apps.chat_v1.types.Membership",
                "description": "Required. The membership relation to create. The ``memberType`` field must contain a user with the ``user.name`` and ``user.type`` fields populated. The server will assign a resource name and overwrite anything specified. When a Chat app creates a membership relation for a human user, it must use the ``chat.memberships`` scope, set ``user.type`` to ``HUMAN``, and set ``user.name`` with format ``users/{user}``, where ``{user}`` can be the email address for the user. For users in the same Workspace organization ``{user}`` can also be the ``id`` of the `person <https://developers.google.com/people/api/rest/v1/people>`__ from the People API, or the ``id`` for the user in the Directory API. For example, if the People API Person profile ID for ``user@example.com`` is ``123456789``, you can add the user to the space by setting the ``membership.member.name`` to ``users/user@example.com`` or ``users/123456789``. When a Chat app creates a membership relation for itself, it must use the ``chat.memberships.app`` scope, set ``user.type`` to ``BOT``, and set ``user.name`` to ``users/app``.  This corresponds to the ``membership`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.Membership: Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "membership",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_membership",
          "description": "Updates a membership. For an example, see `Update a user's\nmembership in a\nspace <https://developers.google.com/workspace/chat/update-members>`__.\n\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_update_membership():\n        # Create a client\n        client = chat_v1.ChatServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = chat_v1.UpdateMembershipRequest(\n        )\n\n        # Make the request\n        response = await client.updat",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "membership": {
                "type": "google.apps.chat_v1.types.Membership",
                "description": "Required. The membership to update. Only fields specified by ``update_mask`` are updated.  This corresponds to the ``membership`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The field paths to update. Separate multiple values with commas or use ``*`` to update all field paths.  Currently supported field paths:  -  ``role``  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.Membership: Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "membership",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_membership",
          "description": "Deletes a membership. For an example, see `Remove a user or a\nGoogle Chat app from a\nspace <https://developers.google.com/workspace/chat/delete-members>`__.\n\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_delete_membership():\n        # Create a client\n        client = chat_v1.ChatServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = chat_v1.DeleteMembershipRequest(\n            name=\"name_value\",\n        )\n\n        # Make the requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the membership to delete. Chat apps can delete human users' or their own memberships. Chat apps can't delete other apps' memberships.  When deleting a human membership, requires the ``chat.memberships`` scope and ``spaces/{space}/members/{member}`` format. You can use the email as an alias for ``{member}``. For example, ``spaces/{space}/members/example@gmail.com`` where ``example@gmail.com`` is the email of the Google Chat user.  When deleting an app membership, requires the ``chat.memberships.app`` scope and ``spaces/{space}/members/app`` format.  Format: ``spaces/{space}/members/{member}`` or ``spaces/{space}/members/app``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.Membership: Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_reaction",
          "description": "Creates a reaction and adds it to a message. Only unicode emojis\nare supported. For an example, see `Add a reaction to a\nmessage <https://developers.google.com/workspace/chat/create-reactions>`__.\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_create_reaction():\n        # Create a client\n        client = chat_v1.ChatServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = chat_v1.CreateReactionRequest(\n            parent=\"parent_val",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The message where the reaction is created.  Format: ``spaces/{space}/messages/{message}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "reaction": {
                "type": "google.apps.chat_v1.types.Reaction",
                "description": "Required. The reaction to create. This corresponds to the ``reaction`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.Reaction: A reaction to a message."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "reaction",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_reactions",
          "description": "Lists reactions to a message. For an example, see `List\nreactions for a\nmessage <https://developers.google.com/workspace/chat/list-reactions>`__.\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_list_reactions():\n        # Create a client\n        client = chat_v1.ChatServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = chat_v1.ListReactionsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        pa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The message users reacted to.  Format: ``spaces/{space}/messages/{message}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.services.chat_service.pagers.ListReactionsAsyncPager: Response to a list reactions request.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_reaction",
          "description": "Deletes a reaction to a message. Only unicode emojis are\nsupported. For an example, see `Delete a\nreaction <https://developers.google.com/workspace/chat/delete-reactions>`__.\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_delete_reaction():\n        # Create a client\n        client = chat_v1.ChatServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = chat_v1.DeleteReactionRequest(\n            name=\"name_value\",\n        )\n\n        # ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the reaction to delete.  Format: ``spaces/{space}/messages/{message}/reactions/{reaction}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_space_read_state",
          "description": "Returns details about a user's read state within a space, used\nto identify read and unread messages. For an example, see `Get\ndetails about a user's space read\nstate <https://developers.google.com/workspace/chat/get-space-read-state>`__.\n\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_get_space_read_state():\n        # Create a client\n        client = chat_v1.ChatServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = chat_v1.GetSpa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the space read state to retrieve.  Only supports getting read state for the calling user.  To refer to the calling user, set one of the following:  -  The ``me`` alias. For example, ``users/me/spaces/{space}/spaceReadState``.  -  Their Workspace email address. For example, ``users/user@example.com/spaces/{space}/spaceReadState``.  -  Their user id. For example, ``users/123456789/spaces/{space}/spaceReadState``.  Format: users/{user}/spaces/{space}/spaceReadState  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.SpaceReadState: A user's read state within a space, used to identify read and unread messages."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_space_read_state",
          "description": "Updates a user's read state within a space, used to identify\nread and unread messages. For an example, see `Update a user's\nspace read\nstate <https://developers.google.com/workspace/chat/update-space-read-state>`__.\n\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_update_space_read_state():\n        # Create a client\n        client = chat_v1.ChatServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = chat_v1.UpdateSpaceReadStateReque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "space_read_state": {
                "type": "google.apps.chat_v1.types.SpaceReadState",
                "description": "Required. The space read state and fields to update.  Only supports updating read state for the calling user.  To refer to the calling user, set one of the following:  -  The ``me`` alias. For example, ``users/me/spaces/{space}/spaceReadState``.  -  Their Workspace email address. For example, ``users/user@example.com/spaces/{space}/spaceReadState``.  -  Their user id. For example, ``users/123456789/spaces/{space}/spaceReadState``.  Format: users/{user}/spaces/{space}/spaceReadState  This corresponds to the ``space_read_state`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The field paths to update. Currently supported field paths:  -  ``last_read_time``  When the ``last_read_time`` is before the latest message create time, the space appears as unread in the UI.  To mark the space as read, set ``last_read_time`` to any value later (larger) than the latest message create time. The ``last_read_time`` is coerced to match the latest message create time. Note that the space read state only affects the read state of messages that are visible in the space's top-level conversation. Replies in threads are unaffected by this timestamp, and instead rely on the thread read state.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.SpaceReadState: A user's read state within a space, used to identify read and unread messages."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "space_read_state",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_thread_read_state",
          "description": "Returns details about a user's read state within a thread, used\nto identify read and unread messages. For an example, see `Get\ndetails about a user's thread read\nstate <https://developers.google.com/workspace/chat/get-thread-read-state>`__.\n\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.apps import chat_v1\n\n    async def sample_get_thread_read_state():\n        # Create a client\n        client = chat_v1.ChatServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = chat_v1.Ge",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name of the thread read state to retrieve.  Only supports getting read state for the calling user.  To refer to the calling user, set one of the following:  -  The ``me`` alias. For example, ``users/me/spaces/{space}/threads/{thread}/threadReadState``.  -  Their Workspace email address. For example, ``users/user@example.com/spaces/{space}/threads/{thread}/threadReadState``.  -  Their user id. For example, ``users/123456789/spaces/{space}/threads/{thread}/threadReadState``.  Format: users/{user}/spaces/{space}/threads/{thread}/threadReadState  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.ThreadReadState: A user's read state within a thread, used to identify read and unread messages."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_space_event",
          "description": "Returns an event from a Google Chat space. The `event\npayload <https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload>`__\ncontains the most recent version of the resource that changed.\nFor example, if you request an event about a new message but the\nmessage was later updated, the server returns the updated\n``Message`` resource in the event payload.\n\nNote: The ``permissionSettings`` field is not returned in the\nSpace object of the Space event data for this request.\n\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\nTo get an event, the authenticated user must be a member of the\nspace.\n\nFor an example, see `Get details about an event from a Google\nChat\nspace <https://developers.google.com/workspace/chat/get-space-event>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modification",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the space event.  Format: ``spaces/{space}/spaceEvents/{spaceEvent}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.types.SpaceEvent: An event that represents a change or activity in a Google Chat space. To learn more, see [Work with events from Google Chat](\\ https://developers.google.com/workspace/chat/events-overview)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_space_events",
          "description": "Lists events from a Google Chat space. For each event, the\n`payload <https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload>`__\ncontains the most recent version of the Chat resource. For\nexample, if you list events about new space members, the server\nreturns ``Membership`` resources that contain the latest\nmembership details. If new members were removed during the\nrequested period, the event payload contains an empty\n``Membership`` resource.\n\nRequires `user\nauthentication <https://developers.google.com/workspace/chat/authenticate-authorize-chat-user>`__.\nTo list events, the authenticated user must be a member of the\nspace.\n\nFor an example, see `List events from a Google Chat\nspace <https://developers.google.com/workspace/chat/list-space-events>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require cor",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Resource name of the `Google Chat space <https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces>`__ where the events occurred.  Format: ``spaces/{space}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "filter": {
                "type": "str",
                "description": "Required. A query filter.  You must specify at least one event type (``event_type``) using the has ``:`` operator. To filter by multiple event types, use the ``OR`` operator. Omit batch event types in your filter. The request automatically returns any related batch events. For example, if you filter by new reactions (``google.workspace.chat.reaction.v1.created``), the server also returns batch new reactions events (``google.workspace.chat.reaction.v1.batchCreated``). For a list of supported event types, see the ```SpaceEvents`` reference documentation <https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.event_type>`__.  Optionally, you can also filter by start time (``start_time``) and end time (``end_time``):  -  ``start_time``: Exclusive timestamp from which to start listing space events. You can list events that occurred up to 28 days ago. If unspecified, lists space events from the past 28 days. -  ``end_time``: Inclusive timestamp until which space events are listed. If unspecified, lists events up to the time of the request.  To specify a start or end time, use the equals ``=`` operator and format in `RFC-3339 <https://www.rfc-editor.org/rfc/rfc3339>`__. To filter by both ``start_time`` and ``end_time``, use the ``AND`` operator.  For example, the following queries are valid:  ::  start_time=\"2023-08-23T19:20:33+00:00\" AND end_time=\"2023-08-23T19:21:54+00:00\"  ::  start_time=\"2023-08-23T19:20:33+00:00\" AND (event_types:\"google.workspace.chat.space.v1.updated\" OR event_types:\"google.workspace.chat.message.v1.created\")  The following queries are invalid:  ::  start_time=\"2023-08-23T19:20:33+00:00\" OR end_time=\"2023-08-23T19:21:54+00:00\"  ::  event_types:\"google.workspace.chat.space.v1.updated\" AND event_types:\"google.workspace.chat.message.v1.created\"  Invalid queries are rejected by the server with an ``INVALID_ARGUMENT`` error.  This corresponds to the ``filter`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.apps.chat_v1.services.chat_service.pagers.ListSpaceEventsAsyncPager: Response message for listing space events. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "filter",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  }
}