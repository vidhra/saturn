{
  "Eventarc": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "get_trigger",
          "description": "Get a single trigger.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_get_trigger():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.GetTriggerRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_trigger(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.GetTriggerRequest, dict]]):\n        The request object. The reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the trigger to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.types.Trigger: A representation of the trigger resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.GetTriggerRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_triggers",
          "description": "List triggers.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_list_triggers():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.ListTriggersRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_triggers(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.ListTriggersRequest",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection to list triggers on.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.services.eventarc.pagers.ListTriggersAsyncPager: The response message for the ListTriggers method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.ListTriggersRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_trigger",
          "description": "Create a new trigger in a particular project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_create_trigger():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        trigger = eventarc_v1.Trigger()\n        trigger.name = \"name_value\"\n        trigger.event_filters.attribute = \"attribute_value\"\n        trigger.event_filters.value = \"value_value\"\n        trigger.destination.cloud_run.service = \"service_value\"\n        trigger.destination.cloud_run.region = \"region_value\"\n\n        req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection in which to add this trigger.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "trigger": {
                "type": "google.cloud.eventarc_v1.types.Trigger",
                "description": "Required. The trigger to create. This corresponds to the ``trigger`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "trigger_id": {
                "type": "str",
                "description": "Required. The user-provided ID to be assigned to the trigger.  This corresponds to the ``trigger_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.Trigger` A representation of the trigger resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "trigger",
              "trigger_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.CreateTriggerRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_trigger",
          "description": "Update a single trigger.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_update_trigger():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.UpdateTriggerRequest(\n        )\n\n        # Make the request\n        operation = client.update_trigger(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "trigger": {
                "type": "google.cloud.eventarc_v1.types.Trigger",
                "description": "The trigger to be updated. This corresponds to the ``trigger`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The fields to be updated; only fields explicitly provided are updated. If no field mask is provided, all provided fields in the request are updated. To update all fields, provide a field mask of \"*\".  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "allow_missing": {
                "type": "bool",
                "description": "If set to true, and the trigger is not found, a new trigger will be created. In this situation, ``update_mask`` is ignored.  This corresponds to the ``allow_missing`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.Trigger` A representation of the trigger resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "trigger",
              "update_mask",
              "allow_missing",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.UpdateTriggerRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_trigger",
          "description": "Delete a single trigger.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_delete_trigger():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.DeleteTriggerRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_trigger(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Opt",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the trigger to be deleted.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "allow_missing": {
                "type": "bool",
                "description": "If set to true, and the trigger is not found, the request will succeed but no action will be taken on the server.  This corresponds to the ``allow_missing`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.Trigger` A representation of the trigger resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "allow_missing",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.DeleteTriggerRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_channel",
          "description": "Get a single Channel.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_get_channel():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.GetChannelRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_channel(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.GetChannelRequest, dict]]):\n        The request object. The reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the channel to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.types.Channel: A representation of the Channel resource. A Channel is a resource on which event providers publish their events. The published events are delivered through the transport associated with the channel. Note that a channel is associated with exactly one event provider."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.GetChannelRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_channels",
          "description": "List channels.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_list_channels():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.ListChannelsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_channels(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.ListChannelsRequest",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection to list channels on.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.services.eventarc.pagers.ListChannelsAsyncPager: The response message for the ListChannels method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.ListChannelsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_channel",
          "description": "Create a new channel in a particular project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_create_channel():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        channel = eventarc_v1.Channel()\n        channel.pubsub_topic = \"pubsub_topic_value\"\n        channel.name = \"name_value\"\n\n        request = eventarc_v1.CreateChannelRequest(\n            parent=\"parent_value\",\n            channel=channel,\n            channel_id=\"channel_id_value\",\n        )\n\n        # Make the request\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection in which to add this channel.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "channel": {
                "type": "google.cloud.eventarc_v1.types.Channel",
                "description": "Required. The channel to create. This corresponds to the ``channel`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "channel_id": {
                "type": "str",
                "description": "Required. The user-provided ID to be assigned to the channel.  This corresponds to the ``channel_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.Channel` A representation of the Channel resource. A Channel is a resource on which event providers publish their events. The published events are delivered through the transport associated with the channel. Note that a channel is associated with exactly one event provider."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "channel",
              "channel_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.CreateChannelRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_channel",
          "description": "Update a single channel.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_update_channel():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.UpdateChannelRequest(\n        )\n\n        # Make the request\n        operation = client.update_channel(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "channel": {
                "type": "google.cloud.eventarc_v1.types.Channel",
                "description": "The channel to be updated. This corresponds to the ``channel`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The fields to be updated; only fields explicitly provided are updated. If no field mask is provided, all provided fields in the request are updated. To update all fields, provide a field mask of \"*\".  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.Channel` A representation of the Channel resource. A Channel is a resource on which event providers publish their events. The published events are delivered through the transport associated with the channel. Note that a channel is associated with exactly one event provider."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "channel",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.UpdateChannelRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_channel",
          "description": "Delete a single channel.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_delete_channel():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.DeleteChannelRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_channel(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Opt",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the channel to be deleted.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.Channel` A representation of the Channel resource. A Channel is a resource on which event providers publish their events. The published events are delivered through the transport associated with the channel. Note that a channel is associated with exactly one event provider."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.DeleteChannelRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_provider",
          "description": "Get a single Provider.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_get_provider():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.GetProviderRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_provider(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.GetProviderRequest, dict]]):\n        The request object. The r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the provider to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.types.Provider: A representation of the Provider resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.GetProviderRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_providers",
          "description": "List providers.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_list_providers():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.ListProvidersRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_providers(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.ListProvidersRe",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent of the provider to get.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.services.eventarc.pagers.ListProvidersAsyncPager: The response message for the ListProviders method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.ListProvidersRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_channel_connection",
          "description": "Get a single ChannelConnection.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_get_channel_connection():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.GetChannelConnectionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_channel_connection(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.GetChannelConnectionRequ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the channel connection to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.types.ChannelConnection: A representation of the ChannelConnection resource. A ChannelConnection is a resource which event providers create during the activation process to establish a connection between the provider and the subscriber channel."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.GetChannelConnectionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_channel_connections",
          "description": "List channel connections.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_list_channel_connections():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.ListChannelConnectionsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_channel_connections(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection from which to list channel connections.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.services.eventarc.pagers.ListChannelConnectionsAsyncPager: The response message for the ListChannelConnections method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.ListChannelConnectionsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_channel_connection",
          "description": "Create a new ChannelConnection in a particular\nproject and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_create_channel_connection():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        channel_connection = eventarc_v1.ChannelConnection()\n        channel_connection.name = \"name_value\"\n        channel_connection.channel = \"channel_value\"\n\n        request = eventarc_v1.CreateChannelConnectionRequest(\n            parent=\"parent_value\",\n            channel_connection=channel_connect",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection in which to add this channel connection.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "channel_connection": {
                "type": "google.cloud.eventarc_v1.types.ChannelConnection",
                "description": "Required. Channel connection to create.  This corresponds to the ``channel_connection`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "channel_connection_id": {
                "type": "str",
                "description": "Required. The user-provided ID to be assigned to the channel connection.  This corresponds to the ``channel_connection_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.ChannelConnection` A representation of the ChannelConnection resource. A ChannelConnection is a resource which event providers create during the activation process to establish a connection between the provider and the subscriber channel."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "channel_connection",
              "channel_connection_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.CreateChannelConnectionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_channel_connection",
          "description": "Delete a single ChannelConnection.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_delete_channel_connection():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.DeleteChannelConnectionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_channel_connection(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the channel connection to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.ChannelConnection` A representation of the ChannelConnection resource. A ChannelConnection is a resource which event providers create during the activation process to establish a connection between the provider and the subscriber channel."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.DeleteChannelConnectionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_google_channel_config",
          "description": "Get a GoogleChannelConfig\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_get_google_channel_config():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.GetGoogleChannelConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_google_channel_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.GetGoogleChannelConfig",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the config to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.types.GoogleChannelConfig: A GoogleChannelConfig is a resource that stores the custom settings respected by Eventarc first-party triggers in the matching region. Once configured, first-party event data will be protected using the specified custom managed encryption key instead of Google-managed encryption keys."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.GetGoogleChannelConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_google_channel_config",
          "description": "Update a single GoogleChannelConfig\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_update_google_channel_config():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        google_channel_config = eventarc_v1.GoogleChannelConfig()\n        google_channel_config.name = \"name_value\"\n\n        request = eventarc_v1.UpdateGoogleChannelConfigRequest(\n            google_channel_config=google_channel_config,\n        )\n\n        # Make the request\n        response = await client.update_google_channel_confi",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "google_channel_config": {
                "type": "google.cloud.eventarc_v1.types.GoogleChannelConfig",
                "description": "Required. The config to be updated. This corresponds to the ``google_channel_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The fields to be updated; only fields explicitly provided are updated. If no field mask is provided, all provided fields in the request are updated. To update all fields, provide a field mask of \"*\".  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.types.GoogleChannelConfig: A GoogleChannelConfig is a resource that stores the custom settings respected by Eventarc first-party triggers in the matching region. Once configured, first-party event data will be protected using the specified custom managed encryption key instead of Google-managed encryption keys."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "google_channel_config",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.UpdateGoogleChannelConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_message_bus",
          "description": "Get a single MessageBus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_get_message_bus():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.GetMessageBusRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_message_bus(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.GetMessageBusRequest, dict]]):\n        The request o",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the message bus to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.types.MessageBus: MessageBus for the messages flowing through the system. The admin has visibility and control over the messages being published and consumed and can restrict publishers and subscribers to only a subset of data available in the system by defining authorization policies."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.GetMessageBusRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_message_buses",
          "description": "List message buses.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_list_message_buses():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.ListMessageBusesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_message_buses(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection to list triggers on.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.services.eventarc.pagers.ListMessageBusesAsyncPager: The response message for the ListMessageBuses method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.ListMessageBusesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_message_bus_enrollments",
          "description": "List message bus enrollments.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_list_message_bus_enrollments():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.ListMessageBusEnrollmentsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_message_bus_enrollments(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optiona",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent message bus to list enrollments on.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.services.eventarc.pagers.ListMessageBusEnrollmentsAsyncPager: The response message for the ListMessageBusEnrollments method.\\`  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.ListMessageBusEnrollmentsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_message_bus",
          "description": "Create a new MessageBus in a particular project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_create_message_bus():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.CreateMessageBusRequest(\n            parent=\"parent_value\",\n            message_bus_id=\"message_bus_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_message_bus(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (a",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection in which to add this message bus.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "message_bus": {
                "type": "google.cloud.eventarc_v1.types.MessageBus",
                "description": "Required. The message bus to create. This corresponds to the ``message_bus`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "message_bus_id": {
                "type": "str",
                "description": "Required. The user-provided ID to be assigned to the MessageBus. It should match the format (^`a-z <[a-z0-9-]{0,61}[a-z0-9]>`__?$)  This corresponds to the ``message_bus_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.MessageBus` MessageBus for the messages flowing through the system. The admin has visibility and control over the messages being published and consumed and can restrict publishers and subscribers to only a subset of data available in the system by defining authorization policies."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "message_bus",
              "message_bus_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.CreateMessageBusRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_message_bus",
          "description": "Update a single message bus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_update_message_bus():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.UpdateMessageBusRequest(\n        )\n\n        # Make the request\n        operation = client.update_message_bus(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[goog",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "message_bus": {
                "type": "google.cloud.eventarc_v1.types.MessageBus",
                "description": "Required. The MessageBus to be updated.  This corresponds to the ``message_bus`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. The fields to be updated; only fields explicitly provided are updated. If no field mask is provided, all provided fields in the request are updated. To update all fields, provide a field mask of \"*\".  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.MessageBus` MessageBus for the messages flowing through the system. The admin has visibility and control over the messages being published and consumed and can restrict publishers and subscribers to only a subset of data available in the system by defining authorization policies."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "message_bus",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.UpdateMessageBusRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_message_bus",
          "description": "Delete a single message bus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_delete_message_bus():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.DeleteMessageBusRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_message_bus(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the MessageBus to be deleted.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "etag": {
                "type": "str",
                "description": "Optional. If provided, the MessageBus will only be deleted if the etag matches the current etag on the resource.  This corresponds to the ``etag`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.MessageBus` MessageBus for the messages flowing through the system. The admin has visibility and control over the messages being published and consumed and can restrict publishers and subscribers to only a subset of data available in the system by defining authorization policies."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "etag",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.DeleteMessageBusRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_enrollment",
          "description": "Get a single Enrollment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_get_enrollment():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.GetEnrollmentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_enrollment(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.GetEnrollmentRequest, dict]]):\n        The request obj",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the Enrollment to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.types.Enrollment: An enrollment represents a subscription for messages on a particular message bus. It defines a matching criteria for messages on the bus and the subscriber endpoint where matched messages should be delivered."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.GetEnrollmentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_enrollments",
          "description": "List Enrollments.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_list_enrollments():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.ListEnrollmentsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_enrollments(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.ListEnr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection to list triggers on.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.services.eventarc.pagers.ListEnrollmentsAsyncPager: The response message for the ListEnrollments method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.ListEnrollmentsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_enrollment",
          "description": "Create a new Enrollment in a particular project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_create_enrollment():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        enrollment = eventarc_v1.Enrollment()\n        enrollment.cel_match = \"cel_match_value\"\n        enrollment.message_bus = \"message_bus_value\"\n        enrollment.destination = \"destination_value\"\n\n        request = eventarc_v1.CreateEnrollmentRequest(\n            parent=\"parent_value\",\n            enrollment=enrol",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection in which to add this enrollment.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "enrollment": {
                "type": "google.cloud.eventarc_v1.types.Enrollment",
                "description": "Required. The enrollment to create. This corresponds to the ``enrollment`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "enrollment_id": {
                "type": "str",
                "description": "Required. The user-provided ID to be assigned to the Enrollment. It should match the format (^`a-z <[a-z0-9-]{0,61}[a-z0-9]>`__?$).  This corresponds to the ``enrollment_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.Enrollment` An enrollment represents a subscription for messages on a particular message bus. It defines a matching criteria for messages on the bus and the subscriber endpoint where matched messages should be delivered."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "enrollment",
              "enrollment_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.CreateEnrollmentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_enrollment",
          "description": "Update a single Enrollment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_update_enrollment():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        enrollment = eventarc_v1.Enrollment()\n        enrollment.cel_match = \"cel_match_value\"\n        enrollment.message_bus = \"message_bus_value\"\n        enrollment.destination = \"destination_value\"\n\n        request = eventarc_v1.UpdateEnrollmentRequest(\n            enrollment=enrollment,\n        )\n\n        # Make the request\n        operation = clie",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "enrollment": {
                "type": "google.cloud.eventarc_v1.types.Enrollment",
                "description": "Required. The Enrollment to be updated.  This corresponds to the ``enrollment`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. The fields to be updated; only fields explicitly provided are updated. If no field mask is provided, all provided fields in the request are updated. To update all fields, provide a field mask of \"*\".  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.Enrollment` An enrollment represents a subscription for messages on a particular message bus. It defines a matching criteria for messages on the bus and the subscriber endpoint where matched messages should be delivered."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "enrollment",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.UpdateEnrollmentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_enrollment",
          "description": "Delete a single Enrollment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_delete_enrollment():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.DeleteEnrollmentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_enrollment(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the Enrollment to be deleted.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "etag": {
                "type": "str",
                "description": "Optional. If provided, the Enrollment will only be deleted if the etag matches the current etag on the resource.  This corresponds to the ``etag`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.Enrollment` An enrollment represents a subscription for messages on a particular message bus. It defines a matching criteria for messages on the bus and the subscriber endpoint where matched messages should be delivered."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "etag",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.DeleteEnrollmentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_pipeline",
          "description": "Get a single Pipeline.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_get_pipeline():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.GetPipelineRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_pipeline(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.GetPipelineRequest, dict]]):\n        The request object. The r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the pipeline to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.types.Pipeline: A representation of the Pipeline resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.GetPipelineRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_pipelines",
          "description": "List pipelines.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_list_pipelines():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.ListPipelinesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_pipelines(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.ListPipelinesRe",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection to list pipelines on.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.services.eventarc.pagers.ListPipelinesAsyncPager: The response message for the ListPipelines method. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.ListPipelinesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_pipeline",
          "description": "Create a new Pipeline in a particular project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_create_pipeline():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        pipeline = eventarc_v1.Pipeline()\n        pipeline.destinations.http_endpoint.uri = \"uri_value\"\n\n        request = eventarc_v1.CreatePipelineRequest(\n            parent=\"parent_value\",\n            pipeline=pipeline,\n            pipeline_id=\"pipeline_id_value\",\n        )\n\n        # Make the request\n        operation",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection in which to add this pipeline.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "pipeline": {
                "type": "google.cloud.eventarc_v1.types.Pipeline",
                "description": "Required. The pipeline to create. This corresponds to the ``pipeline`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "pipeline_id": {
                "type": "str",
                "description": "Required. The user-provided ID to be assigned to the Pipeline.  This corresponds to the ``pipeline_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.Pipeline` A representation of the Pipeline resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "pipeline",
              "pipeline_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.CreatePipelineRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_pipeline",
          "description": "Update a single pipeline.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_update_pipeline():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        pipeline = eventarc_v1.Pipeline()\n        pipeline.destinations.http_endpoint.uri = \"uri_value\"\n\n        request = eventarc_v1.UpdatePipelineRequest(\n            pipeline=pipeline,\n        )\n\n        # Make the request\n        operation = client.update_pipeline(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        respons",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "pipeline": {
                "type": "google.cloud.eventarc_v1.types.Pipeline",
                "description": "Required. The Pipeline to be updated. This corresponds to the ``pipeline`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. The fields to be updated; only fields explicitly provided are updated. If no field mask is provided, all provided fields in the request are updated. To update all fields, provide a field mask of \"*\".  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.Pipeline` A representation of the Pipeline resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "pipeline",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.UpdatePipelineRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_pipeline",
          "description": "Delete a single pipeline.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_delete_pipeline():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.DeletePipelineRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_pipeline(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the Pipeline to be deleted.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "etag": {
                "type": "str",
                "description": "Optional. If provided, the Pipeline will only be deleted if the etag matches the current etag on the resource.  This corresponds to the ``etag`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.Pipeline` A representation of the Pipeline resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "etag",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.DeletePipelineRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_google_api_source",
          "description": "Get a single GoogleApiSource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_get_google_api_source():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.GetGoogleApiSourceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_google_api_source(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.eventarc_v1.types.GetGoogleApiSourceRequest, dic",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the google api source to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.types.GoogleApiSource: A GoogleApiSource represents a subscription of 1P events from a MessageBus."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.GetGoogleApiSourceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_google_api_sources",
          "description": "List GoogleApiSources.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_list_google_api_sources():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.ListGoogleApiSourcesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_google_api_sources(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.e",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection to list GoogleApiSources on.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.eventarc_v1.services.eventarc.pagers.ListGoogleApiSourcesAsyncPager: The response message for the ListGoogleApiSources method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.ListGoogleApiSourcesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_google_api_source",
          "description": "Create a new GoogleApiSource in a particular project\nand location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_create_google_api_source():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        google_api_source = eventarc_v1.GoogleApiSource()\n        google_api_source.destination = \"destination_value\"\n\n        request = eventarc_v1.CreateGoogleApiSourceRequest(\n            parent=\"parent_value\",\n            google_api_source=google_api_source,\n            google_api_source_id=\"google_api_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent collection in which to add this google api source.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "google_api_source": {
                "type": "google.cloud.eventarc_v1.types.GoogleApiSource",
                "description": "Required. The google api source to create.  This corresponds to the ``google_api_source`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "google_api_source_id": {
                "type": "str",
                "description": "Required. The user-provided ID to be assigned to the GoogleApiSource. It should match the format (^`a-z <[a-z0-9-]{0,61}[a-z0-9]>`__?$).  This corresponds to the ``google_api_source_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.GoogleApiSource` A GoogleApiSource represents a subscription of 1P events from a MessageBus."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "google_api_source",
              "google_api_source_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.CreateGoogleApiSourceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_google_api_source",
          "description": "Update a single GoogleApiSource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_update_google_api_source():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        google_api_source = eventarc_v1.GoogleApiSource()\n        google_api_source.destination = \"destination_value\"\n\n        request = eventarc_v1.UpdateGoogleApiSourceRequest(\n            google_api_source=google_api_source,\n        )\n\n        # Make the request\n        operation = client.update_google_api_source(request=request)\n\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "google_api_source": {
                "type": "google.cloud.eventarc_v1.types.GoogleApiSource",
                "description": "Required. The GoogleApiSource to be updated.  This corresponds to the ``google_api_source`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. The fields to be updated; only fields explicitly provided are updated. If no field mask is provided, all provided fields in the request are updated. To update all fields, provide a field mask of \"*\".  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.GoogleApiSource` A GoogleApiSource represents a subscription of 1P events from a MessageBus."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "google_api_source",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.UpdateGoogleApiSourceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_google_api_source",
          "description": "Delete a single GoogleApiSource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import eventarc_v1\n\n    async def sample_delete_google_api_source():\n        # Create a client\n        client = eventarc_v1.EventarcAsyncClient()\n\n        # Initialize request argument(s)\n        request = eventarc_v1.DeleteGoogleApiSourceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_google_api_source(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        pri",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the GoogleApiSource to be deleted.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "etag": {
                "type": "str",
                "description": "Optional. If provided, the MessageBus will only be deleted if the etag matches the current etag on the resource.  This corresponds to the ``etag`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.eventarc_v1.types.GoogleApiSource` A GoogleApiSource represents a subscription of 1P events from a MessageBus."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "etag",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "eventarc.DeleteGoogleApiSourceRequest"
          ]
        }
      }
    ]
  }
}