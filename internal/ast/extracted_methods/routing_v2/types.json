{
  "\\Users\\AMD\\vidhra\\internal\\ast\\google-cloud-python\\packages\\google-maps-routing\\google\\maps\\routing_v2\\types\\routes_service.py": [
    {
      "type": "function",
      "name": "ComputeRoutesRequest",
      "description": "ComputeRoutes request message.\n\nAttributes:\n    origin (google.maps.routing_v2.types.Waypoint):\n        Required. Origin waypoint.\n    destination (google.maps.routing_v2.types.Waypoint):\n        Required. Destination waypoint.\n    intermediates (MutableSequence[google.maps.routing_v2.types.Waypoint]):\n        Optional. A set of waypoints along the route\n        (excluding terminal points), for either stopping\n        at or passing by. Up to 25 intermediate\n        waypoints are supported.\n    travel_mode (google.maps.routing_v2.types.RouteTravelMode):\n        Optional. Specifies the mode of\n        transportation.\n    routing_preference (google.maps.routing_v2.types.RoutingPreference):\n        Optional. Specifies how to compute the route. The server\n        attempts to use the selected routing preference to compute\n        the route. If the routing preference results in an error or\n        an extra long latency, then an error is returned. You can\n        specify this option only when the ``travel_mode`` is\n ",
      "parameters": {
        "type": "object",
        "properties": {
          "origin": {
            "description": "Required. Origin waypoint.",
            "type": "object",
            "properties": {
              "location": {
                "type": "object",
                "properties": {
                  "cpe_uri": {
                    "description": "Deprecated. The CPE URI in `CPE format <https://cpe.mitre.org/specification/>`__",
                    "type": "string"
                  },
                  "version": {
                    "type": "object",
                    "properties": {
                      "epoch": {
                        "description": "Used to correct mistakes in the version numbering scheme.",
                        "type": "integer"
                      },
                      "name": {
                        "description": "Required only when version kind is NORMAL. The main part of the version name.",
                        "type": "string"
                      },
                      "revision": {
                        "description": "The iteration of the package build from the above version.",
                        "type": "string"
                      },
                      "inclusive": {
                        "description": "Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.",
                        "type": "boolean"
                      },
                      "kind": {
                        "type": "enum",
                        "name": "VersionKind",
                        "description": "Whether this is an ordinary package version or a sentinel\nMIN/MAX version.\n\nValues:\n    VERSION_KIND_UNSPECIFIED (0):\n        Unknown.\n    NORMAL (1):\n        A standard package version.\n    MINIMUM (2):\n        A special version representing negative\n        infinity.\n    MAXIMUM (3):\n        A special version representing positive\n        infinity.",
                        "values": {
                          "VERSION_KIND_UNSPECIFIED": {
                            "value": 0
                          },
                          "NORMAL": {
                            "value": 1
                          },
                          "MINIMUM": {
                            "value": 2
                          },
                          "MAXIMUM": {
                            "value": 3
                          }
                        }
                      },
                      "full_name": {
                        "description": "Human readable version string. This string is of the form <epoch>:<name>-<revision> and is only set when kind is NORMAL.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "kind"
                    ]
                  },
                  "path": {
                    "description": "The path from which we gathered that this package/version is installed.",
                    "type": "string"
                  }
                }
              },
              "place_id": {
                "description": "The POI Place ID associated with the waypoint.  This field is a member of `oneof`_ ``location_type``.",
                "type": "string"
              },
              "address": {
                "description": "Human readable address or a plus code. See https://plus.codes for details.  This field is a member of `oneof`_ ``location_type``.",
                "type": "string"
              },
              "via": {
                "description": "Marks this waypoint as a milestone rather a stopping point. For each non-via waypoint in the request, the response appends an entry to the [``legs``][google.maps.routing.v2.Route.legs] array to provide the details for stopovers on that leg of the trip. Set this value to true when you want the route to pass through this waypoint without stopping over. Via waypoints don't cause an entry to be added to the ``legs`` array, but they do route the journey through the waypoint. You can only set this value on waypoints that are intermediates. The request fails if you set this field on terminal waypoints. If ``ComputeRoutesRequest.optimize_waypoint_order`` is set to true then this field cannot be set to true; otherwise, the request fails.",
                "type": "boolean"
              },
              "vehicle_stopover": {
                "description": "Indicates that the waypoint is meant for vehicles to stop at, where the intention is to either pickup or drop-off. When you set this value, the calculated route won't include non-\\ ``via`` waypoints on roads that are unsuitable for pickup and drop-off. This option works only for ``DRIVE`` and ``TWO_WHEELER`` travel modes, and when the ``location_type`` is [``Location``][google.maps.routing.v2.Location].",
                "type": "boolean"
              },
              "side_of_road": {
                "description": "Indicates that the location of this waypoint is meant to have a preference for the vehicle to stop at a particular side of road. When you set this value, the route will pass through the location so that the vehicle can stop at the side of road that the location is biased towards from the center of the road. This option works only for ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                "type": "boolean"
              }
            }
          },
          "destination": {
            "description": "Required. Destination waypoint.",
            "type": "object",
            "properties": {
              "location": {
                "type": "object",
                "properties": {
                  "cpe_uri": {
                    "description": "Deprecated. The CPE URI in `CPE format <https://cpe.mitre.org/specification/>`__",
                    "type": "string"
                  },
                  "version": {
                    "type": "object",
                    "properties": {
                      "epoch": {
                        "description": "Used to correct mistakes in the version numbering scheme.",
                        "type": "integer"
                      },
                      "name": {
                        "description": "Required only when version kind is NORMAL. The main part of the version name.",
                        "type": "string"
                      },
                      "revision": {
                        "description": "The iteration of the package build from the above version.",
                        "type": "string"
                      },
                      "inclusive": {
                        "description": "Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.",
                        "type": "boolean"
                      },
                      "kind": {
                        "type": "enum",
                        "name": "VersionKind",
                        "description": "Whether this is an ordinary package version or a sentinel\nMIN/MAX version.\n\nValues:\n    VERSION_KIND_UNSPECIFIED (0):\n        Unknown.\n    NORMAL (1):\n        A standard package version.\n    MINIMUM (2):\n        A special version representing negative\n        infinity.\n    MAXIMUM (3):\n        A special version representing positive\n        infinity.",
                        "values": {
                          "VERSION_KIND_UNSPECIFIED": {
                            "value": 0
                          },
                          "NORMAL": {
                            "value": 1
                          },
                          "MINIMUM": {
                            "value": 2
                          },
                          "MAXIMUM": {
                            "value": 3
                          }
                        }
                      },
                      "full_name": {
                        "description": "Human readable version string. This string is of the form <epoch>:<name>-<revision> and is only set when kind is NORMAL.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "kind"
                    ]
                  },
                  "path": {
                    "description": "The path from which we gathered that this package/version is installed.",
                    "type": "string"
                  }
                }
              },
              "place_id": {
                "description": "The POI Place ID associated with the waypoint.  This field is a member of `oneof`_ ``location_type``.",
                "type": "string"
              },
              "address": {
                "description": "Human readable address or a plus code. See https://plus.codes for details.  This field is a member of `oneof`_ ``location_type``.",
                "type": "string"
              },
              "via": {
                "description": "Marks this waypoint as a milestone rather a stopping point. For each non-via waypoint in the request, the response appends an entry to the [``legs``][google.maps.routing.v2.Route.legs] array to provide the details for stopovers on that leg of the trip. Set this value to true when you want the route to pass through this waypoint without stopping over. Via waypoints don't cause an entry to be added to the ``legs`` array, but they do route the journey through the waypoint. You can only set this value on waypoints that are intermediates. The request fails if you set this field on terminal waypoints. If ``ComputeRoutesRequest.optimize_waypoint_order`` is set to true then this field cannot be set to true; otherwise, the request fails.",
                "type": "boolean"
              },
              "vehicle_stopover": {
                "description": "Indicates that the waypoint is meant for vehicles to stop at, where the intention is to either pickup or drop-off. When you set this value, the calculated route won't include non-\\ ``via`` waypoints on roads that are unsuitable for pickup and drop-off. This option works only for ``DRIVE`` and ``TWO_WHEELER`` travel modes, and when the ``location_type`` is [``Location``][google.maps.routing.v2.Location].",
                "type": "boolean"
              },
              "side_of_road": {
                "description": "Indicates that the location of this waypoint is meant to have a preference for the vehicle to stop at a particular side of road. When you set this value, the route will pass through the location so that the vehicle can stop at the side of road that the location is biased towards from the center of the road. This option works only for ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                "type": "boolean"
              }
            }
          },
          "intermediates": {
            "description": "Optional. A set of waypoints along the route (excluding terminal points), for either stopping at or passing by. Up to 25 intermediate waypoints are supported.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "location": {
                  "type": "object",
                  "properties": {
                    "cpe_uri": {
                      "description": "Deprecated. The CPE URI in `CPE format <https://cpe.mitre.org/specification/>`__",
                      "type": "string"
                    },
                    "version": {
                      "type": "object",
                      "properties": {
                        "epoch": {
                          "description": "Used to correct mistakes in the version numbering scheme.",
                          "type": "integer"
                        },
                        "name": {
                          "description": "Required only when version kind is NORMAL. The main part of the version name.",
                          "type": "string"
                        },
                        "revision": {
                          "description": "The iteration of the package build from the above version.",
                          "type": "string"
                        },
                        "inclusive": {
                          "description": "Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.",
                          "type": "boolean"
                        },
                        "kind": {
                          "type": "enum",
                          "name": "VersionKind",
                          "description": "Whether this is an ordinary package version or a sentinel\nMIN/MAX version.\n\nValues:\n    VERSION_KIND_UNSPECIFIED (0):\n        Unknown.\n    NORMAL (1):\n        A standard package version.\n    MINIMUM (2):\n        A special version representing negative\n        infinity.\n    MAXIMUM (3):\n        A special version representing positive\n        infinity.",
                          "values": {
                            "VERSION_KIND_UNSPECIFIED": {
                              "value": 0
                            },
                            "NORMAL": {
                              "value": 1
                            },
                            "MINIMUM": {
                              "value": 2
                            },
                            "MAXIMUM": {
                              "value": 3
                            }
                          }
                        },
                        "full_name": {
                          "description": "Human readable version string. This string is of the form <epoch>:<name>-<revision> and is only set when kind is NORMAL.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "kind"
                      ]
                    },
                    "path": {
                      "description": "The path from which we gathered that this package/version is installed.",
                      "type": "string"
                    }
                  }
                },
                "place_id": {
                  "description": "The POI Place ID associated with the waypoint.  This field is a member of `oneof`_ ``location_type``.",
                  "type": "string"
                },
                "address": {
                  "description": "Human readable address or a plus code. See https://plus.codes for details.  This field is a member of `oneof`_ ``location_type``.",
                  "type": "string"
                },
                "via": {
                  "description": "Marks this waypoint as a milestone rather a stopping point. For each non-via waypoint in the request, the response appends an entry to the [``legs``][google.maps.routing.v2.Route.legs] array to provide the details for stopovers on that leg of the trip. Set this value to true when you want the route to pass through this waypoint without stopping over. Via waypoints don't cause an entry to be added to the ``legs`` array, but they do route the journey through the waypoint. You can only set this value on waypoints that are intermediates. The request fails if you set this field on terminal waypoints. If ``ComputeRoutesRequest.optimize_waypoint_order`` is set to true then this field cannot be set to true; otherwise, the request fails.",
                  "type": "boolean"
                },
                "vehicle_stopover": {
                  "description": "Indicates that the waypoint is meant for vehicles to stop at, where the intention is to either pickup or drop-off. When you set this value, the calculated route won't include non-\\ ``via`` waypoints on roads that are unsuitable for pickup and drop-off. This option works only for ``DRIVE`` and ``TWO_WHEELER`` travel modes, and when the ``location_type`` is [``Location``][google.maps.routing.v2.Location].",
                  "type": "boolean"
                },
                "side_of_road": {
                  "description": "Indicates that the location of this waypoint is meant to have a preference for the vehicle to stop at a particular side of road. When you set this value, the route will pass through the location so that the vehicle can stop at the side of road that the location is biased towards from the center of the road. This option works only for ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                  "type": "boolean"
                }
              }
            }
          },
          "travel_mode": {
            "description": "A set of values used to specify the mode of travel. NOTE: ``WALK``,\n``BICYCLE``, and ``TWO_WHEELER`` routes are in beta and might\nsometimes be missing clear sidewalks, pedestrian paths, or bicycling\npaths. You must display this warning to the user for all walking,\nbicycling, and two-wheel routes that you display in your app.\n\nValues:\n    TRAVEL_MODE_UNSPECIFIED (0):\n        No travel mode specified. Defaults to ``DRIVE``.\n    DRIVE (1):\n        Travel by passenger car.\n    BICYCLE (2):\n        Travel by bicycle.\n    WALK (3):\n        Travel by walking.\n    TWO_WHEELER (4):\n        Two-wheeled, motorized vehicle. For example, motorcycle.\n        Note that this differs from the ``BICYCLE`` travel mode\n        which covers human-powered mode.\n    TRANSIT (7):\n        Travel by public transit routes, where\n        available.",
            "type": "enum",
            "name": "RouteTravelMode",
            "values": {
              "TRAVEL_MODE_UNSPECIFIED": {
                "value": 0
              },
              "DRIVE": {
                "value": 1
              },
              "BICYCLE": {
                "value": 2
              },
              "WALK": {
                "value": 3
              },
              "TWO_WHEELER": {
                "value": 4
              },
              "TRANSIT": {
                "value": 7
              }
            }
          },
          "routing_preference": {
            "description": "A set of values that specify factors to take into\nconsideration when calculating the route.\n\nValues:\n    ROUTING_PREFERENCE_UNSPECIFIED (0):\n        No routing preference specified. Default to\n        ``TRAFFIC_UNAWARE``.\n    TRAFFIC_UNAWARE (1):\n        Computes routes without taking live traffic conditions into\n        consideration. Suitable when traffic conditions don't matter\n        or are not applicable. Using this value produces the lowest\n        latency. Note: For\n        [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode]\n        ``DRIVE`` and ``TWO_WHEELER``, the route and duration chosen\n        are based on road network and average time-independent\n        traffic conditions, not current road conditions.\n        Consequently, routes may include roads that are temporarily\n        closed. Results for a given request may vary over time due\n        to changes in the road network, updated average traffic\n        conditions, and the distributed nature of the service.\n        Results may also",
            "type": "enum",
            "name": "RoutingPreference",
            "values": {
              "ROUTING_PREFERENCE_UNSPECIFIED": {
                "value": 0
              },
              "TRAFFIC_UNAWARE": {
                "value": 1
              },
              "TRAFFIC_AWARE": {
                "value": 2
              },
              "TRAFFIC_AWARE_OPTIMAL": {
                "value": 3
              }
            }
          },
          "polyline_quality": {
            "description": "A set of values that specify the quality of the polyline.\n\nValues:\n    POLYLINE_QUALITY_UNSPECIFIED (0):\n        No polyline quality preference specified. Defaults to\n        ``OVERVIEW``.\n    HIGH_QUALITY (1):\n        Specifies a high-quality polyline - which is composed using\n        more points than ``OVERVIEW``, at the cost of increased\n        response size. Use this value when you need more precision.\n    OVERVIEW (2):\n        Specifies an overview polyline - which is composed using a\n        small number of points. Use this value when displaying an\n        overview of the route. Using this option has a lower request\n        latency compared to using the ``HIGH_QUALITY`` option.",
            "type": "enum",
            "name": "PolylineQuality",
            "values": {
              "POLYLINE_QUALITY_UNSPECIFIED": {
                "value": 0
              },
              "HIGH_QUALITY": {
                "value": 1
              },
              "OVERVIEW": {
                "value": 2
              }
            }
          },
          "polyline_encoding": {
            "description": "Specifies the preferred type of polyline to be returned.\n\nValues:\n    POLYLINE_ENCODING_UNSPECIFIED (0):\n        No polyline type preference specified. Defaults to\n        ``ENCODED_POLYLINE``.\n    ENCODED_POLYLINE (1):\n        Specifies a polyline encoded using the `polyline encoding\n        algorithm </maps/documentation/utilities/polylinealgorithm>`__.\n    GEO_JSON_LINESTRING (2):\n        Specifies a polyline using the `GeoJSON LineString\n        format <https://tools.ietf.org/html/rfc7946#section-3.1.4>`__",
            "type": "enum",
            "name": "PolylineEncoding",
            "values": {
              "POLYLINE_ENCODING_UNSPECIFIED": {
                "value": 0
              },
              "ENCODED_POLYLINE": {
                "value": 1
              },
              "GEO_JSON_LINESTRING": {
                "value": 2
              }
            }
          },
          "departure_time": {
            "description": "Optional. The departure time. If you don't set this value, then this value defaults to the time that you made the request. NOTE: You can only specify a ``departure_time`` in the past when [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode] is set to ``TRANSIT``. Transit trips are available for up to 7 days in the past or 100 days in the future.",
            "type": "object",
            "reference": "google.protobuf.timestamp_pb2.Timestamp"
          },
          "arrival_time": {
            "description": "Optional. The arrival time. NOTE: Can only be set when [RouteTravelMode][google.maps.routing.v2.RouteTravelMode] is set to ``TRANSIT``. You can specify either ``departure_time`` or ``arrival_time``, but not both. Transit trips are available for up to 7 days in the past or 100 days in the future.",
            "type": "object",
            "reference": "google.protobuf.timestamp_pb2.Timestamp"
          },
          "compute_alternative_routes": {
            "description": "Optional. Specifies whether to calculate alternate routes in addition to the route. No alternative routes are returned for requests that have intermediate waypoints.",
            "type": "boolean"
          },
          "route_modifiers": {
            "description": "Optional. A set of conditions to satisfy that affect the way routes are calculated.",
            "type": "object",
            "properties": {
              "avoid_tolls": {
                "description": "When set to true, avoids toll roads where reasonable, giving preference to routes not containing toll roads. Applies only to the ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                "type": "boolean"
              },
              "avoid_highways": {
                "description": "When set to true, avoids highways where reasonable, giving preference to routes not containing highways. Applies only to the ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                "type": "boolean"
              },
              "avoid_ferries": {
                "description": "When set to true, avoids ferries where reasonable, giving preference to routes not containing ferries. Applies only to the ``DRIVE`` and\\ ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                "type": "boolean"
              },
              "avoid_indoor": {
                "description": "When set to true, avoids navigating indoors where reasonable, giving preference to routes not containing indoor navigation. Applies only to the ``WALK`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                "type": "boolean"
              },
              "vehicle_info": {
                "type": "object",
                "properties": {
                  "emission_type": {
                    "type": "enum",
                    "name": "VehicleEmissionType",
                    "description": "A set of values describing the vehicle's emission type. Applies only\nto the ``DRIVE``\n[``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].\n\nValues:\n    VEHICLE_EMISSION_TYPE_UNSPECIFIED (0):\n        No emission type specified. Default to ``GASOLINE``.\n    GASOLINE (1):\n        Gasoline/petrol fueled vehicle.\n    ELECTRIC (2):\n        Electricity powered vehicle.\n    HYBRID (3):\n        Hybrid fuel (such as gasoline + electric)\n        vehicle.\n    DIESEL (4):\n        Diesel fueled vehicle.",
                    "values": {
                      "VEHICLE_EMISSION_TYPE_UNSPECIFIED": {
                        "value": 0
                      },
                      "GASOLINE": {
                        "value": 1
                      },
                      "ELECTRIC": {
                        "value": 2
                      },
                      "HYBRID": {
                        "value": 3
                      },
                      "DIESEL": {
                        "value": 4
                      }
                    }
                  }
                }
              },
              "toll_passes": {
                "description": "Encapsulates information about toll passes. If toll passes are provided, the API tries to return the pass price. If toll passes are not provided, the API treats the toll pass as unknown and tries to return the cash price. Applies only to the ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                "type": "array",
                "items": {
                  "type": "enum",
                  "name": "TollPass",
                  "description": "List of toll passes around the world that we support.\n\nValues:\n    TOLL_PASS_UNSPECIFIED (0):\n        Not used. If this value is used, then the\n        request fails.\n    AU_ETOLL_TAG (82):\n        Sydney toll pass. See additional details at\n        https://www.myetoll.com.au.\n    AU_EWAY_TAG (83):\n        Sydney toll pass. See additional details at\n        https://www.tollpay.com.au.\n    AU_LINKT (2):\n        Australia-wide toll pass.\n        See additional details at\n        https://www.linkt.com.au/.\n    AR_TELEPASE (3):\n        Argentina toll pass. See additional details\n        at https://telepase.com.ar\n    BR_AUTO_EXPRESO (81):\n        Brazil toll pass. See additional details at\n        https://www.autoexpreso.com\n    BR_CONECTCAR (7):\n        Brazil toll pass. See additional details at\n        https://conectcar.com.\n    BR_MOVE_MAIS (8):\n        Brazil toll pass. See additional details at\n        https://movemais.com.\n    BR_PASSA_RAPIDO (88):\n        Brazil toll pass. See additional details at\n      ",
                  "values": {
                    "TOLL_PASS_UNSPECIFIED": {
                      "value": 0
                    },
                    "AU_ETOLL_TAG": {
                      "value": 82
                    },
                    "AU_EWAY_TAG": {
                      "value": 83
                    },
                    "AU_LINKT": {
                      "value": 2
                    },
                    "AR_TELEPASE": {
                      "value": 3
                    },
                    "BR_AUTO_EXPRESO": {
                      "value": 81
                    },
                    "BR_CONECTCAR": {
                      "value": 7
                    },
                    "BR_MOVE_MAIS": {
                      "value": 8
                    },
                    "BR_PASSA_RAPIDO": {
                      "value": 88
                    },
                    "BR_SEM_PARAR": {
                      "value": 9
                    },
                    "BR_TAGGY": {
                      "value": 10
                    },
                    "BR_VELOE": {
                      "value": 11
                    },
                    "CA_US_AKWASASNE_SEAWAY_CORPORATE_CARD": {
                      "value": 84
                    },
                    "CA_US_AKWASASNE_SEAWAY_TRANSIT_CARD": {
                      "value": 85
                    },
                    "CA_US_BLUE_WATER_EDGE_PASS": {
                      "value": 18
                    },
                    "CA_US_CONNEXION": {
                      "value": 19
                    },
                    "CA_US_NEXUS_CARD": {
                      "value": 20
                    },
                    "ID_E_TOLL": {
                      "value": 16
                    },
                    "IN_FASTAG": {
                      "value": 78
                    },
                    "IN_LOCAL_HP_PLATE_EXEMPT": {
                      "value": 79
                    },
                    "JP_ETC": {
                      "value": 98
                    },
                    "JP_ETC2": {
                      "value": 99
                    },
                    "MX_IAVE": {
                      "value": 90
                    },
                    "MX_PASE": {
                      "value": 91
                    },
                    "MX_QUICKPASS": {
                      "value": 93
                    },
                    "MX_SISTEMA_TELEPEAJE_CHIHUAHUA": {
                      "value": 89
                    },
                    "MX_TAG_IAVE": {
                      "value": 12
                    },
                    "MX_TAG_TELEVIA": {
                      "value": 13
                    },
                    "MX_TELEVIA": {
                      "value": 92
                    },
                    "MX_VIAPASS": {
                      "value": 14
                    },
                    "US_AL_FREEDOM_PASS": {
                      "value": 21
                    },
                    "US_AK_ANTON_ANDERSON_TUNNEL_BOOK_OF_10_TICKETS": {
                      "value": 22
                    },
                    "US_CA_FASTRAK": {
                      "value": 4
                    },
                    "US_CA_FASTRAK_CAV_STICKER": {
                      "value": 86
                    },
                    "US_CO_EXPRESSTOLL": {
                      "value": 23
                    },
                    "US_CO_GO_PASS": {
                      "value": 24
                    },
                    "US_DE_EZPASSDE": {
                      "value": 25
                    },
                    "US_FL_BOB_SIKES_TOLL_BRIDGE_PASS": {
                      "value": 65
                    },
                    "US_FL_DUNES_COMMUNITY_DEVELOPMENT_DISTRICT_EXPRESSCARD": {
                      "value": 66
                    },
                    "US_FL_EPASS": {
                      "value": 67
                    },
                    "US_FL_GIBA_TOLL_PASS": {
                      "value": 68
                    },
                    "US_FL_LEEWAY": {
                      "value": 69
                    },
                    "US_FL_SUNPASS": {
                      "value": 70
                    },
                    "US_FL_SUNPASS_PRO": {
                      "value": 71
                    },
                    "US_IL_EZPASSIL": {
                      "value": 73
                    },
                    "US_IL_IPASS": {
                      "value": 72
                    },
                    "US_IN_EZPASSIN": {
                      "value": 26
                    },
                    "US_KS_BESTPASS_HORIZON": {
                      "value": 27
                    },
                    "US_KS_KTAG": {
                      "value": 28
                    },
                    "US_KS_NATIONALPASS": {
                      "value": 29
                    },
                    "US_KS_PREPASS_ELITEPASS": {
                      "value": 30
                    },
                    "US_KY_RIVERLINK": {
                      "value": 31
                    },
                    "US_LA_GEAUXPASS": {
                      "value": 32
                    },
                    "US_LA_TOLL_TAG": {
                      "value": 33
                    },
                    "US_MA_EZPASSMA": {
                      "value": 6
                    },
                    "US_MD_EZPASSMD": {
                      "value": 34
                    },
                    "US_ME_EZPASSME": {
                      "value": 35
                    },
                    "US_MI_AMBASSADOR_BRIDGE_PREMIER_COMMUTER_CARD": {
                      "value": 36
                    },
                    "US_MI_BCPASS": {
                      "value": 94
                    },
                    "US_MI_GROSSE_ILE_TOLL_BRIDGE_PASS_TAG": {
                      "value": 37
                    },
                    "US_MI_IQ_PROX_CARD": {
                      "value": 38
                    },
                    "US_MI_IQ_TAG": {
                      "value": 95
                    },
                    "US_MI_MACKINAC_BRIDGE_MAC_PASS": {
                      "value": 39
                    },
                    "US_MI_NEXPRESS_TOLL": {
                      "value": 40
                    },
                    "US_MN_EZPASSMN": {
                      "value": 41
                    },
                    "US_NC_EZPASSNC": {
                      "value": 42
                    },
                    "US_NC_PEACH_PASS": {
                      "value": 87
                    },
                    "US_NC_QUICK_PASS": {
                      "value": 43
                    },
                    "US_NH_EZPASSNH": {
                      "value": 80
                    },
                    "US_NJ_DOWNBEACH_EXPRESS_PASS": {
                      "value": 75
                    },
                    "US_NJ_EZPASSNJ": {
                      "value": 74
                    },
                    "US_NY_EXPRESSPASS": {
                      "value": 76
                    },
                    "US_NY_EZPASSNY": {
                      "value": 77
                    },
                    "US_OH_EZPASSOH": {
                      "value": 44
                    },
                    "US_PA_EZPASSPA": {
                      "value": 45
                    },
                    "US_RI_EZPASSRI": {
                      "value": 46
                    },
                    "US_SC_PALPASS": {
                      "value": 47
                    },
                    "US_TX_AVI_TAG": {
                      "value": 97
                    },
                    "US_TX_BANCPASS": {
                      "value": 48
                    },
                    "US_TX_DEL_RIO_PASS": {
                      "value": 49
                    },
                    "US_TX_EFAST_PASS": {
                      "value": 50
                    },
                    "US_TX_EAGLE_PASS_EXPRESS_CARD": {
                      "value": 51
                    },
                    "US_TX_EPTOLL": {
                      "value": 52
                    },
                    "US_TX_EZ_CROSS": {
                      "value": 53
                    },
                    "US_TX_EZTAG": {
                      "value": 54
                    },
                    "US_TX_FUEGO_TAG": {
                      "value": 96
                    },
                    "US_TX_LAREDO_TRADE_TAG": {
                      "value": 55
                    },
                    "US_TX_PLUSPASS": {
                      "value": 56
                    },
                    "US_TX_TOLLTAG": {
                      "value": 57
                    },
                    "US_TX_TXTAG": {
                      "value": 58
                    },
                    "US_TX_XPRESS_CARD": {
                      "value": 59
                    },
                    "US_UT_ADAMS_AVE_PARKWAY_EXPRESSCARD": {
                      "value": 60
                    },
                    "US_VA_EZPASSVA": {
                      "value": 61
                    },
                    "US_WA_BREEZEBY": {
                      "value": 17
                    },
                    "US_WA_GOOD_TO_GO": {
                      "value": 1
                    },
                    "US_WV_EZPASSWV": {
                      "value": 62
                    },
                    "US_WV_MEMORIAL_BRIDGE_TICKETS": {
                      "value": 63
                    },
                    "US_WV_MOV_PASS": {
                      "value": 100
                    },
                    "US_WV_NEWELL_TOLL_BRIDGE_TICKET": {
                      "value": 64
                    }
                  }
                }
              }
            }
          },
          "language_code": {
            "description": "Optional. The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see `Unicode Locale Identifier <http://www.unicode.org/reports/tr35/#Unicode_locale_identifier>`__. See `Language Support <https://developers.google.com/maps/faq#languagesupport>`__ for the list of supported languages. When you don't provide this value, the display language is inferred from the location of the route request.",
            "type": "string"
          },
          "region_code": {
            "description": "Optional. The region code, specified as a ccTLD (\"top-level domain\") two-character value. For more information see `Country code top-level domains <https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains>`__.",
            "type": "string"
          },
          "units": {
            "description": "A set of values that specify the unit of measure used in the\ndisplay.\n\nValues:\n    UNITS_UNSPECIFIED (0):\n        Units of measure not specified. Defaults to\n        the unit of measure inferred from the request.\n    METRIC (1):\n        Metric units of measure.\n    IMPERIAL (2):\n        Imperial (English) units of measure.",
            "type": "enum",
            "name": "Units",
            "values": {
              "UNITS_UNSPECIFIED": {
                "value": 0
              },
              "METRIC": {
                "value": 1
              },
              "IMPERIAL": {
                "value": 2
              }
            }
          },
          "optimize_waypoint_order": {
            "description": "Optional. If set to true, the service attempts to minimize the overall cost of the route by re-ordering the specified intermediate waypoints. The request fails if any of the intermediate waypoints is a ``via`` waypoint. Use ``ComputeRoutesResponse.Routes.optimized_intermediate_waypoint_index`` to find the new ordering. If ``ComputeRoutesResponseroutes.optimized_intermediate_waypoint_index`` is not requested in the ``X-Goog-FieldMask`` header, the request fails. If ``optimize_waypoint_order`` is set to false, ``ComputeRoutesResponse.optimized_intermediate_waypoint_index`` will be empty.",
            "type": "boolean"
          },
          "requested_reference_routes": {
            "description": "Optional. Specifies what reference routes to calculate as part of the request in addition to the default route. A reference route is a route with a different route calculation objective than the default route. For example a ``FUEL_EFFICIENT`` reference route calculation takes into account various parameters that would generate an optimal fuel efficient route.",
            "type": "array",
            "items": {
              "type": "enum",
              "name": "ReferenceRoute",
              "description": "A supported reference route on the ComputeRoutesRequest.\n\nValues:\n    REFERENCE_ROUTE_UNSPECIFIED (0):\n        Not used. Requests containing this value\n        fail.\n    FUEL_EFFICIENT (1):\n        Fuel efficient route. Routes labeled with\n        this value are determined to be optimized for\n        parameters such as fuel consumption.",
              "values": {
                "REFERENCE_ROUTE_UNSPECIFIED": {
                  "value": 0
                },
                "FUEL_EFFICIENT": {
                  "value": 1
                }
              }
            }
          },
          "extra_computations": {
            "description": "Optional. A list of extra computations which may be used to complete the request. Note: These extra computations may return extra fields on the response. These extra fields must also be specified in the field mask to be returned in the response.",
            "type": "array",
            "items": {
              "type": "enum",
              "name": "ExtraComputation",
              "description": "Extra computations to perform while completing the request.\n\nValues:\n    EXTRA_COMPUTATION_UNSPECIFIED (0):\n        Not used. Requests containing this value will\n        fail.\n    TOLLS (1):\n        Toll information for the matrix element(s).",
              "values": {
                "EXTRA_COMPUTATION_UNSPECIFIED": {
                  "value": 0
                },
                "TOLLS": {
                  "value": 1
                }
              }
            }
          },
          "traffic_model": {
            "description": "Specifies the assumptions to use when calculating time in traffic.\nThis setting affects the value returned in the ``duration`` field in\nthe response, which contains the predicted time in traffic based on\nhistorical averages.\n\nValues:\n    TRAFFIC_MODEL_UNSPECIFIED (0):\n        Unused. If specified, will default to ``BEST_GUESS``.\n    BEST_GUESS (1):\n        Indicates that the returned ``duration`` should be the best\n        estimate of travel time given what is known about both\n        historical traffic conditions and live traffic. Live traffic\n        becomes more important the closer the ``departure_time`` is\n        to now.\n    PESSIMISTIC (2):\n        Indicates that the returned duration should\n        be longer than the actual travel time on most\n        days, though occasional days with particularly\n        bad traffic conditions may exceed this value.\n    OPTIMISTIC (3):\n        Indicates that the returned duration should\n        be shorter than the actual travel time on most\n        days, though occas",
            "type": "enum",
            "name": "TrafficModel",
            "values": {
              "TRAFFIC_MODEL_UNSPECIFIED": {
                "value": 0
              },
              "BEST_GUESS": {
                "value": 1
              },
              "PESSIMISTIC": {
                "value": 2
              },
              "OPTIMISTIC": {
                "value": 3
              }
            }
          },
          "transit_preferences": {
            "description": "Optional. Specifies preferences that influence the route returned for ``TRANSIT`` routes. NOTE: You can only specify a ``transit_preferences`` when [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode] is set to ``TRANSIT``.",
            "type": "object",
            "properties": {
              "allowed_travel_modes": {
                "description": "A set of travel modes to use when getting a ``TRANSIT`` route. Defaults to all supported modes of travel.",
                "type": "array",
                "items": {
                  "type": "enum",
                  "name": "TransitTravelMode",
                  "description": "A set of values used to specify the mode of transit.\n\nValues:\n    TRANSIT_TRAVEL_MODE_UNSPECIFIED (0):\n        No transit travel mode specified.\n    BUS (1):\n        Travel by bus.\n    SUBWAY (2):\n        Travel by subway.\n    TRAIN (3):\n        Travel by train.\n    LIGHT_RAIL (4):\n        Travel by light rail or tram.\n    RAIL (5):\n        Travel by rail. This is equivalent to a combination of\n        ``SUBWAY``, ``TRAIN``, and ``LIGHT_RAIL``.",
                  "values": {
                    "TRANSIT_TRAVEL_MODE_UNSPECIFIED": {
                      "value": 0
                    },
                    "BUS": {
                      "value": 1
                    },
                    "SUBWAY": {
                      "value": 2
                    },
                    "TRAIN": {
                      "value": 3
                    },
                    "LIGHT_RAIL": {
                      "value": 4
                    },
                    "RAIL": {
                      "value": 5
                    }
                  }
                }
              },
              "routing_preference": {
                "type": "enum",
                "name": "TransitRoutingPreference",
                "description": "Specifies routing preferences for transit routes.\n\nValues:\n    TRANSIT_ROUTING_PREFERENCE_UNSPECIFIED (0):\n        No preference specified.\n    LESS_WALKING (1):\n        Indicates that the calculated route should\n        prefer limited amounts of walking.\n    FEWER_TRANSFERS (2):\n        Indicates that the calculated route should\n        prefer a limited number of transfers.",
                "values": {
                  "TRANSIT_ROUTING_PREFERENCE_UNSPECIFIED": {
                    "value": 0
                  },
                  "LESS_WALKING": {
                    "value": 1
                  },
                  "FEWER_TRANSFERS": {
                    "value": 2
                  }
                }
              }
            }
          }
        },
        "required": [
          "origin",
          "destination"
        ]
      }
    },
    {
      "type": "function",
      "name": "ComputeRouteMatrixRequest",
      "description": "ComputeRouteMatrix request message\n\nAttributes:\n    origins (MutableSequence[google.maps.routing_v2.types.RouteMatrixOrigin]):\n        Required. Array of origins, which determines the rows of the\n        response matrix. Several size restrictions apply to the\n        cardinality of origins and destinations:\n\n        -  The sum of the number of origins + the number of\n           destinations specified as either ``place_id`` or\n           ``address`` must be no greater than 50.\n        -  The product of number of origins \u00d7 number of destinations\n           must be no greater than 625 in any case.\n        -  The product of the number of origins \u00d7 number of\n           destinations must be no greater than 100 if\n           routing_preference is set to ``TRAFFIC_AWARE_OPTIMAL``.\n        -  The product of the number of origins \u00d7 number of\n           destinations must be no greater than 100 if travel_mode\n           is set to ``TRANSIT``.\n    destinations (MutableSequence[google.maps.routing_v2.types.RouteMatrixDesti",
      "parameters": {
        "type": "object",
        "properties": {
          "origins": {
            "description": "Required. Array of origins, which determines the rows of the response matrix. Several size restrictions apply to the cardinality of origins and destinations:  -  The sum of the number of origins + the number of destinations specified as either ``place_id`` or ``address`` must be no greater than 50. -  The product of number of origins \u00d7 number of destinations must be no greater than 625 in any case. -  The product of the number of origins \u00d7 number of destinations must be no greater than 100 if routing_preference is set to ``TRAFFIC_AWARE_OPTIMAL``. -  The product of the number of origins \u00d7 number of destinations must be no greater than 100 if travel_mode is set to ``TRANSIT``.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "waypoint": {
                  "type": "object",
                  "properties": {
                    "location": {
                      "type": "object",
                      "properties": {
                        "cpe_uri": {
                          "description": "Deprecated. The CPE URI in `CPE format <https://cpe.mitre.org/specification/>`__",
                          "type": "string"
                        },
                        "version": {
                          "type": "object",
                          "properties": {
                            "epoch": {
                              "description": "Used to correct mistakes in the version numbering scheme.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Required only when version kind is NORMAL. The main part of the version name.",
                              "type": "string"
                            },
                            "revision": {
                              "description": "The iteration of the package build from the above version.",
                              "type": "string"
                            },
                            "inclusive": {
                              "description": "Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.",
                              "type": "boolean"
                            },
                            "kind": {
                              "type": "enum",
                              "name": "VersionKind",
                              "description": "Whether this is an ordinary package version or a sentinel\nMIN/MAX version.\n\nValues:\n    VERSION_KIND_UNSPECIFIED (0):\n        Unknown.\n    NORMAL (1):\n        A standard package version.\n    MINIMUM (2):\n        A special version representing negative\n        infinity.\n    MAXIMUM (3):\n        A special version representing positive\n        infinity.",
                              "values": {
                                "VERSION_KIND_UNSPECIFIED": {
                                  "value": 0
                                },
                                "NORMAL": {
                                  "value": 1
                                },
                                "MINIMUM": {
                                  "value": 2
                                },
                                "MAXIMUM": {
                                  "value": 3
                                }
                              }
                            },
                            "full_name": {
                              "description": "Human readable version string. This string is of the form <epoch>:<name>-<revision> and is only set when kind is NORMAL.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "kind"
                          ]
                        },
                        "path": {
                          "description": "The path from which we gathered that this package/version is installed.",
                          "type": "string"
                        }
                      }
                    },
                    "place_id": {
                      "description": "The POI Place ID associated with the waypoint.  This field is a member of `oneof`_ ``location_type``.",
                      "type": "string"
                    },
                    "address": {
                      "description": "Human readable address or a plus code. See https://plus.codes for details.  This field is a member of `oneof`_ ``location_type``.",
                      "type": "string"
                    },
                    "via": {
                      "description": "Marks this waypoint as a milestone rather a stopping point. For each non-via waypoint in the request, the response appends an entry to the [``legs``][google.maps.routing.v2.Route.legs] array to provide the details for stopovers on that leg of the trip. Set this value to true when you want the route to pass through this waypoint without stopping over. Via waypoints don't cause an entry to be added to the ``legs`` array, but they do route the journey through the waypoint. You can only set this value on waypoints that are intermediates. The request fails if you set this field on terminal waypoints. If ``ComputeRoutesRequest.optimize_waypoint_order`` is set to true then this field cannot be set to true; otherwise, the request fails.",
                      "type": "boolean"
                    },
                    "vehicle_stopover": {
                      "description": "Indicates that the waypoint is meant for vehicles to stop at, where the intention is to either pickup or drop-off. When you set this value, the calculated route won't include non-\\ ``via`` waypoints on roads that are unsuitable for pickup and drop-off. This option works only for ``DRIVE`` and ``TWO_WHEELER`` travel modes, and when the ``location_type`` is [``Location``][google.maps.routing.v2.Location].",
                      "type": "boolean"
                    },
                    "side_of_road": {
                      "description": "Indicates that the location of this waypoint is meant to have a preference for the vehicle to stop at a particular side of road. When you set this value, the route will pass through the location so that the vehicle can stop at the side of road that the location is biased towards from the center of the road. This option works only for ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                      "type": "boolean"
                    }
                  }
                },
                "route_modifiers": {
                  "type": "object",
                  "properties": {
                    "avoid_tolls": {
                      "description": "When set to true, avoids toll roads where reasonable, giving preference to routes not containing toll roads. Applies only to the ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                      "type": "boolean"
                    },
                    "avoid_highways": {
                      "description": "When set to true, avoids highways where reasonable, giving preference to routes not containing highways. Applies only to the ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                      "type": "boolean"
                    },
                    "avoid_ferries": {
                      "description": "When set to true, avoids ferries where reasonable, giving preference to routes not containing ferries. Applies only to the ``DRIVE`` and\\ ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                      "type": "boolean"
                    },
                    "avoid_indoor": {
                      "description": "When set to true, avoids navigating indoors where reasonable, giving preference to routes not containing indoor navigation. Applies only to the ``WALK`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                      "type": "boolean"
                    },
                    "vehicle_info": {
                      "type": "object",
                      "properties": {
                        "emission_type": {
                          "type": "enum",
                          "name": "VehicleEmissionType",
                          "description": "A set of values describing the vehicle's emission type. Applies only\nto the ``DRIVE``\n[``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].\n\nValues:\n    VEHICLE_EMISSION_TYPE_UNSPECIFIED (0):\n        No emission type specified. Default to ``GASOLINE``.\n    GASOLINE (1):\n        Gasoline/petrol fueled vehicle.\n    ELECTRIC (2):\n        Electricity powered vehicle.\n    HYBRID (3):\n        Hybrid fuel (such as gasoline + electric)\n        vehicle.\n    DIESEL (4):\n        Diesel fueled vehicle.",
                          "values": {
                            "VEHICLE_EMISSION_TYPE_UNSPECIFIED": {
                              "value": 0
                            },
                            "GASOLINE": {
                              "value": 1
                            },
                            "ELECTRIC": {
                              "value": 2
                            },
                            "HYBRID": {
                              "value": 3
                            },
                            "DIESEL": {
                              "value": 4
                            }
                          }
                        }
                      }
                    },
                    "toll_passes": {
                      "description": "Encapsulates information about toll passes. If toll passes are provided, the API tries to return the pass price. If toll passes are not provided, the API treats the toll pass as unknown and tries to return the cash price. Applies only to the ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                      "type": "array",
                      "items": {
                        "type": "enum",
                        "name": "TollPass",
                        "description": "List of toll passes around the world that we support.\n\nValues:\n    TOLL_PASS_UNSPECIFIED (0):\n        Not used. If this value is used, then the\n        request fails.\n    AU_ETOLL_TAG (82):\n        Sydney toll pass. See additional details at\n        https://www.myetoll.com.au.\n    AU_EWAY_TAG (83):\n        Sydney toll pass. See additional details at\n        https://www.tollpay.com.au.\n    AU_LINKT (2):\n        Australia-wide toll pass.\n        See additional details at\n        https://www.linkt.com.au/.\n    AR_TELEPASE (3):\n        Argentina toll pass. See additional details\n        at https://telepase.com.ar\n    BR_AUTO_EXPRESO (81):\n        Brazil toll pass. See additional details at\n        https://www.autoexpreso.com\n    BR_CONECTCAR (7):\n        Brazil toll pass. See additional details at\n        https://conectcar.com.\n    BR_MOVE_MAIS (8):\n        Brazil toll pass. See additional details at\n        https://movemais.com.\n    BR_PASSA_RAPIDO (88):\n        Brazil toll pass. See additional details at\n      ",
                        "values": {
                          "TOLL_PASS_UNSPECIFIED": {
                            "value": 0
                          },
                          "AU_ETOLL_TAG": {
                            "value": 82
                          },
                          "AU_EWAY_TAG": {
                            "value": 83
                          },
                          "AU_LINKT": {
                            "value": 2
                          },
                          "AR_TELEPASE": {
                            "value": 3
                          },
                          "BR_AUTO_EXPRESO": {
                            "value": 81
                          },
                          "BR_CONECTCAR": {
                            "value": 7
                          },
                          "BR_MOVE_MAIS": {
                            "value": 8
                          },
                          "BR_PASSA_RAPIDO": {
                            "value": 88
                          },
                          "BR_SEM_PARAR": {
                            "value": 9
                          },
                          "BR_TAGGY": {
                            "value": 10
                          },
                          "BR_VELOE": {
                            "value": 11
                          },
                          "CA_US_AKWASASNE_SEAWAY_CORPORATE_CARD": {
                            "value": 84
                          },
                          "CA_US_AKWASASNE_SEAWAY_TRANSIT_CARD": {
                            "value": 85
                          },
                          "CA_US_BLUE_WATER_EDGE_PASS": {
                            "value": 18
                          },
                          "CA_US_CONNEXION": {
                            "value": 19
                          },
                          "CA_US_NEXUS_CARD": {
                            "value": 20
                          },
                          "ID_E_TOLL": {
                            "value": 16
                          },
                          "IN_FASTAG": {
                            "value": 78
                          },
                          "IN_LOCAL_HP_PLATE_EXEMPT": {
                            "value": 79
                          },
                          "JP_ETC": {
                            "value": 98
                          },
                          "JP_ETC2": {
                            "value": 99
                          },
                          "MX_IAVE": {
                            "value": 90
                          },
                          "MX_PASE": {
                            "value": 91
                          },
                          "MX_QUICKPASS": {
                            "value": 93
                          },
                          "MX_SISTEMA_TELEPEAJE_CHIHUAHUA": {
                            "value": 89
                          },
                          "MX_TAG_IAVE": {
                            "value": 12
                          },
                          "MX_TAG_TELEVIA": {
                            "value": 13
                          },
                          "MX_TELEVIA": {
                            "value": 92
                          },
                          "MX_VIAPASS": {
                            "value": 14
                          },
                          "US_AL_FREEDOM_PASS": {
                            "value": 21
                          },
                          "US_AK_ANTON_ANDERSON_TUNNEL_BOOK_OF_10_TICKETS": {
                            "value": 22
                          },
                          "US_CA_FASTRAK": {
                            "value": 4
                          },
                          "US_CA_FASTRAK_CAV_STICKER": {
                            "value": 86
                          },
                          "US_CO_EXPRESSTOLL": {
                            "value": 23
                          },
                          "US_CO_GO_PASS": {
                            "value": 24
                          },
                          "US_DE_EZPASSDE": {
                            "value": 25
                          },
                          "US_FL_BOB_SIKES_TOLL_BRIDGE_PASS": {
                            "value": 65
                          },
                          "US_FL_DUNES_COMMUNITY_DEVELOPMENT_DISTRICT_EXPRESSCARD": {
                            "value": 66
                          },
                          "US_FL_EPASS": {
                            "value": 67
                          },
                          "US_FL_GIBA_TOLL_PASS": {
                            "value": 68
                          },
                          "US_FL_LEEWAY": {
                            "value": 69
                          },
                          "US_FL_SUNPASS": {
                            "value": 70
                          },
                          "US_FL_SUNPASS_PRO": {
                            "value": 71
                          },
                          "US_IL_EZPASSIL": {
                            "value": 73
                          },
                          "US_IL_IPASS": {
                            "value": 72
                          },
                          "US_IN_EZPASSIN": {
                            "value": 26
                          },
                          "US_KS_BESTPASS_HORIZON": {
                            "value": 27
                          },
                          "US_KS_KTAG": {
                            "value": 28
                          },
                          "US_KS_NATIONALPASS": {
                            "value": 29
                          },
                          "US_KS_PREPASS_ELITEPASS": {
                            "value": 30
                          },
                          "US_KY_RIVERLINK": {
                            "value": 31
                          },
                          "US_LA_GEAUXPASS": {
                            "value": 32
                          },
                          "US_LA_TOLL_TAG": {
                            "value": 33
                          },
                          "US_MA_EZPASSMA": {
                            "value": 6
                          },
                          "US_MD_EZPASSMD": {
                            "value": 34
                          },
                          "US_ME_EZPASSME": {
                            "value": 35
                          },
                          "US_MI_AMBASSADOR_BRIDGE_PREMIER_COMMUTER_CARD": {
                            "value": 36
                          },
                          "US_MI_BCPASS": {
                            "value": 94
                          },
                          "US_MI_GROSSE_ILE_TOLL_BRIDGE_PASS_TAG": {
                            "value": 37
                          },
                          "US_MI_IQ_PROX_CARD": {
                            "value": 38
                          },
                          "US_MI_IQ_TAG": {
                            "value": 95
                          },
                          "US_MI_MACKINAC_BRIDGE_MAC_PASS": {
                            "value": 39
                          },
                          "US_MI_NEXPRESS_TOLL": {
                            "value": 40
                          },
                          "US_MN_EZPASSMN": {
                            "value": 41
                          },
                          "US_NC_EZPASSNC": {
                            "value": 42
                          },
                          "US_NC_PEACH_PASS": {
                            "value": 87
                          },
                          "US_NC_QUICK_PASS": {
                            "value": 43
                          },
                          "US_NH_EZPASSNH": {
                            "value": 80
                          },
                          "US_NJ_DOWNBEACH_EXPRESS_PASS": {
                            "value": 75
                          },
                          "US_NJ_EZPASSNJ": {
                            "value": 74
                          },
                          "US_NY_EXPRESSPASS": {
                            "value": 76
                          },
                          "US_NY_EZPASSNY": {
                            "value": 77
                          },
                          "US_OH_EZPASSOH": {
                            "value": 44
                          },
                          "US_PA_EZPASSPA": {
                            "value": 45
                          },
                          "US_RI_EZPASSRI": {
                            "value": 46
                          },
                          "US_SC_PALPASS": {
                            "value": 47
                          },
                          "US_TX_AVI_TAG": {
                            "value": 97
                          },
                          "US_TX_BANCPASS": {
                            "value": 48
                          },
                          "US_TX_DEL_RIO_PASS": {
                            "value": 49
                          },
                          "US_TX_EFAST_PASS": {
                            "value": 50
                          },
                          "US_TX_EAGLE_PASS_EXPRESS_CARD": {
                            "value": 51
                          },
                          "US_TX_EPTOLL": {
                            "value": 52
                          },
                          "US_TX_EZ_CROSS": {
                            "value": 53
                          },
                          "US_TX_EZTAG": {
                            "value": 54
                          },
                          "US_TX_FUEGO_TAG": {
                            "value": 96
                          },
                          "US_TX_LAREDO_TRADE_TAG": {
                            "value": 55
                          },
                          "US_TX_PLUSPASS": {
                            "value": 56
                          },
                          "US_TX_TOLLTAG": {
                            "value": 57
                          },
                          "US_TX_TXTAG": {
                            "value": 58
                          },
                          "US_TX_XPRESS_CARD": {
                            "value": 59
                          },
                          "US_UT_ADAMS_AVE_PARKWAY_EXPRESSCARD": {
                            "value": 60
                          },
                          "US_VA_EZPASSVA": {
                            "value": 61
                          },
                          "US_WA_BREEZEBY": {
                            "value": 17
                          },
                          "US_WA_GOOD_TO_GO": {
                            "value": 1
                          },
                          "US_WV_EZPASSWV": {
                            "value": 62
                          },
                          "US_WV_MEMORIAL_BRIDGE_TICKETS": {
                            "value": 63
                          },
                          "US_WV_MOV_PASS": {
                            "value": 100
                          },
                          "US_WV_NEWELL_TOLL_BRIDGE_TICKET": {
                            "value": 64
                          }
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "waypoint"
              ]
            }
          },
          "destinations": {
            "description": "Required. Array of destinations, which determines the columns of the response matrix.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "waypoint": {
                  "type": "object",
                  "properties": {
                    "location": {
                      "type": "object",
                      "properties": {
                        "cpe_uri": {
                          "description": "Deprecated. The CPE URI in `CPE format <https://cpe.mitre.org/specification/>`__",
                          "type": "string"
                        },
                        "version": {
                          "type": "object",
                          "properties": {
                            "epoch": {
                              "description": "Used to correct mistakes in the version numbering scheme.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Required only when version kind is NORMAL. The main part of the version name.",
                              "type": "string"
                            },
                            "revision": {
                              "description": "The iteration of the package build from the above version.",
                              "type": "string"
                            },
                            "inclusive": {
                              "description": "Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.",
                              "type": "boolean"
                            },
                            "kind": {
                              "type": "enum",
                              "name": "VersionKind",
                              "description": "Whether this is an ordinary package version or a sentinel\nMIN/MAX version.\n\nValues:\n    VERSION_KIND_UNSPECIFIED (0):\n        Unknown.\n    NORMAL (1):\n        A standard package version.\n    MINIMUM (2):\n        A special version representing negative\n        infinity.\n    MAXIMUM (3):\n        A special version representing positive\n        infinity.",
                              "values": {
                                "VERSION_KIND_UNSPECIFIED": {
                                  "value": 0
                                },
                                "NORMAL": {
                                  "value": 1
                                },
                                "MINIMUM": {
                                  "value": 2
                                },
                                "MAXIMUM": {
                                  "value": 3
                                }
                              }
                            },
                            "full_name": {
                              "description": "Human readable version string. This string is of the form <epoch>:<name>-<revision> and is only set when kind is NORMAL.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "kind"
                          ]
                        },
                        "path": {
                          "description": "The path from which we gathered that this package/version is installed.",
                          "type": "string"
                        }
                      }
                    },
                    "place_id": {
                      "description": "The POI Place ID associated with the waypoint.  This field is a member of `oneof`_ ``location_type``.",
                      "type": "string"
                    },
                    "address": {
                      "description": "Human readable address or a plus code. See https://plus.codes for details.  This field is a member of `oneof`_ ``location_type``.",
                      "type": "string"
                    },
                    "via": {
                      "description": "Marks this waypoint as a milestone rather a stopping point. For each non-via waypoint in the request, the response appends an entry to the [``legs``][google.maps.routing.v2.Route.legs] array to provide the details for stopovers on that leg of the trip. Set this value to true when you want the route to pass through this waypoint without stopping over. Via waypoints don't cause an entry to be added to the ``legs`` array, but they do route the journey through the waypoint. You can only set this value on waypoints that are intermediates. The request fails if you set this field on terminal waypoints. If ``ComputeRoutesRequest.optimize_waypoint_order`` is set to true then this field cannot be set to true; otherwise, the request fails.",
                      "type": "boolean"
                    },
                    "vehicle_stopover": {
                      "description": "Indicates that the waypoint is meant for vehicles to stop at, where the intention is to either pickup or drop-off. When you set this value, the calculated route won't include non-\\ ``via`` waypoints on roads that are unsuitable for pickup and drop-off. This option works only for ``DRIVE`` and ``TWO_WHEELER`` travel modes, and when the ``location_type`` is [``Location``][google.maps.routing.v2.Location].",
                      "type": "boolean"
                    },
                    "side_of_road": {
                      "description": "Indicates that the location of this waypoint is meant to have a preference for the vehicle to stop at a particular side of road. When you set this value, the route will pass through the location so that the vehicle can stop at the side of road that the location is biased towards from the center of the road. This option works only for ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                      "type": "boolean"
                    }
                  }
                }
              },
              "required": [
                "waypoint"
              ]
            }
          },
          "travel_mode": {
            "description": "A set of values used to specify the mode of travel. NOTE: ``WALK``,\n``BICYCLE``, and ``TWO_WHEELER`` routes are in beta and might\nsometimes be missing clear sidewalks, pedestrian paths, or bicycling\npaths. You must display this warning to the user for all walking,\nbicycling, and two-wheel routes that you display in your app.\n\nValues:\n    TRAVEL_MODE_UNSPECIFIED (0):\n        No travel mode specified. Defaults to ``DRIVE``.\n    DRIVE (1):\n        Travel by passenger car.\n    BICYCLE (2):\n        Travel by bicycle.\n    WALK (3):\n        Travel by walking.\n    TWO_WHEELER (4):\n        Two-wheeled, motorized vehicle. For example, motorcycle.\n        Note that this differs from the ``BICYCLE`` travel mode\n        which covers human-powered mode.\n    TRANSIT (7):\n        Travel by public transit routes, where\n        available.",
            "type": "enum",
            "name": "RouteTravelMode",
            "values": {
              "TRAVEL_MODE_UNSPECIFIED": {
                "value": 0
              },
              "DRIVE": {
                "value": 1
              },
              "BICYCLE": {
                "value": 2
              },
              "WALK": {
                "value": 3
              },
              "TWO_WHEELER": {
                "value": 4
              },
              "TRANSIT": {
                "value": 7
              }
            }
          },
          "routing_preference": {
            "description": "A set of values that specify factors to take into\nconsideration when calculating the route.\n\nValues:\n    ROUTING_PREFERENCE_UNSPECIFIED (0):\n        No routing preference specified. Default to\n        ``TRAFFIC_UNAWARE``.\n    TRAFFIC_UNAWARE (1):\n        Computes routes without taking live traffic conditions into\n        consideration. Suitable when traffic conditions don't matter\n        or are not applicable. Using this value produces the lowest\n        latency. Note: For\n        [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode]\n        ``DRIVE`` and ``TWO_WHEELER``, the route and duration chosen\n        are based on road network and average time-independent\n        traffic conditions, not current road conditions.\n        Consequently, routes may include roads that are temporarily\n        closed. Results for a given request may vary over time due\n        to changes in the road network, updated average traffic\n        conditions, and the distributed nature of the service.\n        Results may also",
            "type": "enum",
            "name": "RoutingPreference",
            "values": {
              "ROUTING_PREFERENCE_UNSPECIFIED": {
                "value": 0
              },
              "TRAFFIC_UNAWARE": {
                "value": 1
              },
              "TRAFFIC_AWARE": {
                "value": 2
              },
              "TRAFFIC_AWARE_OPTIMAL": {
                "value": 3
              }
            }
          },
          "departure_time": {
            "description": "Optional. The departure time. If you don't set this value, then this value defaults to the time that you made the request. NOTE: You can only specify a ``departure_time`` in the past when [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode] is set to ``TRANSIT``.",
            "type": "object",
            "reference": "google.protobuf.timestamp_pb2.Timestamp"
          },
          "arrival_time": {
            "description": "Optional. The arrival time. NOTE: Can only be set when [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode] is set to ``TRANSIT``. You can specify either ``departure_time`` or ``arrival_time``, but not both.",
            "type": "object",
            "reference": "google.protobuf.timestamp_pb2.Timestamp"
          },
          "language_code": {
            "description": "Optional. The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see `Unicode Locale Identifier <http://www.unicode.org/reports/tr35/#Unicode_locale_identifier>`__. See `Language Support <https://developers.google.com/maps/faq#languagesupport>`__ for the list of supported languages. When you don't provide this value, the display language is inferred from the location of the first origin.",
            "type": "string"
          },
          "region_code": {
            "description": "Optional. The region code, specified as a ccTLD (\"top-level domain\") two-character value. For more information see `Country code top-level domains <https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains>`__.",
            "type": "string"
          },
          "units": {
            "description": "A set of values that specify the unit of measure used in the\ndisplay.\n\nValues:\n    UNITS_UNSPECIFIED (0):\n        Units of measure not specified. Defaults to\n        the unit of measure inferred from the request.\n    METRIC (1):\n        Metric units of measure.\n    IMPERIAL (2):\n        Imperial (English) units of measure.",
            "type": "enum",
            "name": "Units",
            "values": {
              "UNITS_UNSPECIFIED": {
                "value": 0
              },
              "METRIC": {
                "value": 1
              },
              "IMPERIAL": {
                "value": 2
              }
            }
          },
          "extra_computations": {
            "description": "Optional. A list of extra computations which may be used to complete the request. Note: These extra computations may return extra fields on the response. These extra fields must also be specified in the field mask to be returned in the response.",
            "type": "array",
            "items": {
              "type": "enum",
              "name": "ExtraComputation",
              "description": "Extra computations to perform while completing the request.\n\nValues:\n    EXTRA_COMPUTATION_UNSPECIFIED (0):\n        Not used. Requests containing this value will\n        fail.\n    TOLLS (1):\n        Toll information for the matrix element(s).",
              "values": {
                "EXTRA_COMPUTATION_UNSPECIFIED": {
                  "value": 0
                },
                "TOLLS": {
                  "value": 1
                }
              }
            }
          },
          "traffic_model": {
            "description": "Specifies the assumptions to use when calculating time in traffic.\nThis setting affects the value returned in the ``duration`` field in\nthe response, which contains the predicted time in traffic based on\nhistorical averages.\n\nValues:\n    TRAFFIC_MODEL_UNSPECIFIED (0):\n        Unused. If specified, will default to ``BEST_GUESS``.\n    BEST_GUESS (1):\n        Indicates that the returned ``duration`` should be the best\n        estimate of travel time given what is known about both\n        historical traffic conditions and live traffic. Live traffic\n        becomes more important the closer the ``departure_time`` is\n        to now.\n    PESSIMISTIC (2):\n        Indicates that the returned duration should\n        be longer than the actual travel time on most\n        days, though occasional days with particularly\n        bad traffic conditions may exceed this value.\n    OPTIMISTIC (3):\n        Indicates that the returned duration should\n        be shorter than the actual travel time on most\n        days, though occas",
            "type": "enum",
            "name": "TrafficModel",
            "values": {
              "TRAFFIC_MODEL_UNSPECIFIED": {
                "value": 0
              },
              "BEST_GUESS": {
                "value": 1
              },
              "PESSIMISTIC": {
                "value": 2
              },
              "OPTIMISTIC": {
                "value": 3
              }
            }
          },
          "transit_preferences": {
            "description": "Optional. Specifies preferences that influence the route returned for ``TRANSIT`` routes. NOTE: You can only specify a ``transit_preferences`` when [RouteTravelMode][google.maps.routing.v2.RouteTravelMode] is set to ``TRANSIT``.",
            "type": "object",
            "properties": {
              "allowed_travel_modes": {
                "description": "A set of travel modes to use when getting a ``TRANSIT`` route. Defaults to all supported modes of travel.",
                "type": "array",
                "items": {
                  "type": "enum",
                  "name": "TransitTravelMode",
                  "description": "A set of values used to specify the mode of transit.\n\nValues:\n    TRANSIT_TRAVEL_MODE_UNSPECIFIED (0):\n        No transit travel mode specified.\n    BUS (1):\n        Travel by bus.\n    SUBWAY (2):\n        Travel by subway.\n    TRAIN (3):\n        Travel by train.\n    LIGHT_RAIL (4):\n        Travel by light rail or tram.\n    RAIL (5):\n        Travel by rail. This is equivalent to a combination of\n        ``SUBWAY``, ``TRAIN``, and ``LIGHT_RAIL``.",
                  "values": {
                    "TRANSIT_TRAVEL_MODE_UNSPECIFIED": {
                      "value": 0
                    },
                    "BUS": {
                      "value": 1
                    },
                    "SUBWAY": {
                      "value": 2
                    },
                    "TRAIN": {
                      "value": 3
                    },
                    "LIGHT_RAIL": {
                      "value": 4
                    },
                    "RAIL": {
                      "value": 5
                    }
                  }
                }
              },
              "routing_preference": {
                "type": "enum",
                "name": "TransitRoutingPreference",
                "description": "Specifies routing preferences for transit routes.\n\nValues:\n    TRANSIT_ROUTING_PREFERENCE_UNSPECIFIED (0):\n        No preference specified.\n    LESS_WALKING (1):\n        Indicates that the calculated route should\n        prefer limited amounts of walking.\n    FEWER_TRANSFERS (2):\n        Indicates that the calculated route should\n        prefer a limited number of transfers.",
                "values": {
                  "TRANSIT_ROUTING_PREFERENCE_UNSPECIFIED": {
                    "value": 0
                  },
                  "LESS_WALKING": {
                    "value": 1
                  },
                  "FEWER_TRANSFERS": {
                    "value": 2
                  }
                }
              }
            }
          }
        },
        "required": [
          "origins",
          "destinations"
        ]
      }
    }
  ]
}