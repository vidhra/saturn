{
  "Environments": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_environment",
          "description": "Create a new environment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_create_environment():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.CreateEnvironmentRequest(\n        )\n\n        # Make the request\n        operation = client.create_environment(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nAr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The parent must be of the form \"projects/{projectId}/locations/{locationId}\".  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "environment": {
                "type": "google.cloud.orchestration.airflow.service_v1beta1.types.Environment",
                "description": "The environment to create. This corresponds to the ``environment`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.orchestration.airflow.service_v1beta1.types.Environment` An environment for running orchestration tasks."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "environment",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_environment",
          "description": "Get an existing environment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_get_environment():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.GetEnvironmentRequest(\n        )\n\n        # Make the request\n        response = await client.get_environment(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.orchestration.airflow.service_v1beta1.types.GetEnvironment",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The resource name of the environment to get, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.orchestration.airflow.service_v1beta1.types.Environment: An environment for running orchestration tasks."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.types.Environment"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_environments",
          "description": "List environments.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_list_environments():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.ListEnvironmentsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_environments(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.orchestration.airf",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "List environments in the given project and location, in the form: \"projects/{projectId}/locations/{locationId}\"  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.orchestration.airflow.service_v1beta1.services.environments.pagers.ListEnvironmentsAsyncPager: The environments in a project and location. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.services.environments.pagers.ListEnvironmentsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_environment",
          "description": "Update an environment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_update_environment():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.UpdateEnvironmentRequest(\n        )\n\n        # Make the request\n        operation = client.update_environment(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The relative resource name of the environment to update, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "environment": {
                "type": "google.cloud.orchestration.airflow.service_v1beta1.types.Environment",
                "description": "A patch environment. Fields specified by the ``updateMask`` will be copied from the patch environment into the environment under update.  This corresponds to the ``environment`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. A comma-separated list of paths, relative to ``Environment``, of fields to update. For example, to set the version of scikit-learn to install in the environment to 0.19.0 and to remove an existing installation of argparse, the ``updateMask`` parameter would include the following two ``paths`` values: \"config.softwareConfig.pypiPackages.scikit-learn\" and \"config.softwareConfig.pypiPackages.argparse\". The included patch environment would specify the scikit-learn version as follows:  ::  { \"config\":{ \"softwareConfig\":{ \"pypiPackages\":{ \"scikit-learn\":\"==0.19.0\" } } } }  Note that in the above example, any existing PyPI packages other than scikit-learn and argparse will be unaffected.  Only one update type may be included in a single request's ``updateMask``. For example, one cannot update both the PyPI packages and labels in the same request. However, it is possible to update multiple members of a map field simultaneously in the same request. For example, to set the labels \"label1\" and \"label2\" while clearing \"label3\" (assuming it already exists), one can provide the paths \"labels.label1\", \"labels.label2\", and \"labels.label3\" and populate the patch environment as follows:  ::  { \"labels\":{ \"label1\":\"new-label1-value\" \"label2\":\"new-label2-value\" } }  Note that in the above example, any existing labels that are not included in the ``updateMask`` will be unaffected.  It is also possible to replace an entire map field by providing the map field's path in the ``updateMask``. The new value of the field will be that which is provided in the patch environment. For example, to delete all pre-existing user-specified PyPI packages and install botocore at version 1.7.14, the ``updateMask`` would contain the path \"config.softwareConfig.pypiPackages\", and the patch environment would be the following:  ::  { \"config\":{ \"softwareConfig\":{ \"pypiPackages\":{ \"botocore\":\"==1.7.14\" } } } }  **Note:** Only the following fields can be updated:  -  ``config.softwareConfig.pypiPackages``  -  Replace all custom custom PyPI packages. If a replacement package map is not included in ``environment``, all custom PyPI packages are cleared. It is an error to provide both this mask and a mask specifying an individual package.  -  ``config.softwareConfig.pypiPackages.``\\ packagename  -  Update the custom PyPI package *packagename*, preserving other packages. To delete the package, include it in ``updateMask``, and omit the mapping for it in ``environment.config.softwareConfig.pypiPackages``. It is an error to provide both a mask of this form and the ``config.softwareConfig.pypiPackages`` mask.  -  ``labels``  -  Replace all environment labels. If a replacement labels map is not included in ``environment``, all labels are cleared. It is an error to provide both this mask and a mask specifying one or more individual labels.  -  ``labels.``\\ labelName  -  Set the label named *labelName*, while preserving other labels. To delete the label, include it in ``updateMask`` and omit its mapping in ``environment.labels``. It is an error to provide both a mask of this form and the ``labels`` mask.  -  ``config.nodeCount``  -  Horizontally scale the number of nodes in the environment. An integer greater than or equal to 3 must be provided in the ``config.nodeCount`` field. Supported for Cloud Composer environments in versions composer-1.\\ *.*-airflow-*.*.*.  -  ``config.webServerNetworkAccessControl``  -  Replace the environment's current WebServerNetworkAccessControl.  -  ``config.softwareConfig.airflowConfigOverrides``  -  Replace all Apache Airflow config overrides. If a replacement config overrides map is not included in ``environment``, all config overrides are cleared. It is an error to provide both this mask and a mask specifying one or more individual config overrides.  -  ``config.softwareConfig.airflowConfigOverrides.``\\ section-name  -  Override the Apache Airflow config property *name* in the section named *section*, preserving other properties. To delete the property override, include it in ``updateMask`` and omit its mapping in ``environment.config.softwareConfig.airflowConfigOverrides``. It is an error to provide both a mask of this form and the ``config.softwareConfig.airflowConfigOverrides`` mask.  -  ``config.softwareConfig.envVariables``  -  Replace all environment variables. If a replacement environment variable map is not included in ``environment``, all custom environment variables are cleared.  -  ``config.softwareConfig.imageVersion``  -  Upgrade the version of the environment in-place. Refer to ``SoftwareConfig.image_version`` for information on how to format the new image version. Additionally, the new image version cannot effect a version downgrade, and must match the current image version's Composer and Airflow major versions. Consult the `Cloud Composer version list </composer/docs/concepts/versioning/composer-versions>`__ for valid values.  -  ``config.softwareConfig.schedulerCount``  -  Horizontally scale the number of schedulers in Airflow. A positive integer not greater than the number of nodes must be provided in the ``config.softwareConfig.schedulerCount`` field. Supported for Cloud Composer environments in versions composer-1.\\ *.*-airflow-2.*.*.  -  ``config.softwareConfig.cloudDataLineageIntegration``  -  Configuration for Cloud Data Lineage integration.  -  ``config.databaseConfig.machineType``  -  Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. Supported for Cloud Composer environments in versions composer-1.\\ *.*-airflow-*.*.*.  -  ``config.webServerConfig.machineType``  -  Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. Supported for Cloud Composer environments in versions composer-1.\\ *.*-airflow-*.*.*.  -  ``config.maintenanceWindow``  -  Maintenance window during which Cloud Composer components may be under maintenance.  -  ``config.workloadsConfig``  -  The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.\\ *.*-airflow-*.*.\\* and newer.  -  ``config.environmentSize``  -  The size of the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.\\ *.*-airflow-*.*.\\* and newer.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.orchestration.airflow.service_v1beta1.types.Environment` An environment for running orchestration tasks."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "environment",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_environment",
          "description": "Delete an environment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_delete_environment():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.DeleteEnvironmentRequest(\n        )\n\n        # Make the request\n        operation = client.delete_environment(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The environment to delete, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "restart_web_server",
          "description": "Restart Airflow web server.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_restart_web_server():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.RestartWebServerRequest(\n        )\n\n        # Make the request\n        operation = client.restart_web_server(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nA",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "check_upgrade",
          "description": "Check if an upgrade operation on the environment will\nsucceed.\nIn case of problems detailed info can be found in the\nreturned Operation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_check_upgrade():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.CheckUpgradeRequest(\n        )\n\n        # Make the request\n        operation = client.check_upgrade(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "execute_airflow_command",
          "description": "Executes Airflow CLI command.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_execute_airflow_command():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.ExecuteAirflowCommandRequest(\n        )\n\n        # Make the request\n        response = await client.execute_airflow_command(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.orchestration.airflow.service_v1be",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.types.ExecuteAirflowCommandResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "stop_airflow_command",
          "description": "Stops Airflow CLI command execution.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_stop_airflow_command():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.StopAirflowCommandRequest(\n        )\n\n        # Make the request\n        response = await client.stop_airflow_command(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.orchestration.airflow.service_v1beta",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.types.StopAirflowCommandResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "poll_airflow_command",
          "description": "Polls Airflow CLI command execution and fetches logs.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_poll_airflow_command():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.PollAirflowCommandRequest(\n        )\n\n        # Make the request\n        response = await client.poll_airflow_command(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.orchestration.airfl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.types.PollAirflowCommandResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_workloads",
          "description": "Lists workloads in a Cloud Composer environment. Workload is a\nunit that runs a single Composer component.\n\nThis method is supported for Cloud Composer environments in\nversions composer-3.\\ *.*-airflow-*.*.\\* and newer.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_list_workloads():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.ListWorkloadsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The environment name to get workloads for, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\"  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.orchestration.airflow.service_v1beta1.services.environments.pagers.ListWorkloadsAsyncPager: Response to ListWorkloadsRequest.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.services.environments.pagers.ListWorkloadsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_user_workloads_secret",
          "description": "Creates a user workloads Secret.\n\nThis method is supported for Cloud Composer environments in\nversions composer-3.\\ *.*-airflow-*.*.\\* and newer.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_create_user_workloads_secret():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.CreateUserWorkloadsSecretRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_user_worklo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The environment name to create a Secret for, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\"  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "user_workloads_secret": {
                "type": "google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsSecret",
                "description": "Required. User workloads Secret to create.  This corresponds to the ``user_workloads_secret`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsSecret: User workloads Secret used by Airflow tasks that run with Kubernetes executor or KubernetesPodOperator."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "user_workloads_secret",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsSecret"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_user_workloads_secret",
          "description": "Gets an existing user workloads Secret. Values of the \"data\"\nfield in the response are cleared.\n\nThis method is supported for Cloud Composer environments in\nversions composer-3.\\ *.*-airflow-*.*.\\* and newer.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_get_user_workloads_secret():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.GetUserWorkloadsSecretRequest(\n            name=\"name_value\",\n        )\n\n        # Make the reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Secret to get, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsSecret: User workloads Secret used by Airflow tasks that run with Kubernetes executor or KubernetesPodOperator."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsSecret"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_user_workloads_secrets",
          "description": "Lists user workloads Secrets.\n\nThis method is supported for Cloud Composer environments in\nversions composer-3.\\ *.*-airflow-*.*.\\* and newer.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_list_user_workloads_secrets():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.ListUserWorkloadsSecretsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_user_workloads_secret",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. List Secrets in the given environment, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\"  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.orchestration.airflow.service_v1beta1.services.environments.pagers.ListUserWorkloadsSecretsAsyncPager: The user workloads Secrets for a given environment. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.services.environments.pagers.ListUserWorkloadsSecretsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_user_workloads_secret",
          "description": "Updates a user workloads Secret.\n\nThis method is supported for Cloud Composer environments in\nversions composer-3.\\ *.*-airflow-*.*.\\* and newer.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_update_user_workloads_secret():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.UpdateUserWorkloadsSecretRequest(\n        )\n\n        # Make the request\n        response = await client.update_user_workloads_secret(request=request)\n\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "user_workloads_secret": {
                "type": "google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsSecret",
                "description": "Optional. User workloads Secret to override.  This corresponds to the ``user_workloads_secret`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsSecret: User workloads Secret used by Airflow tasks that run with Kubernetes executor or KubernetesPodOperator."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "user_workloads_secret",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsSecret"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_user_workloads_secret",
          "description": "Deletes a user workloads Secret.\n\nThis method is supported for Cloud Composer environments in\nversions composer-3.\\ *.*-airflow-*.*.\\* and newer.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_delete_user_workloads_secret():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.DeleteUserWorkloadsSecretRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_user_workloads_secret(requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The Secret to delete, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_user_workloads_config_map",
          "description": "Creates a user workloads ConfigMap.\n\nThis method is supported for Cloud Composer environments in\nversions composer-3.\\ *.*-airflow-*.*.\\* and newer.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_create_user_workloads_config_map():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.CreateUserWorkloadsConfigMapRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_u",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The environment name to create a ConfigMap for, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\"  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "user_workloads_config_map": {
                "type": "google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsConfigMap",
                "description": "Required. User workloads ConfigMap to create.  This corresponds to the ``user_workloads_config_map`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsConfigMap: User workloads ConfigMap used by Airflow tasks that run with Kubernetes executor or KubernetesPodOperator."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "user_workloads_config_map",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsConfigMap"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_user_workloads_config_map",
          "description": "Gets an existing user workloads ConfigMap.\n\nThis method is supported for Cloud Composer environments in\nversions composer-3.\\ *.*-airflow-*.*.\\* and newer.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_get_user_workloads_config_map():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.GetUserWorkloadsConfigMapRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_user_wo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the ConfigMap to get, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsConfigMap: User workloads ConfigMap used by Airflow tasks that run with Kubernetes executor or KubernetesPodOperator."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsConfigMap"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_user_workloads_config_maps",
          "description": "Lists user workloads ConfigMaps.\n\nThis method is supported for Cloud Composer environments in\nversions composer-3.\\ *.*-airflow-*.*.\\* and newer.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_list_user_workloads_config_maps():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.ListUserWorkloadsConfigMapsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_user_worklo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. List ConfigMaps in the given environment, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\"  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.orchestration.airflow.service_v1beta1.services.environments.pagers.ListUserWorkloadsConfigMapsAsyncPager: The user workloads ConfigMaps for a given environment. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.services.environments.pagers.ListUserWorkloadsConfigMapsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_user_workloads_config_map",
          "description": "Updates a user workloads ConfigMap.\n\nThis method is supported for Cloud Composer environments in\nversions composer-3.\\ *.*-airflow-*.*.\\* and newer.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_update_user_workloads_config_map():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.UpdateUserWorkloadsConfigMapRequest(\n        )\n\n        # Make the request\n        response = await client.update_user_workloads_config_map(request=re",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "user_workloads_config_map": {
                "type": "google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsConfigMap",
                "description": "Optional. User workloads ConfigMap to override.  This corresponds to the ``user_workloads_config_map`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsConfigMap: User workloads ConfigMap used by Airflow tasks that run with Kubernetes executor or KubernetesPodOperator."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "user_workloads_config_map",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsConfigMap"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_user_workloads_config_map",
          "description": "Deletes a user workloads ConfigMap.\n\nThis method is supported for Cloud Composer environments in\nversions composer-3.\\ *.*-airflow-*.*.\\* and newer.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_delete_user_workloads_config_map():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.DeleteUserWorkloadsConfigMapRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_user_workloads_c",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The ConfigMap to delete, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "save_snapshot",
          "description": "Creates a snapshots of a Cloud Composer environment.\n\nAs a result of this operation, snapshot of environment's\nstate is stored in a location specified in the\nSaveSnapshotRequest.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_save_snapshot():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.SaveSnapshotRequest(\n        )\n\n        # Make the request\n        operation = client.save_snapshot(request=request)\n\n        print(\"Waitin",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "load_snapshot",
          "description": "Loads a snapshot of a Cloud Composer environment.\n\nAs a result of this operation, a snapshot of\nenvironment's specified in LoadSnapshotRequest is loaded\ninto the environment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_load_snapshot():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.LoadSnapshotRequest(\n        )\n\n        # Make the request\n        operation = client.load_snapshot(request=request)\n\n        print(\"Waiting fo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "database_failover",
          "description": "Triggers database failover (only for highly resilient\nenvironments).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_database_failover():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.DatabaseFailoverRequest(\n        )\n\n        # Make the request\n        operation = client.database_failover(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "fetch_database_properties",
          "description": "Fetches database properties.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_fetch_database_properties():\n        # Create a client\n        client = service_v1beta1.EnvironmentsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.FetchDatabasePropertiesRequest(\n            environment=\"environment_value\",\n        )\n\n        # Make the request\n        response = await client.fetch_database_properties(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Uni",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.types.FetchDatabasePropertiesResponse"
          ]
        }
      }
    ]
  },
  "ImageVersions": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_image_versions",
          "description": "List ImageVersions for provided location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud.orchestration.airflow import service_v1beta1\n\n    async def sample_list_image_versions():\n        # Create a client\n        client = service_v1beta1.ImageVersionsAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_v1beta1.ListImageVersionsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_image_versions(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[go",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "List ImageVersions in the given project and location, in the form: \"projects/{projectId}/locations/{locationId}\"  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.orchestration.airflow.service_v1beta1.services.image_versions.pagers.ListImageVersionsAsyncPager: The ImageVersions in a project and location. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.orchestration.airflow.service_v1beta1.services.image_versions.pagers.ListImageVersionsAsyncPager"
          ]
        }
      }
    ]
  }
}