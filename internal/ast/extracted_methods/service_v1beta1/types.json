{
  "\\Users\\AMD\\vidhra\\internal\\ast\\google-cloud-python\\packages\\google-cloud-orchestration-airflow\\google\\cloud\\orchestration\\airflow\\service_v1beta1\\types\\environments.py": [
    {
      "type": "function",
      "name": "CreateEnvironmentRequest",
      "description": "Create a new environment.\n\nAttributes:\n    parent (str):\n        The parent must be of the form\n        \"projects/{projectId}/locations/{locationId}\".\n    environment (google.cloud.orchestration.airflow.service_v1beta1.types.Environment):\n        The environment to create.",
      "parameters": {
        "type": "object",
        "properties": {
          "parent": {
            "description": "The parent must be of the form \"projects/{projectId}/locations/{locationId}\".",
            "type": "string"
          },
          "environment": {
            "description": "The environment to create.",
            "type": "object",
            "properties": {
              "name": {
                "description": "Immutable. Full name of this resource, in the format ``users/{owner_email}/environments/{environment_id}``. ``{owner_email}`` is the email address of the user to whom this environment belongs, and ``{environment_id}`` is the identifier of this environment. For example, ``users/someone@example.com/environments/default``.",
                "type": "string"
              },
              "id": {
                "description": "Output only. The environment's identifier, unique among the user's environments.",
                "type": "string"
              },
              "docker_image": {
                "description": "Required. Immutable. Full path to the Docker image used to run this environment, e.g. \"gcr.io/dev-con/cloud-devshell:latest\".",
                "type": "string"
              },
              "state": {
                "description": "Output only. Current execution state of this environment.",
                "type": "object",
                "reference": "google.cloud.shell_v1.types.Environment.State"
              },
              "web_host": {
                "description": "Output only. Host to which clients can connect to initiate HTTPS or WSS connections with the environment.",
                "type": "string"
              },
              "ssh_username": {
                "description": "Output only. Username that clients should use when initiating SSH sessions with the environment.",
                "type": "string"
              },
              "ssh_host": {
                "description": "Output only. Host to which clients can connect to initiate SSH sessions with the environment.",
                "type": "string"
              },
              "ssh_port": {
                "description": "Output only. Port to which clients can connect to initiate SSH sessions with the environment.",
                "type": "integer"
              },
              "public_keys": {
                "description": "Output only. Public keys associated with the environment. Clients can connect to this environment via SSH only if they possess a private key corresponding to at least one of these public keys. Keys can be added to or removed from the environment using the AddPublicKey and RemovePublicKey methods.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "docker_image"
            ]
          }
        }
      }
    },
    {
      "type": "function",
      "name": "GetEnvironmentRequest",
      "description": "Get an environment.\n\nAttributes:\n    name (str):\n        The resource name of the environment to get,\n        in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The resource name of the environment to get, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          }
        }
      }
    },
    {
      "type": "function",
      "name": "ListEnvironmentsRequest",
      "description": "List environments in a project and location.\n\nAttributes:\n    parent (str):\n        List environments in the given project and\n        location, in the form:\n        \"projects/{projectId}/locations/{locationId}\".\n    page_size (int):\n        The maximum number of environments to return.\n    page_token (str):\n        The next_page_token value returned from a previous List\n        request, if any.",
      "parameters": {
        "type": "object",
        "properties": {
          "parent": {
            "description": "List environments in the given project and location, in the form: \"projects/{projectId}/locations/{locationId}\".",
            "type": "string"
          },
          "page_size": {
            "description": "The maximum number of environments to return.",
            "type": "integer"
          },
          "page_token": {
            "description": "The next_page_token value returned from a previous List request, if any.",
            "type": "string"
          }
        }
      }
    },
    {
      "type": "function",
      "name": "DeleteEnvironmentRequest",
      "description": "Delete an environment.\n\nAttributes:\n    name (str):\n        The environment to delete, in the form:\n\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The environment to delete, in the form:  \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          }
        }
      }
    },
    {
      "type": "function",
      "name": "UpdateEnvironmentRequest",
      "description": "Update an environment.\n\nAttributes:\n    name (str):\n        The relative resource name of the environment\n        to update, in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".\n    environment (google.cloud.orchestration.airflow.service_v1beta1.types.Environment):\n        A patch environment. Fields specified by the ``updateMask``\n        will be copied from the patch environment into the\n        environment under update.\n    update_mask (google.protobuf.field_mask_pb2.FieldMask):\n        Required. A comma-separated list of paths, relative to\n        ``Environment``, of fields to update. For example, to set\n        the version of scikit-learn to install in the environment to\n        0.19.0 and to remove an existing installation of argparse,\n        the ``updateMask`` parameter would include the following two\n        ``paths`` values:\n        \"config.softwareConfig.pypiPackages.scikit-learn\" and\n        \"config.softwareConfig.pypiPackages.argparse\". The included\n   ",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The relative resource name of the environment to update, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          },
          "environment": {
            "description": "A patch environment. Fields specified by the ``updateMask`` will be copied from the patch environment into the environment under update.",
            "type": "object",
            "properties": {
              "name": {
                "description": "Immutable. Full name of this resource, in the format ``users/{owner_email}/environments/{environment_id}``. ``{owner_email}`` is the email address of the user to whom this environment belongs, and ``{environment_id}`` is the identifier of this environment. For example, ``users/someone@example.com/environments/default``.",
                "type": "string"
              },
              "id": {
                "description": "Output only. The environment's identifier, unique among the user's environments.",
                "type": "string"
              },
              "docker_image": {
                "description": "Required. Immutable. Full path to the Docker image used to run this environment, e.g. \"gcr.io/dev-con/cloud-devshell:latest\".",
                "type": "string"
              },
              "state": {
                "description": "Output only. Current execution state of this environment.",
                "type": "object",
                "reference": "google.cloud.shell_v1.types.Environment.State"
              },
              "web_host": {
                "description": "Output only. Host to which clients can connect to initiate HTTPS or WSS connections with the environment.",
                "type": "string"
              },
              "ssh_username": {
                "description": "Output only. Username that clients should use when initiating SSH sessions with the environment.",
                "type": "string"
              },
              "ssh_host": {
                "description": "Output only. Host to which clients can connect to initiate SSH sessions with the environment.",
                "type": "string"
              },
              "ssh_port": {
                "description": "Output only. Port to which clients can connect to initiate SSH sessions with the environment.",
                "type": "integer"
              },
              "public_keys": {
                "description": "Output only. Public keys associated with the environment. Clients can connect to this environment via SSH only if they possess a private key corresponding to at least one of these public keys. Keys can be added to or removed from the environment using the AddPublicKey and RemovePublicKey methods.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "docker_image"
            ]
          },
          "update_mask": {
            "description": "Required. A comma-separated list of paths, relative to ``Environment``, of fields to update. For example, to set the version of scikit-learn to install in the environment to 0.19.0 and to remove an existing installation of argparse, the ``updateMask`` parameter would include the following two ``paths`` values: \"config.softwareConfig.pypiPackages.scikit-learn\" and \"config.softwareConfig.pypiPackages.argparse\". The included patch environment would specify the scikit-learn version as follows:  ::  { \"config\":{ \"softwareConfig\":{ \"pypiPackages\":{ \"scikit-learn\":\"==0.19.0\" } } } }  Note that in the above example, any existing PyPI packages other than scikit-learn and argparse will be unaffected.  Only one update type may be included in a single request's ``updateMask``. For example, one cannot update both the PyPI packages and labels in the same request. However, it is possible to update multiple members of a map field simultaneously in the same request. For example, to set the labels \"label1\" and \"label2\" while clearing \"label3\" (assuming it already exists), one can provide the paths \"labels.label1\", \"labels.label2\", and \"labels.label3\" and populate the patch environment as follows:  ::  { \"labels\":{ \"label1\":\"new-label1-value\" \"label2\":\"new-label2-value\" } }  Note that in the above example, any existing labels that are not included in the ``updateMask`` will be unaffected.  It is also possible to replace an entire map field by providing the map field's path in the ``updateMask``. The new value of the field will be that which is provided in the patch environment. For example, to delete all pre-existing user-specified PyPI packages and install botocore at version 1.7.14, the ``updateMask`` would contain the path \"config.softwareConfig.pypiPackages\", and the patch environment would be the following:  ::  { \"config\":{ \"softwareConfig\":{ \"pypiPackages\":{ \"botocore\":\"==1.7.14\" } } } }  **Note:** Only the following fields can be updated:  -  ``config.softwareConfig.pypiPackages``  -  Replace all custom custom PyPI packages. If a replacement package map is not included in ``environment``, all custom PyPI packages are cleared. It is an error to provide both this mask and a mask specifying an individual package.  -  ``config.softwareConfig.pypiPackages.``\\ packagename  -  Update the custom PyPI package *packagename*, preserving other packages. To delete the package, include it in ``updateMask``, and omit the mapping for it in ``environment.config.softwareConfig.pypiPackages``. It is an error to provide both a mask of this form and the ``config.softwareConfig.pypiPackages`` mask.  -  ``labels``  -  Replace all environment labels. If a replacement labels map is not included in ``environment``, all labels are cleared. It is an error to provide both this mask and a mask specifying one or more individual labels.  -  ``labels.``\\ labelName  -  Set the label named *labelName*, while preserving other labels. To delete the label, include it in ``updateMask`` and omit its mapping in ``environment.labels``. It is an error to provide both a mask of this form and the ``labels`` mask.  -  ``config.nodeCount``  -  Horizontally scale the number of nodes in the environment. An integer greater than or equal to 3 must be provided in the ``config.nodeCount`` field. Supported for Cloud Composer environments in versions composer-1.\\ *.*-airflow-*.*.*.  -  ``config.webServerNetworkAccessControl``  -  Replace the environment's current WebServerNetworkAccessControl.  -  ``config.softwareConfig.airflowConfigOverrides``  -  Replace all Apache Airflow config overrides. If a replacement config overrides map is not included in ``environment``, all config overrides are cleared. It is an error to provide both this mask and a mask specifying one or more individual config overrides.  -  ``config.softwareConfig.airflowConfigOverrides.``\\ section-name  -  Override the Apache Airflow config property *name* in the section named *section*, preserving other properties. To delete the property override, include it in ``updateMask`` and omit its mapping in ``environment.config.softwareConfig.airflowConfigOverrides``. It is an error to provide both a mask of this form and the ``config.softwareConfig.airflowConfigOverrides`` mask.  -  ``config.softwareConfig.envVariables``  -  Replace all environment variables. If a replacement environment variable map is not included in ``environment``, all custom environment variables are cleared.  -  ``config.softwareConfig.imageVersion``  -  Upgrade the version of the environment in-place. Refer to ``SoftwareConfig.image_version`` for information on how to format the new image version. Additionally, the new image version cannot effect a version downgrade, and must match the current image version's Composer and Airflow major versions. Consult the `Cloud Composer version list </composer/docs/concepts/versioning/composer-versions>`__ for valid values.  -  ``config.softwareConfig.schedulerCount``  -  Horizontally scale the number of schedulers in Airflow. A positive integer not greater than the number of nodes must be provided in the ``config.softwareConfig.schedulerCount`` field. Supported for Cloud Composer environments in versions composer-1.\\ *.*-airflow-2.*.*.  -  ``config.softwareConfig.cloudDataLineageIntegration``  -  Configuration for Cloud Data Lineage integration.  -  ``config.databaseConfig.machineType``  -  Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. Supported for Cloud Composer environments in versions composer-1.\\ *.*-airflow-*.*.*.  -  ``config.webServerConfig.machineType``  -  Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. Supported for Cloud Composer environments in versions composer-1.\\ *.*-airflow-*.*.*.  -  ``config.maintenanceWindow``  -  Maintenance window during which Cloud Composer components may be under maintenance.  -  ``config.workloadsConfig``  -  The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.\\ *.*-airflow-*.*.\\* and newer.  -  ``config.environmentSize``  -  The size of the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.\\ *.*-airflow-*.*.\\* and newer.",
            "type": "object",
            "reference": "google.protobuf.field_mask_pb2.FieldMask"
          }
        },
        "required": [
          "update_mask"
        ]
      }
    },
    {
      "type": "function",
      "name": "RestartWebServerRequest",
      "description": "Restart Airflow web server.\n\nAttributes:\n    name (str):\n        The resource name of the environment to\n        restart the web server for, in the form:\n\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The resource name of the environment to restart the web server for, in the form:  \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          }
        }
      }
    },
    {
      "type": "function",
      "name": "ExecuteAirflowCommandRequest",
      "description": "Execute Airflow Command request.\n\nAttributes:\n    environment (str):\n        The resource name of the environment in the\n        form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".\n    command (str):\n        Airflow command.\n    subcommand (str):\n        Airflow subcommand.\n    parameters (MutableSequence[str]):\n        Parameters for the Airflow command/subcommand as an array of\n        arguments. It may contain positional arguments like\n        ``[\"my-dag-id\"]``, key-value parameters like\n        ``[\"--foo=bar\"]`` or ``[\"--foo\",\"bar\"]``, or other flags\n        like ``[\"-f\"]``.",
      "parameters": {
        "type": "object",
        "properties": {
          "environment": {
            "description": "The resource name of the environment in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          },
          "command": {
            "description": "Airflow command.",
            "type": "string"
          },
          "subcommand": {
            "description": "Airflow subcommand.",
            "type": "string"
          },
          "parameters": {
            "description": "Parameters for the Airflow command/subcommand as an array of arguments. It may contain positional arguments like ``[\"my-dag-id\"]``, key-value parameters like ``[\"--foo=bar\"]`` or ``[\"--foo\",\"bar\"]``, or other flags like ``[\"-f\"]``.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "type": "function",
      "name": "StopAirflowCommandRequest",
      "description": "Stop Airflow Command request.\n\nAttributes:\n    environment (str):\n        The resource name of the environment in the\n        form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".\n    execution_id (str):\n        The unique ID of the command execution.\n    pod (str):\n        The name of the pod where the command is\n        executed.\n    pod_namespace (str):\n        The namespace of the pod where the command is\n        executed.\n    force (bool):\n        If true, the execution is terminated\n        forcefully (SIGKILL). If false, the execution is\n        stopped gracefully, giving it time for cleanup.",
      "parameters": {
        "type": "object",
        "properties": {
          "environment": {
            "description": "The resource name of the environment in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          },
          "execution_id": {
            "description": "The unique ID of the command execution.",
            "type": "string"
          },
          "pod": {
            "description": "The name of the pod where the command is executed.",
            "type": "string"
          },
          "pod_namespace": {
            "description": "The namespace of the pod where the command is executed.",
            "type": "string"
          },
          "force": {
            "description": "If true, the execution is terminated forcefully (SIGKILL). If false, the execution is stopped gracefully, giving it time for cleanup.",
            "type": "boolean"
          }
        }
      }
    },
    {
      "type": "function",
      "name": "PollAirflowCommandRequest",
      "description": "Poll Airflow Command request.\n\nAttributes:\n    environment (str):\n        The resource name of the environment in the\n        form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".\n    execution_id (str):\n        The unique ID of the command execution.\n    pod (str):\n        The name of the pod where the command is\n        executed.\n    pod_namespace (str):\n        The namespace of the pod where the command is\n        executed.\n    next_line_number (int):\n        Line number from which new logs should be\n        fetched.",
      "parameters": {
        "type": "object",
        "properties": {
          "environment": {
            "description": "The resource name of the environment in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          },
          "execution_id": {
            "description": "The unique ID of the command execution.",
            "type": "string"
          },
          "pod": {
            "description": "The name of the pod where the command is executed.",
            "type": "string"
          },
          "pod_namespace": {
            "description": "The namespace of the pod where the command is executed.",
            "type": "string"
          },
          "next_line_number": {
            "description": "Line number from which new logs should be fetched.",
            "type": "integer"
          }
        }
      }
    },
    {
      "type": "function",
      "name": "CreateUserWorkloadsSecretRequest",
      "description": "Create user workloads Secret request.\n\nAttributes:\n    parent (str):\n        Required. The environment name to create a\n        Secret for, in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".\n    user_workloads_secret (google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsSecret):\n        Required. User workloads Secret to create.",
      "parameters": {
        "type": "object",
        "properties": {
          "parent": {
            "description": "Required. The environment name to create a Secret for, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          },
          "user_workloads_secret": {
            "description": "Required. User workloads Secret to create.",
            "type": "object",
            "properties": {
              "name": {
                "description": "Identifier. The resource name of the Secret, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}\".",
                "type": "string"
              },
              "data": {
                "description": "Optional. The \"data\" field of Kubernetes Secret, organized in key-value pairs, which can contain sensitive values such as a password, a token, or a key. The values for all keys have to be base64-encoded strings. For details see: https://kubernetes.io/docs/concepts/configuration/secret/",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "parent",
          "user_workloads_secret"
        ]
      }
    },
    {
      "type": "function",
      "name": "GetUserWorkloadsSecretRequest",
      "description": "Get user workloads Secret request.\n\nAttributes:\n    name (str):\n        Required. The resource name of the Secret to\n        get, in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}\".",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Required. The resource name of the Secret to get, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}\".",
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "type": "function",
      "name": "ListUserWorkloadsSecretsRequest",
      "description": "List user workloads Secrets request.\n\nAttributes:\n    parent (str):\n        Required. List Secrets in the given\n        environment, in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".\n    page_size (int):\n        Optional. The maximum number of Secrets to\n        return.\n    page_token (str):\n        Optional. The next_page_token value returned from a previous\n        List request, if any.",
      "parameters": {
        "type": "object",
        "properties": {
          "parent": {
            "description": "Required. List Secrets in the given environment, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          },
          "page_size": {
            "description": "Optional. The maximum number of Secrets to return.",
            "type": "integer"
          },
          "page_token": {
            "description": "Optional. The next_page_token value returned from a previous List request, if any.",
            "type": "string"
          }
        },
        "required": [
          "parent"
        ]
      }
    },
    {
      "type": "function",
      "name": "UpdateUserWorkloadsSecretRequest",
      "description": "Update user workloads Secret request.\n\nAttributes:\n    user_workloads_secret (google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsSecret):\n        Optional. User workloads Secret to override.",
      "parameters": {
        "type": "object",
        "properties": {
          "user_workloads_secret": {
            "description": "Optional. User workloads Secret to override.",
            "type": "object",
            "properties": {
              "name": {
                "description": "Identifier. The resource name of the Secret, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}\".",
                "type": "string"
              },
              "data": {
                "description": "Optional. The \"data\" field of Kubernetes Secret, organized in key-value pairs, which can contain sensitive values such as a password, a token, or a key. The values for all keys have to be base64-encoded strings. For details see: https://kubernetes.io/docs/concepts/configuration/secret/",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "name": "DeleteUserWorkloadsSecretRequest",
      "description": "Delete user workloads Secret request.\n\nAttributes:\n    name (str):\n        Required. The Secret to delete, in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}\".",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Required. The Secret to delete, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}\".",
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "type": "function",
      "name": "CreateUserWorkloadsConfigMapRequest",
      "description": "Create user workloads ConfigMap request.\n\nAttributes:\n    parent (str):\n        Required. The environment name to create a\n        ConfigMap for, in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".\n    user_workloads_config_map (google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsConfigMap):\n        Required. User workloads ConfigMap to create.",
      "parameters": {
        "type": "object",
        "properties": {
          "parent": {
            "description": "Required. The environment name to create a ConfigMap for, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          },
          "user_workloads_config_map": {
            "description": "Required. User workloads ConfigMap to create.",
            "type": "object",
            "properties": {
              "name": {
                "description": "Identifier. The resource name of the ConfigMap, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}\".",
                "type": "string"
              },
              "data": {
                "description": "Optional. The \"data\" field of Kubernetes ConfigMap, organized in key-value pairs. For details see:  https://kubernetes.io/docs/concepts/configuration/configmap/",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "parent",
          "user_workloads_config_map"
        ]
      }
    },
    {
      "type": "function",
      "name": "GetUserWorkloadsConfigMapRequest",
      "description": "Get user workloads ConfigMap request.\n\nAttributes:\n    name (str):\n        Required. The resource name of the ConfigMap\n        to get, in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}\".",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Required. The resource name of the ConfigMap to get, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}\".",
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "type": "function",
      "name": "ListUserWorkloadsConfigMapsRequest",
      "description": "List user workloads ConfigMaps request.\n\nAttributes:\n    parent (str):\n        Required. List ConfigMaps in the given\n        environment, in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".\n    page_size (int):\n        Optional. The maximum number of ConfigMaps to\n        return.\n    page_token (str):\n        Optional. The next_page_token value returned from a previous\n        List request, if any.",
      "parameters": {
        "type": "object",
        "properties": {
          "parent": {
            "description": "Required. List ConfigMaps in the given environment, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          },
          "page_size": {
            "description": "Optional. The maximum number of ConfigMaps to return.",
            "type": "integer"
          },
          "page_token": {
            "description": "Optional. The next_page_token value returned from a previous List request, if any.",
            "type": "string"
          }
        },
        "required": [
          "parent"
        ]
      }
    },
    {
      "type": "function",
      "name": "UpdateUserWorkloadsConfigMapRequest",
      "description": "Update user workloads ConfigMap request.\n\nAttributes:\n    user_workloads_config_map (google.cloud.orchestration.airflow.service_v1beta1.types.UserWorkloadsConfigMap):\n        Optional. User workloads ConfigMap to\n        override.",
      "parameters": {
        "type": "object",
        "properties": {
          "user_workloads_config_map": {
            "description": "Optional. User workloads ConfigMap to override.",
            "type": "object",
            "properties": {
              "name": {
                "description": "Identifier. The resource name of the ConfigMap, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}\".",
                "type": "string"
              },
              "data": {
                "description": "Optional. The \"data\" field of Kubernetes ConfigMap, organized in key-value pairs. For details see:  https://kubernetes.io/docs/concepts/configuration/configmap/",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "function",
      "name": "DeleteUserWorkloadsConfigMapRequest",
      "description": "Delete user workloads ConfigMap request.\n\nAttributes:\n    name (str):\n        Required. The ConfigMap to delete, in the\n        form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}\".",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Required. The ConfigMap to delete, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}\".",
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "type": "function",
      "name": "ListWorkloadsRequest",
      "description": "Request for listing workloads in a Cloud Composer\nenvironment.\n\nAttributes:\n    parent (str):\n        Required. The environment name to get\n        workloads for, in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".\n    page_size (int):\n        Optional. The maximum number of environments\n        to return.\n    page_token (str):\n        Optional. The next_page_token value returned from a previous\n        List request, if any.\n    filter (str):\n        Optional. The list filter. Currently only supports equality\n        on the type field. The value of a field specified in the\n        filter expression must be one ComposerWorkloadType enum\n        option. It's possible to get multiple types using \"OR\"\n        operator, e.g.: \"type=SCHEDULER OR type=CELERY_WORKER\". If\n        not specified, all items are returned.",
      "parameters": {
        "type": "object",
        "properties": {
          "parent": {
            "description": "Required. The environment name to get workloads for, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          },
          "page_size": {
            "description": "Optional. The maximum number of environments to return.",
            "type": "integer"
          },
          "page_token": {
            "description": "Optional. The next_page_token value returned from a previous List request, if any.",
            "type": "string"
          },
          "filter": {
            "description": "Optional. The list filter. Currently only supports equality on the type field. The value of a field specified in the filter expression must be one ComposerWorkloadType enum option. It's possible to get multiple types using \"OR\" operator, e.g.: \"type=SCHEDULER OR type=CELERY_WORKER\". If not specified, all items are returned.",
            "type": "string"
          }
        },
        "required": [
          "parent"
        ]
      }
    },
    {
      "type": "function",
      "name": "SaveSnapshotRequest",
      "description": "Request to create a snapshot of a Cloud Composer environment.\n\nAttributes:\n    environment (str):\n        The resource name of the source environment\n        in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".\n    snapshot_location (str):\n        Location in a Cloud Storage where the\n        snapshot is going to be stored, e.g.:\n        \"gs://my-bucket/snapshots\".",
      "parameters": {
        "type": "object",
        "properties": {
          "environment": {
            "description": "The resource name of the source environment in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          },
          "snapshot_location": {
            "description": "Location in a Cloud Storage where the snapshot is going to be stored, e.g.: \"gs://my-bucket/snapshots\".",
            "type": "string"
          }
        }
      }
    },
    {
      "type": "function",
      "name": "LoadSnapshotRequest",
      "description": "Request to load a snapshot into a Cloud Composer environment.\n\nAttributes:\n    environment (str):\n        The resource name of the target environment\n        in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".\n    snapshot_path (str):\n        A Cloud Storage path to a snapshot to load, e.g.:\n        \"gs://my-bucket/snapshots/project_location_environment_timestamp\".\n    skip_pypi_packages_installation (bool):\n        Whether or not to skip installing Pypi\n        packages when loading the environment's state.\n    skip_environment_variables_setting (bool):\n        Whether or not to skip setting environment\n        variables when loading the environment's state.\n    skip_airflow_overrides_setting (bool):\n        Whether or not to skip setting Airflow\n        overrides when loading the environment's state.\n    skip_gcs_data_copying (bool):\n        Whether or not to skip copying Cloud Storage\n        data when loading the environment's state.",
      "parameters": {
        "type": "object",
        "properties": {
          "environment": {
            "description": "The resource name of the target environment in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          },
          "snapshot_path": {
            "description": "A Cloud Storage path to a snapshot to load, e.g.: \"gs://my-bucket/snapshots/project_location_environment_timestamp\".",
            "type": "string"
          },
          "skip_pypi_packages_installation": {
            "description": "Whether or not to skip installing Pypi packages when loading the environment's state.",
            "type": "boolean"
          },
          "skip_environment_variables_setting": {
            "description": "Whether or not to skip setting environment variables when loading the environment's state.",
            "type": "boolean"
          },
          "skip_airflow_overrides_setting": {
            "description": "Whether or not to skip setting Airflow overrides when loading the environment's state.",
            "type": "boolean"
          },
          "skip_gcs_data_copying": {
            "description": "Whether or not to skip copying Cloud Storage data when loading the environment's state.",
            "type": "boolean"
          }
        }
      }
    },
    {
      "type": "function",
      "name": "DatabaseFailoverRequest",
      "description": "Request to trigger database failover (only for highly\nresilient environments).\n\nAttributes:\n    environment (str):\n        Target environment:\n\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
      "parameters": {
        "type": "object",
        "properties": {
          "environment": {
            "description": "Target environment:  \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          }
        }
      }
    },
    {
      "type": "function",
      "name": "FetchDatabasePropertiesRequest",
      "description": "Request to fetch properties of environment's database.\n\nAttributes:\n    environment (str):\n        Required. The resource name of the\n        environment, in the form:\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
      "parameters": {
        "type": "object",
        "properties": {
          "environment": {
            "description": "Required. The resource name of the environment, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          }
        },
        "required": [
          "environment"
        ]
      }
    },
    {
      "type": "function",
      "name": "CheckUpgradeRequest",
      "description": "Request to check whether image upgrade will succeed.\n\nAttributes:\n    environment (str):\n        The resource name of the environment to check\n        upgrade for, in the form:\n\n        \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".\n    image_version (str):\n        The version of the software running in the environment. This\n        encapsulates both the version of Cloud Composer\n        functionality and the version of Apache Airflow. It must\n        match the regular expression\n        ``composer-([0-9]+(\\.[0-9]+\\.[0-9]+(-preview\\.[0-9]+)?)?|latest)-airflow-([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)``.\n        When used as input, the server also checks if the provided\n        version is supported and denies the request for an\n        unsupported version.\n\n        The Cloud Composer portion of the image version is a full\n        `semantic version <https://semver.org>`__, or an alias in\n        the form of major version number or ``latest``. When an\n        alias is provided, the server repla",
      "parameters": {
        "type": "object",
        "properties": {
          "environment": {
            "description": "The resource name of the environment to check upgrade for, in the form:  \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\".",
            "type": "string"
          },
          "image_version": {
            "description": "The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression ``composer-([0-9]+(\\.[0-9]+\\.[0-9]+(-preview\\.[0-9]+)?)?|latest)-airflow-([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)``. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version.  The Cloud Composer portion of the image version is a full `semantic version <https://semver.org>`__, or an alias in the form of major version number or ``latest``. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias.  The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version.  In all cases, the resolved image version is stored in the same field.  See also `version list </composer/docs/concepts/versioning/composer-versions>`__ and `versioning overview </composer/docs/concepts/versioning/composer-versioning-overview>`__.",
            "type": "string"
          }
        }
      }
    }
  ],
  "\\Users\\AMD\\vidhra\\internal\\ast\\google-cloud-python\\packages\\google-cloud-orchestration-airflow\\google\\cloud\\orchestration\\airflow\\service_v1beta1\\types\\image_versions.py": [
    {
      "type": "function",
      "name": "ListImageVersionsRequest",
      "description": "List ImageVersions in a project and location.\n\nAttributes:\n    parent (str):\n        List ImageVersions in the given project and\n        location, in the form:\n        \"projects/{projectId}/locations/{locationId}\".\n    page_size (int):\n        The maximum number of image_versions to return.\n    page_token (str):\n        The next_page_token value returned from a previous List\n        request, if any.\n    include_past_releases (bool):\n        Whether or not image versions from old\n        releases should be included.",
      "parameters": {
        "type": "object",
        "properties": {
          "parent": {
            "description": "List ImageVersions in the given project and location, in the form: \"projects/{projectId}/locations/{locationId}\".",
            "type": "string"
          },
          "page_size": {
            "description": "The maximum number of image_versions to return.",
            "type": "integer"
          },
          "page_token": {
            "description": "The next_page_token value returned from a previous List request, if any.",
            "type": "string"
          },
          "include_past_releases": {
            "description": "Whether or not image versions from old releases should be included.",
            "type": "boolean"
          }
        }
      }
    }
  ]
}