{
  "\\Users\\AMD\\vidhra\\internal\\ast\\google-cloud-python\\packages\\google-cloud-confidentialcomputing\\google\\cloud\\confidentialcomputing_v1\\types\\service.py": [
    {
      "type": "function",
      "name": "CreateChallengeRequest",
      "description": "Message for creating a Challenge\n\nAttributes:\n    parent (str):\n        Required. The resource name of the location where the\n        Challenge will be used, in the format\n        ``projects/*/locations/*``.\n    challenge (google.cloud.confidentialcomputing_v1.types.Challenge):\n        Required. The Challenge to be created.\n        Currently this field can be empty as all the\n        Challenge fields are set by the server.",
      "parameters": {
        "type": "object",
        "properties": {
          "parent": {
            "description": "Required. The resource name of the location where the Challenge will be used, in the format ``projects/*/locations/*``.",
            "type": "string"
          },
          "challenge": {
            "description": "Challenge information for SCORE_AND_CHALLENGE keys\n\nValues:\n    CHALLENGE_UNSPECIFIED (0):\n        Default unspecified type.\n    NOCAPTCHA (1):\n        No challenge was presented for solving.\n    PASSED (2):\n        A solution was submitted that was correct.\n    FAILED (3):\n        A solution was submitted that was incorrect\n        or otherwise deemed suspicious.",
            "type": "enum",
            "name": "Challenge",
            "values": {
              "CHALLENGE_UNSPECIFIED": {
                "value": 0
              },
              "NOCAPTCHA": {
                "value": 1
              },
              "PASSED": {
                "value": 2
              },
              "FAILED": {
                "value": 3
              }
            }
          }
        },
        "required": [
          "parent",
          "challenge"
        ]
      }
    },
    {
      "type": "function",
      "name": "VerifyAttestationRequest",
      "description": "A request for an OIDC token, providing all the necessary\ninformation needed for this service to verify the plaform state\nof the requestor.\n\nThis message has `oneof`_ fields (mutually exclusive fields).\nFor each oneof, at most one member field can be set at the same time.\nSetting any member of the oneof automatically clears all other\nmembers.\n\n.. _oneof: https://proto-plus-python.readthedocs.io/en/stable/fields.html#oneofs-mutually-exclusive-fields\n\nAttributes:\n    td_ccel (google.cloud.confidentialcomputing_v1.types.TdxCcelAttestation):\n        Optional. A TDX with CCEL and RTMR\n        Attestation Quote.\n\n        This field is a member of `oneof`_ ``tee_attestation``.\n    sev_snp_attestation (google.cloud.confidentialcomputing_v1.types.SevSnpAttestation):\n        Optional. An SEV-SNP Attestation Report.\n\n        This field is a member of `oneof`_ ``tee_attestation``.\n    challenge (str):\n        Required. The name of the Challenge whose nonce was used to\n        generate the attestation, in the format\n      ",
      "parameters": {
        "type": "object",
        "properties": {
          "td_ccel": {
            "description": "Optional. A TDX with CCEL and RTMR Attestation Quote.  This field is a member of `oneof`_ ``tee_attestation``.",
            "type": "object",
            "properties": {
              "ccel_acpi_table": {
                "description": "Optional. The Confidential Computing Event Log (CCEL) ACPI table. Formatted as described in the ACPI Specification 6.5.",
                "type": "object",
                "reference": "bytes"
              },
              "ccel_data": {
                "description": "Optional. The CCEL event log. Formatted as described in the UEFI 2.10.",
                "type": "object",
                "reference": "bytes"
              },
              "canonical_event_log": {
                "description": "Optional. An Event Log containing additional events measured into the RTMR that are not already present in the CCEL.",
                "type": "object",
                "reference": "bytes"
              },
              "td_quote": {
                "description": "Optional. The TDX attestation quote from the guest. It contains the RTMR values.",
                "type": "object",
                "reference": "bytes"
              }
            }
          },
          "sev_snp_attestation": {
            "description": "Optional. An SEV-SNP Attestation Report.  This field is a member of `oneof`_ ``tee_attestation``.",
            "type": "object",
            "properties": {
              "report": {
                "description": "Optional. The SEV-SNP Attestation Report Format is in revision 1.55, \u00a77.3 Attestation, Table 22. ATTESTATION_REPORT Structure in this document: https://www.amd.com/content/dam/amd/en/documents/epyc-technical-docs/specifications/56860.pdf",
                "type": "object",
                "reference": "bytes"
              },
              "aux_blob": {
                "description": "Optional. Certificate bundle defined in the GHCB protocol definition Format is documented in GHCB revision 2.03, section 4.1.8.1 struct cert_table in this document: https://www.amd.com/content/dam/amd/en/documents/epyc-technical-docs/specifications/56421.pdf",
                "type": "object",
                "reference": "bytes"
              }
            }
          },
          "challenge": {
            "description": "Required. The name of the Challenge whose nonce was used to generate the attestation, in the format ``projects/*/locations/*/challenges/*``. The provided Challenge will be consumed, and cannot be used again.",
            "type": "string"
          },
          "gcp_credentials": {
            "description": "Optional. Credentials used to populate the \"emails\" claim in the claims_token.",
            "type": "object",
            "properties": {
              "service_account_id_tokens": {
                "description": "Same as id_tokens, but as a string.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "tpm_attestation": {
            "description": "Required. The TPM-specific data provided by the attesting platform, used to populate any of the claims regarding platform state.",
            "type": "object",
            "properties": {
              "quotes": {
                "description": "TPM2 PCR Quotes generated by calling TPM2_Quote on each PCR bank.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "hash_algo": {
                      "description": "The hash algorithm of the PCR bank being quoted, encoded as a TPM_ALG_ID",
                      "type": "integer"
                    },
                    "pcr_values": {
                      "description": "Raw binary values of each PCRs being quoted.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "reference": "bytes"
                      }
                    },
                    "raw_quote": {
                      "description": "TPM2 quote, encoded as a TPMS_ATTEST",
                      "type": "object",
                      "reference": "bytes"
                    },
                    "raw_signature": {
                      "description": "TPM2 signature, encoded as a TPMT_SIGNATURE",
                      "type": "object",
                      "reference": "bytes"
                    }
                  }
                }
              },
              "tcg_event_log": {
                "description": "The binary TCG Event Log containing events measured into the TPM by the platform firmware and operating system. Formatted as described in the \"TCG PC Client Platform Firmware Profile Specification\".",
                "type": "object",
                "reference": "bytes"
              },
              "canonical_event_log": {
                "description": "An Event Log containing additional events measured into the TPM that are not already present in the tcg_event_log. Formatted as described in the \"Canonical Event Log Format\" TCG Specification.",
                "type": "object",
                "reference": "bytes"
              },
              "ak_cert": {
                "description": "DER-encoded X.509 certificate of the Attestation Key (otherwise known as an AK or a TPM restricted signing key) used to generate the quotes.",
                "type": "object",
                "reference": "bytes"
              },
              "cert_chain": {
                "description": "List of DER-encoded X.509 certificates which, together with the ak_cert, chain back to a trusted Root Certificate.",
                "type": "array",
                "items": {
                  "type": "object",
                  "reference": "bytes"
                }
              }
            }
          },
          "confidential_space_info": {
            "description": "Optional. Optional information related to the Confidential Space TEE.",
            "type": "object",
            "properties": {
              "signed_entities": {
                "description": "Optional. A list of signed entities containing container image signatures that can be used for server-side signature verification.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "container_image_signatures": {
                      "description": "Optional. A list of container image signatures attached to an OCI image object.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "description": "Optional. The binary signature payload following the SimpleSigning format https://github.com/sigstore/cosign/blob/main/specs/SIGNATURE_SPEC.md#simple-signing. This payload includes the container image digest.",
                            "type": "object",
                            "reference": "bytes"
                          },
                          "signature": {
                            "description": "Optional. A signature over the payload. The container image digest is incorporated into the signature as follows:  1. Generate a SimpleSigning format payload that includes the container image digest. 2. Generate a signature over SHA256 digest of the payload. The signature generation process can be represented as follows: ``Sign(sha256(SimpleSigningPayload(sha256(Image Manifest))))``",
                            "type": "object",
                            "reference": "bytes"
                          },
                          "public_key": {
                            "description": "Optional. Reserved for future use.",
                            "type": "object",
                            "reference": "bytes"
                          },
                          "sig_alg": {
                            "type": "enum",
                            "name": "SigningAlgorithm",
                            "description": "SigningAlgorithm enumerates all the supported signing\nalgorithms.\n\nValues:\n    SIGNING_ALGORITHM_UNSPECIFIED (0):\n        Unspecified signing algorithm.\n    RSASSA_PSS_SHA256 (1):\n        RSASSA-PSS with a SHA256 digest.\n    RSASSA_PKCS1V15_SHA256 (2):\n        RSASSA-PKCS1 v1.5 with a SHA256 digest.\n    ECDSA_P256_SHA256 (3):\n        ECDSA on the P-256 Curve with a SHA256\n        digest.",
                            "values": {
                              "SIGNING_ALGORITHM_UNSPECIFIED": {
                                "value": 0
                              },
                              "RSASSA_PSS_SHA256": {
                                "value": 1
                              },
                              "RSASSA_PKCS1V15_SHA256": {
                                "value": 2
                              },
                              "ECDSA_P256_SHA256": {
                                "value": 3
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "token_options": {
            "description": "Optional. A collection of optional, workload-specified claims that modify the token output.",
            "type": "object",
            "properties": {
              "audience": {
                "description": "Optional. Optional string to issue the token with a custom audience claim. Required if one or more nonces are specified.",
                "type": "string"
              },
              "nonce": {
                "description": "Optional. Optional parameter to place one or more nonces in the eat_nonce claim in the output token. The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "token_type": {
                "type": "enum",
                "name": "TokenType",
                "description": "Token type enum contains the different types of token\nresponses Confidential Space supports\n\nValues:\n    TOKEN_TYPE_UNSPECIFIED (0):\n        Unspecified token type\n    TOKEN_TYPE_OIDC (1):\n        OpenID Connect (OIDC) token type\n    TOKEN_TYPE_PKI (2):\n        Public Key Infrastructure (PKI) token type\n    TOKEN_TYPE_LIMITED_AWS (3):\n        Limited claim token type for AWS integration",
                "values": {
                  "TOKEN_TYPE_UNSPECIFIED": {
                    "value": 0
                  },
                  "TOKEN_TYPE_OIDC": {
                    "value": 1
                  },
                  "TOKEN_TYPE_PKI": {
                    "value": 2
                  },
                  "TOKEN_TYPE_LIMITED_AWS": {
                    "value": 3
                  }
                }
              }
            }
          }
        },
        "required": [
          "challenge",
          "tpm_attestation"
        ]
      }
    }
  ]
}