{
  "Tpu": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_nodes",
          "description": "Lists nodes.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tpu_v1\n\n    async def sample_list_nodes():\n        # Create a client\n        client = tpu_v1.TpuAsyncClient()\n\n        # Initialize request argument(s)\n        request = tpu_v1.ListNodesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_nodes(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.tpu_v1.types.ListNodesRequest, dict]]):\n        The request object. ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource name. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tpu_v1.services.tpu.pagers.ListNodesAsyncPager: Response for [ListNodes][google.cloud.tpu.v1.Tpu.ListNodes].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.tpu_v1.services.tpu.pagers.ListNodesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_node",
          "description": "Gets the details of a node.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tpu_v1\n\n    async def sample_get_node():\n        # Create a client\n        client = tpu_v1.TpuAsyncClient()\n\n        # Initialize request argument(s)\n        request = tpu_v1.GetNodeRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_node(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.tpu_v1.types.GetNodeRequest, dict]]):\n        The request object. Request for [GetNode][google.cloud.tpu.v1",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tpu_v1.types.Node: A TPU instance."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.tpu_v1.types.Node"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_node",
          "description": "Creates a node.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tpu_v1\n\n    async def sample_create_node():\n        # Create a client\n        client = tpu_v1.TpuAsyncClient()\n\n        # Initialize request argument(s)\n        node = tpu_v1.Node()\n        node.accelerator_type = \"accelerator_type_value\"\n        node.tensorflow_version = \"tensorflow_version_value\"\n\n        request = tpu_v1.CreateNodeRequest(\n            parent=\"parent_value\",\n            node=node,\n        )\n\n        # Make the request\n        operation = client.create_node(request=request)\n\n        print(\"Waiting for operation to co",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource name. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "node": {
                "type": "google.cloud.tpu_v1.types.Node",
                "description": "Required. The node. This corresponds to the ``node`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "node_id": {
                "type": "str",
                "description": "The unqualified resource name. This corresponds to the ``node_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.tpu_v1.types.Node` A TPU instance."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "node",
              "node_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_node",
          "description": "Deletes a node.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tpu_v1\n\n    async def sample_delete_node():\n        # Create a client\n        client = tpu_v1.TpuAsyncClient()\n\n        # Initialize request argument(s)\n        request = tpu_v1.DeleteNodeRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_node(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.tpu_v1.types.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.tpu_v1.types.Node` A TPU instance."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "reimage_node",
          "description": "Reimages a node's OS.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tpu_v1\n\n    async def sample_reimage_node():\n        # Create a client\n        client = tpu_v1.TpuAsyncClient()\n\n        # Initialize request argument(s)\n        request = tpu_v1.ReimageNodeRequest(\n        )\n\n        # Make the request\n        operation = client.reimage_node(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.tpu_v1.types.ReimageNodeRequest, di",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "stop_node",
          "description": "Stops a node, this operation is only available with\nsingle TPU nodes.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tpu_v1\n\n    async def sample_stop_node():\n        # Create a client\n        client = tpu_v1.TpuAsyncClient()\n\n        # Initialize request argument(s)\n        request = tpu_v1.StopNodeRequest(\n        )\n\n        # Make the request\n        operation = client.stop_node(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "start_node",
          "description": "Starts a node.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tpu_v1\n\n    async def sample_start_node():\n        # Create a client\n        client = tpu_v1.TpuAsyncClient()\n\n        # Initialize request argument(s)\n        request = tpu_v1.StartNodeRequest(\n        )\n\n        # Make the request\n        operation = client.start_node(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.tpu_v1.types.StartNodeRequest, dict]]):\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_tensor_flow_versions",
          "description": "List TensorFlow versions supported by this API.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tpu_v1\n\n    async def sample_list_tensor_flow_versions():\n        # Create a client\n        client = tpu_v1.TpuAsyncClient()\n\n        # Initialize request argument(s)\n        request = tpu_v1.ListTensorFlowVersionsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_tensor_flow_versions(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[goo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource name. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tpu_v1.services.tpu.pagers.ListTensorFlowVersionsAsyncPager: Response for [ListTensorFlowVersions][google.cloud.tpu.v1.Tpu.ListTensorFlowVersions].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.tpu_v1.services.tpu.pagers.ListTensorFlowVersionsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_tensor_flow_version",
          "description": "Gets TensorFlow Version.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tpu_v1\n\n    async def sample_get_tensor_flow_version():\n        # Create a client\n        client = tpu_v1.TpuAsyncClient()\n\n        # Initialize request argument(s)\n        request = tpu_v1.GetTensorFlowVersionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_tensor_flow_version(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.tpu_v1.types.GetTensorFlowVersionRequest, dict]]):\n        The requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tpu_v1.types.TensorFlowVersion: A tensorflow version that a Node can be configured with."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.tpu_v1.types.TensorFlowVersion"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_accelerator_types",
          "description": "Lists accelerator types supported by this API.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tpu_v1\n\n    async def sample_list_accelerator_types():\n        # Create a client\n        client = tpu_v1.TpuAsyncClient()\n\n        # Initialize request argument(s)\n        request = tpu_v1.ListAcceleratorTypesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_accelerator_types(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource name. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tpu_v1.services.tpu.pagers.ListAcceleratorTypesAsyncPager: Response for [ListAcceleratorTypes][google.cloud.tpu.v1.Tpu.ListAcceleratorTypes].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.tpu_v1.services.tpu.pagers.ListAcceleratorTypesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_accelerator_type",
          "description": "Gets AcceleratorType.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tpu_v1\n\n    async def sample_get_accelerator_type():\n        # Create a client\n        client = tpu_v1.TpuAsyncClient()\n\n        # Initialize request argument(s)\n        request = tpu_v1.GetAcceleratorTypeRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_accelerator_type(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.tpu_v1.types.GetAcceleratorTypeRequest, dict]]):\n        The request object. R",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tpu_v1.types.AcceleratorType: A accelerator type that a Node can be configured with."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.tpu_v1.types.AcceleratorType"
          ]
        }
      }
    ]
  }
}