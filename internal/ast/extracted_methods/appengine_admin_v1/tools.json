{
  "Applications": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "get_application",
          "description": "Gets information about an application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_get_application():\n        # Create a client\n        client = appengine_admin_v1.ApplicationsAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.GetApplicationRequest(\n        )\n\n        # Make the request\n        response = await client.get_application(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_admin_v1.types.GetApplicationRequest, dict]]):\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Name of the Application resource to get. Example: ``apps/myapp``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.appengine_admin_v1.types.Application: An Application resource contains the top-level configuration of an App Engine application."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Applications.GetApplicationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_application",
          "description": "Creates an App Engine application for a Google Cloud Platform\nproject. Required fields:\n\n-  ``id`` - The ID of the target Cloud Platform project.\n-  *location* - The\n   `region <https://cloud.google.com/appengine/docs/locations>`__\n   where you want the App Engine application located.\n\nFor more information about App Engine applications, see\n`Managing Projects, Applications, and\nBilling <https://cloud.google.com/appengine/docs/standard/python/console/>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_create_application():\n        # Create a client\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Applications.CreateApplicationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_application",
          "description": "Updates the specified Application resource. You can update the\nfollowing fields:\n\n-  ``auth_domain`` - Google authentication domain for\n   controlling user access to the application.\n-  ``default_cookie_expiration`` - Cookie expiration policy for\n   the application.\n-  ``iap`` - Identity-Aware Proxy properties for the\n   application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_update_application():\n        # Create a client\n        client = appengine_admin_v1.ApplicationsAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Applications.UpdateApplicationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "repair_application",
          "description": "Recreates the required App Engine features for the specified App\nEngine application, for example a Cloud Storage bucket or App\nEngine service account. Use this method if you receive an error\nmessage about a missing feature, for example, *Error retrieving\nthe App Engine service account*. If you have deleted your App\nEngine service account, this will not be able to recreate it.\nInstead, you should attempt to use the IAM undelete API if\npossible at\nhttps://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/undelete?apix_params=%7B\"name\"%3A\"projects%2F-%2FserviceAccounts%2Funique_id\"%2C\"resource\"%3A%7B%7D%7D\n. If the deletion was recent, the numeric ID can be found in the\nCloud Console Activity Log.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints wh",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "AuthorizedCertificates": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_authorized_certificates",
          "description": "Lists all SSL certificates the user is authorized to\nadminister.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_list_authorized_certificates():\n        # Create a client\n        client = appengine_admin_v1.AuthorizedCertificatesAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.ListAuthorizedCertificatesRequest(\n        )\n\n        # Make the request\n        page_result = client.list_authorized_certificates(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "AuthorizedCertificates.ListAuthorizedCertificatesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_authorized_certificate",
          "description": "Gets the specified SSL certificate.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_get_authorized_certificate():\n        # Create a client\n        client = appengine_admin_v1.AuthorizedCertificatesAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.GetAuthorizedCertificateRequest(\n        )\n\n        # Make the request\n        response = await client.get_authorized_certificate(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_admin_v1.typ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "AuthorizedCertificates.GetAuthorizedCertificateRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_authorized_certificate",
          "description": "Uploads the specified SSL certificate.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_create_authorized_certificate():\n        # Create a client\n        client = appengine_admin_v1.AuthorizedCertificatesAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.CreateAuthorizedCertificateRequest(\n        )\n\n        # Make the request\n        response = await client.create_authorized_certificate(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "AuthorizedCertificates.CreateAuthorizedCertificateRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_authorized_certificate",
          "description": "Updates the specified SSL certificate. To renew a certificate\nand maintain its existing domain mappings, update\n``certificate_data`` with a new certificate. The new certificate\nmust be applicable to the same domains as the original\ncertificate. The certificate ``display_name`` may also be\nupdated.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_update_authorized_certificate():\n        # Create a client\n        client = appengine_admin_v1.AuthorizedCertificatesAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.Update",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "AuthorizedCertificates.UpdateAuthorizedCertificateRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_authorized_certificate",
          "description": "Deletes the specified SSL certificate.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_delete_authorized_certificate():\n        # Create a client\n        client = appengine_admin_v1.AuthorizedCertificatesAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.DeleteAuthorizedCertificateRequest(\n        )\n\n        # Make the request\n        await client.delete_authorized_certificate(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_admin_v1.types.DeleteAuthorizedCertificateRequest, dict]]):\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "AuthorizedCertificates.DeleteAuthorizedCertificateRequest"
          ]
        }
      }
    ]
  },
  "AuthorizedDomains": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_authorized_domains",
          "description": "Lists all domains the user is authorized to\nadminister.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_list_authorized_domains():\n        # Create a client\n        client = appengine_admin_v1.AuthorizedDomainsAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.ListAuthorizedDomainsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_authorized_domains(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "AuthorizedDomains.ListAuthorizedDomainsRequest"
          ]
        }
      }
    ]
  },
  "DomainMappings": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_domain_mappings",
          "description": "Lists the domain mappings on an application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_list_domain_mappings():\n        # Create a client\n        client = appengine_admin_v1.DomainMappingsAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.ListDomainMappingsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_domain_mappings(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.c",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "DomainMappings.ListDomainMappingsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_domain_mapping",
          "description": "Gets the specified domain mapping.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_get_domain_mapping():\n        # Create a client\n        client = appengine_admin_v1.DomainMappingsAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.GetDomainMappingRequest(\n        )\n\n        # Make the request\n        response = await client.get_domain_mapping(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_admin_v1.types.GetDomainMappingRequest, dict]",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "DomainMappings.GetDomainMappingRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_domain_mapping",
          "description": "Maps a domain to an application. A user must be authorized to\nadminister a domain in order to map it to an application. For a\nlist of available authorized domains, see\n```AuthorizedDomains.ListAuthorizedDomains`` <>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_create_domain_mapping():\n        # Create a client\n        client = appengine_admin_v1.DomainMappingsAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.CreateDomainMappingRequest(\n        )\n\n        # Make the request\n        operation = client.create_d",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "DomainMappings.CreateDomainMappingRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_domain_mapping",
          "description": "Updates the specified domain mapping. To map an SSL certificate\nto a domain mapping, update ``certificate_id`` to point to an\n``AuthorizedCertificate`` resource. A user must be authorized to\nadminister the associated domain in order to update a\n``DomainMapping`` resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_update_domain_mapping():\n        # Create a client\n        client = appengine_admin_v1.DomainMappingsAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.UpdateDomainMappingRequest(\n        )\n\n        #",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "DomainMappings.UpdateDomainMappingRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_domain_mapping",
          "description": "Deletes the specified domain mapping. A user must be authorized\nto administer the associated domain in order to delete a\n``DomainMapping`` resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_delete_domain_mapping():\n        # Create a client\n        client = appengine_admin_v1.DomainMappingsAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.DeleteDomainMappingRequest(\n        )\n\n        # Make the request\n        operation = client.delete_domain_mapping(request=request)\n\n        print(\"Waiting for operation to",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "DomainMappings.DeleteDomainMappingRequest"
          ]
        }
      }
    ]
  },
  "Firewall": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_ingress_rules",
          "description": "Lists the firewall rules of an application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_list_ingress_rules():\n        # Create a client\n        client = appengine_admin_v1.FirewallAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.ListIngressRulesRequest(\n        )\n\n        # Make the request\n        page_result = client.list_ingress_rules(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.appengin",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Firewall.ListIngressRulesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_update_ingress_rules",
          "description": "Replaces the entire firewall ruleset in one bulk operation. This\noverrides and replaces the rules of an existing firewall with\nthe new rules.\n\nIf the final rule does not match traffic with the '*' wildcard\nIP range, then an \"allow all\" rule is explicitly added to the\nend of the list.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_batch_update_ingress_rules():\n        # Create a client\n        client = appengine_admin_v1.FirewallAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.BatchUpdateIngressRulesRequest(\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Firewall.BatchUpdateIngressRulesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_ingress_rule",
          "description": "Creates a firewall rule for the application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_create_ingress_rule():\n        # Create a client\n        client = appengine_admin_v1.FirewallAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.CreateIngressRuleRequest(\n        )\n\n        # Make the request\n        response = await client.create_ingress_rule(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_admin_v1.types.CreateIngressRuleReques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Firewall.CreateIngressRuleRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_ingress_rule",
          "description": "Gets the specified firewall rule.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_get_ingress_rule():\n        # Create a client\n        client = appengine_admin_v1.FirewallAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.GetIngressRuleRequest(\n        )\n\n        # Make the request\n        response = await client.get_ingress_rule(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_admin_v1.types.GetIngressRuleRequest, dict]]):\n        The",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Firewall.GetIngressRuleRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_ingress_rule",
          "description": "Updates the specified firewall rule.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_update_ingress_rule():\n        # Create a client\n        client = appengine_admin_v1.FirewallAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.UpdateIngressRuleRequest(\n        )\n\n        # Make the request\n        response = await client.update_ingress_rule(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_admin_v1.types.UpdateIngressRuleRequest, dict]",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Firewall.UpdateIngressRuleRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_ingress_rule",
          "description": "Deletes the specified firewall rule.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_delete_ingress_rule():\n        # Create a client\n        client = appengine_admin_v1.FirewallAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.DeleteIngressRuleRequest(\n        )\n\n        # Make the request\n        await client.delete_ingress_rule(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_admin_v1.types.DeleteIngressRuleRequest, dict]]):\n        The request object. Request message for ``Firewall.Del",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Firewall.DeleteIngressRuleRequest"
          ]
        }
      }
    ]
  },
  "Instances": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_instances",
          "description": "Lists the instances of a version.\n\nTip: To aggregate details about instances over time, see the\n`Stackdriver Monitoring\nAPI <https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_list_instances():\n        # Create a client\n        client = appengine_admin_v1.InstancesAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.ListInstancesRequest(\n        )\n\n        # Make the request\n        page_result = client.list_instances(request=request)\n\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Instances.ListInstancesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_instance",
          "description": "Gets instance information.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_get_instance():\n        # Create a client\n        client = appengine_admin_v1.InstancesAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.GetInstanceRequest(\n        )\n\n        # Make the request\n        response = await client.get_instance(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_admin_v1.types.GetInstanceRequest, dict]]):\n        The request object. Req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Instances.GetInstanceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_instance",
          "description": "Stops a running instance.\n\nThe instance might be automatically recreated based on the\nscaling settings of the version. For more information, see \"How\nInstances are Managed\" (`standard\nenvironment <https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed>`__\n\\| `flexible\nenvironment <https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed>`__).\n\nTo ensure that instances are not re-created and avoid getting\nbilled, you can stop all instances within the target version by\nchanging the serving status of the version to ``STOPPED`` with\nthe\n```apps.services.versions.patch`` <https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch>`__\nmethod.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regi",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Instances.DeleteInstanceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "debug_instance",
          "description": "Enables debugging on a VM instance. This allows you\nto use the SSH command to connect to the virtual machine\nwhere the instance lives. While in \"debug mode\", the\ninstance continues to serve live traffic. You should\ndelete the instance when you are done debugging and then\nallow the system to take over and determine if another\ninstance should be started.\n\nOnly applicable for instances in App Engine flexible\nenvironment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_debug_instance():\n        # Create a client\n        client = appengine_admin_v1.InstancesAsyn",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Instances.DebugInstanceRequest"
          ]
        }
      }
    ]
  },
  "Services": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_services",
          "description": "Lists all the services in the application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_list_services():\n        # Create a client\n        client = appengine_admin_v1.ServicesAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.ListServicesRequest(\n        )\n\n        # Make the request\n        page_result = client.list_services(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_admin_v1.type",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Services.ListServicesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_service",
          "description": "Gets the current configuration of the specified\nservice.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_get_service():\n        # Create a client\n        client = appengine_admin_v1.ServicesAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.GetServiceRequest(\n        )\n\n        # Make the request\n        response = await client.get_service(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_admin_v1.types.GetServiceRequest, dict]]):\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Services.GetServiceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_service",
          "description": "Updates the configuration of the specified service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_update_service():\n        # Create a client\n        client = appengine_admin_v1.ServicesAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.UpdateServiceRequest(\n        )\n\n        # Make the request\n        operation = client.update_service(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Services.UpdateServiceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_service",
          "description": "Deletes the specified service and all enclosed\nversions.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_delete_service():\n        # Create a client\n        client = appengine_admin_v1.ServicesAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.DeleteServiceRequest(\n        )\n\n        # Make the request\n        operation = client.delete_service(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Services.DeleteServiceRequest"
          ]
        }
      }
    ]
  },
  "Versions": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_versions",
          "description": "Lists the versions of a service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_list_versions():\n        # Create a client\n        client = appengine_admin_v1.VersionsAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.ListVersionsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_versions(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.appengine_admin_v1.types.ListVers",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Versions.ListVersionsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_version",
          "description": "Gets the specified Version resource. By default, only a\n``BASIC_VIEW`` will be returned. Specify the ``FULL_VIEW``\nparameter to get the full resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_get_version():\n        # Create a client\n        client = appengine_admin_v1.VersionsAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.GetVersionRequest(\n        )\n\n        # Make the request\n        response = await client.get_version(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    re",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Versions.GetVersionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_version",
          "description": "Deploys code and resource files to a new version.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_create_version():\n        # Create a client\n        client = appengine_admin_v1.VersionsAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.CreateVersionRequest(\n        )\n\n        # Make the request\n        operation = client.create_version(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Versions.CreateVersionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_version",
          "description": "Updates the specified Version resource. You can specify the\nfollowing fields depending on the App Engine environment and\ntype of scaling that the version resource uses:\n\n**Standard environment**\n\n-  ```instance_class`` <https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class>`__\n\n*automatic scaling* in the standard environment:\n\n-  ```automatic_scaling.min_idle_instances`` <https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling>`__\n-  ```automatic_scaling.max_idle_instances`` <https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling>`__\n-  ```automaticScaling.standard_scheduler_settings.max_instances`` <https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings>`__\n-  ```automaticScaling.standard_scheduler_settings.min_instances`` <https://cloud.google.co",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Versions.UpdateVersionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_version",
          "description": "Deletes an existing Version resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import appengine_admin_v1\n\n    async def sample_delete_version():\n        # Create a client\n        client = appengine_admin_v1.VersionsAsyncClient()\n\n        # Initialize request argument(s)\n        request = appengine_admin_v1.DeleteVersionRequest(\n        )\n\n        # Make the request\n        operation = client.delete_version(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Versions.DeleteVersionRequest"
          ]
        }
      }
    ]
  }
}