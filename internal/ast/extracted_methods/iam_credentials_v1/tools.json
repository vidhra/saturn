{
  "IAMCredentials": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "generate_access_token",
          "description": "Generates an OAuth 2.0 access token for a service\naccount.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import iam_credentials_v1\n\n    async def sample_generate_access_token():\n        # Create a client\n        client = iam_credentials_v1.IAMCredentialsAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_credentials_v1.GenerateAccessTokenRequest(\n            name=\"name_value\",\n            scope=['scope_value1', 'scope_value2'],\n        )\n\n        # Make the request\n        response = await client.generate_access_token(request=request)\n\n        # Handle the response\n        pri",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the service account for which the credentials are requested, in the following format: ``projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}``. The ``-`` wildcard character is required; replacing it with a project ID is invalid.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "delegates": {
                "type": "MutableSequence[str]",
                "description": "The sequence of service accounts in a delegation chain. Each service account must be granted the ``roles/iam.serviceAccountTokenCreator`` role on its next service account in the chain. The last service account in the chain must be granted the ``roles/iam.serviceAccountTokenCreator`` role on the service account that is specified in the ``name`` field of the request.  The delegates must have the following format: ``projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}``. The ``-`` wildcard character is required; replacing it with a project ID is invalid.  This corresponds to the ``delegates`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "scope": {
                "type": "MutableSequence[str]",
                "description": "Required. Code to identify the scopes to be included in the OAuth 2.0 access token. See https://developers.google.com/identity/protocols/googlescopes for more information. At least one value required.  This corresponds to the ``scope`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "lifetime": {
                "type": "google.protobuf.duration_pb2.Duration",
                "description": "The desired lifetime duration of the access token in seconds. Must be set to a value less than or equal to 3600 (1 hour). If a value is not specified, the token's lifetime will be set to a default value of one hour.  This corresponds to the ``lifetime`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.iam_credentials_v1.types.GenerateAccessTokenResponse:"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "delegates",
              "scope",
              "lifetime",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.iam_credentials_v1.types.GenerateAccessTokenResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "generate_id_token",
          "description": "Generates an OpenID Connect ID token for a service\naccount.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import iam_credentials_v1\n\n    async def sample_generate_id_token():\n        # Create a client\n        client = iam_credentials_v1.IAMCredentialsAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_credentials_v1.GenerateIdTokenRequest(\n            name=\"name_value\",\n            audience=\"audience_value\",\n        )\n\n        # Make the request\n        response = await client.generate_id_token(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the service account for which the credentials are requested, in the following format: ``projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}``. The ``-`` wildcard character is required; replacing it with a project ID is invalid.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "delegates": {
                "type": "MutableSequence[str]",
                "description": "The sequence of service accounts in a delegation chain. Each service account must be granted the ``roles/iam.serviceAccountTokenCreator`` role on its next service account in the chain. The last service account in the chain must be granted the ``roles/iam.serviceAccountTokenCreator`` role on the service account that is specified in the ``name`` field of the request.  The delegates must have the following format: ``projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}``. The ``-`` wildcard character is required; replacing it with a project ID is invalid.  This corresponds to the ``delegates`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "audience": {
                "type": "str",
                "description": "Required. The audience for the token, such as the API or account that this token grants access to.  This corresponds to the ``audience`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "include_email": {
                "type": "bool",
                "description": "Include the service account email in the token. If set to ``true``, the token will contain ``email`` and ``email_verified`` claims.  This corresponds to the ``include_email`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.iam_credentials_v1.types.GenerateIdTokenResponse:"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "delegates",
              "audience",
              "include_email",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.iam_credentials_v1.types.GenerateIdTokenResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "sign_blob",
          "description": "Signs a blob using a service account's system-managed\nprivate key.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import iam_credentials_v1\n\n    async def sample_sign_blob():\n        # Create a client\n        client = iam_credentials_v1.IAMCredentialsAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_credentials_v1.SignBlobRequest(\n            name=\"name_value\",\n            payload=b'payload_blob',\n        )\n\n        # Make the request\n        response = await client.sign_blob(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the service account for which the credentials are requested, in the following format: ``projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}``. The ``-`` wildcard character is required; replacing it with a project ID is invalid.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "delegates": {
                "type": "MutableSequence[str]",
                "description": "The sequence of service accounts in a delegation chain. Each service account must be granted the ``roles/iam.serviceAccountTokenCreator`` role on its next service account in the chain. The last service account in the chain must be granted the ``roles/iam.serviceAccountTokenCreator`` role on the service account that is specified in the ``name`` field of the request.  The delegates must have the following format: ``projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}``. The ``-`` wildcard character is required; replacing it with a project ID is invalid.  This corresponds to the ``delegates`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "payload": {
                "type": "bytes",
                "description": "Required. The bytes to sign. This corresponds to the ``payload`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.iam_credentials_v1.types.SignBlobResponse:"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "delegates",
              "payload",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.iam_credentials_v1.types.SignBlobResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "sign_jwt",
          "description": "Signs a JWT using a service account's system-managed\nprivate key.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import iam_credentials_v1\n\n    async def sample_sign_jwt():\n        # Create a client\n        client = iam_credentials_v1.IAMCredentialsAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_credentials_v1.SignJwtRequest(\n            name=\"name_value\",\n            payload=\"payload_value\",\n        )\n\n        # Make the request\n        response = await client.sign_jwt(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Unio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the service account for which the credentials are requested, in the following format: ``projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}``. The ``-`` wildcard character is required; replacing it with a project ID is invalid.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "delegates": {
                "type": "MutableSequence[str]",
                "description": "The sequence of service accounts in a delegation chain. Each service account must be granted the ``roles/iam.serviceAccountTokenCreator`` role on its next service account in the chain. The last service account in the chain must be granted the ``roles/iam.serviceAccountTokenCreator`` role on the service account that is specified in the ``name`` field of the request.  The delegates must have the following format: ``projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}``. The ``-`` wildcard character is required; replacing it with a project ID is invalid.  This corresponds to the ``delegates`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "payload": {
                "type": "str",
                "description": "Required. The JWT payload to sign: a JSON object that contains a JWT Claims Set.  This corresponds to the ``payload`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.iam_credentials_v1.types.SignJwtResponse:"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "delegates",
              "payload",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.iam_credentials_v1.types.SignJwtResponse"
          ]
        }
      }
    ]
  }
}