{
  "ManagedKafka": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_clusters",
          "description": "Lists the clusters in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_list_clusters():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        request = managedkafka_v1.ListClustersRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_clusters(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Uni",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent location whose clusters are to be listed. Structured like ``projects/{project}/locations/{location}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.managedkafka_v1.services.managed_kafka.pagers.ListClustersAsyncPager: Response for ListClusters.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.ListClustersRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_cluster",
          "description": "Returns the properties of a single cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_get_cluster():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        request = managedkafka_v1.GetClusterRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_cluster(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.managedkafka_v1.types.GetClusterRequest, dict]",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the cluster whose configuration to return.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.managedkafka_v1.types.Cluster: An Apache Kafka cluster deployed in a location."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.GetClusterRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_cluster",
          "description": "Creates a new cluster in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_create_cluster():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        cluster = managedkafka_v1.Cluster()\n        cluster.gcp_config.access_config.network_configs.subnet = \"subnet_value\"\n        cluster.capacity_config.vcpu_count = 1094\n        cluster.capacity_config.memory_bytes = 1311\n\n        request = managedkafka_v1.CreateClusterRequest(\n            parent=\"parent_value\",",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent region in which to create the cluster. Structured like ``projects/{project}/locations/{location}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "cluster": {
                "type": "google.cloud.managedkafka_v1.types.Cluster",
                "description": "Required. Configuration of the cluster to create. Its ``name`` field is ignored.  This corresponds to the ``cluster`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "cluster_id": {
                "type": "str",
                "description": "Required. The ID to use for the cluster, which will become the final component of the cluster's name. The ID must be 1-63 characters long, and match the regular expression ``[a-z]([-a-z0-9]*[a-z0-9])?`` to comply with RFC 1035.  This value is structured like: ``my-cluster-id``.  This corresponds to the ``cluster_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.managedkafka_v1.types.Cluster` An Apache Kafka cluster deployed in a location."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "cluster",
              "cluster_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.CreateClusterRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_cluster",
          "description": "Updates the properties of a single cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_update_cluster():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        cluster = managedkafka_v1.Cluster()\n        cluster.gcp_config.access_config.network_configs.subnet = \"subnet_value\"\n        cluster.capacity_config.vcpu_count = 1094\n        cluster.capacity_config.memory_bytes = 1311\n\n        request = managedkafka_v1.UpdateClusterRequest(\n            cluster=cluster,\n        )\n\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "cluster": {
                "type": "google.cloud.managedkafka_v1.types.Cluster",
                "description": "Required. The cluster to update. Its ``name`` field must be populated.  This corresponds to the ``cluster`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the cluster resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. The mask is required and a value of \\* will update all fields.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.managedkafka_v1.types.Cluster` An Apache Kafka cluster deployed in a location."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "cluster",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.UpdateClusterRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_cluster",
          "description": "Deletes a single cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_delete_cluster():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        request = managedkafka_v1.DeleteClusterRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_cluster(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the cluster to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.DeleteClusterRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_topics",
          "description": "Lists the topics in a given cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_list_topics():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        request = managedkafka_v1.ListTopicsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_topics(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.manag",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent cluster whose topics are to be listed. Structured like ``projects/{project}/locations/{location}/clusters/{cluster}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.managedkafka_v1.services.managed_kafka.pagers.ListTopicsAsyncPager: Response for ListTopics.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.ListTopicsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_topic",
          "description": "Returns the properties of a single topic.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_get_topic():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        request = managedkafka_v1.GetTopicRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_topic(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.managedkafka_v1.types.GetTopicRequest, dict]]):\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the topic whose configuration to return. Structured like:  projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.managedkafka_v1.types.Topic: A Kafka topic in a given cluster."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.GetTopicRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_topic",
          "description": "Creates a new topic in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_create_topic():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        topic = managedkafka_v1.Topic()\n        topic.partition_count = 1634\n        topic.replication_factor = 1912\n\n        request = managedkafka_v1.CreateTopicRequest(\n            parent=\"parent_value\",\n            topic_id=\"topic_id_value\",\n            topic=topic,\n        )\n\n        # Make the request\n        respo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent cluster in which to create the topic. Structured like ``projects/{project}/locations/{location}/clusters/{cluster}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "topic": {
                "type": "google.cloud.managedkafka_v1.types.Topic",
                "description": "Required. Configuration of the topic to create. Its ``name`` field is ignored.  This corresponds to the ``topic`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "topic_id": {
                "type": "str",
                "description": "Required. The ID to use for the topic, which will become the final component of the topic's name.  This value is structured like: ``my-topic-name``.  This corresponds to the ``topic_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.managedkafka_v1.types.Topic: A Kafka topic in a given cluster."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "topic",
              "topic_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.CreateTopicRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_topic",
          "description": "Updates the properties of a single topic.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_update_topic():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        topic = managedkafka_v1.Topic()\n        topic.partition_count = 1634\n        topic.replication_factor = 1912\n\n        request = managedkafka_v1.UpdateTopicRequest(\n            topic=topic,\n        )\n\n        # Make the request\n        response = await client.update_topic(request=request)\n\n        # Handle the response\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "topic": {
                "type": "google.cloud.managedkafka_v1.types.Topic",
                "description": "Required. The topic to update. Its ``name`` field must be populated.  This corresponds to the ``topic`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Topic resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. The mask is required and a value of \\* will update all fields.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.managedkafka_v1.types.Topic: A Kafka topic in a given cluster."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "topic",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.UpdateTopicRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_topic",
          "description": "Deletes a single topic.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_delete_topic():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        request = managedkafka_v1.DeleteTopicRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_topic(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.managedkafka_v1.types.DeleteTopicRequest, dict]]):\n        The request object. Request for DeleteTopic.\n    name (:class:`str`):\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the topic to delete. ``projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.DeleteTopicRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_consumer_groups",
          "description": "Lists the consumer groups in a given cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_list_consumer_groups():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        request = managedkafka_v1.ListConsumerGroupsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_consumer_groups(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent cluster whose consumer groups are to be listed. Structured like ``projects/{project}/locations/{location}/clusters/{cluster}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.managedkafka_v1.services.managed_kafka.pagers.ListConsumerGroupsAsyncPager: Response for ListConsumerGroups.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.ListConsumerGroupsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_consumer_group",
          "description": "Returns the properties of a single consumer group.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_get_consumer_group():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        request = managedkafka_v1.GetConsumerGroupRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_consumer_group(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.managedkafka_v1.typ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the consumer group whose configuration to return. ``projects/{project}/locations/{location}/clusters/{cluster}/consumerGroups/{consumerGroup}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.managedkafka_v1.types.ConsumerGroup: A Kafka consumer group in a given cluster."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.GetConsumerGroupRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_consumer_group",
          "description": "Updates the properties of a single consumer group.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_update_consumer_group():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        request = managedkafka_v1.UpdateConsumerGroupRequest(\n        )\n\n        # Make the request\n        response = await client.update_consumer_group(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.managedkafka_v1.types.UpdateConsumerGroup",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "consumer_group": {
                "type": "google.cloud.managedkafka_v1.types.ConsumerGroup",
                "description": "Required. The consumer group to update. Its ``name`` field must be populated.  This corresponds to the ``consumer_group`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the ConsumerGroup resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. The mask is required and a value of \\* will update all fields.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.managedkafka_v1.types.ConsumerGroup: A Kafka consumer group in a given cluster."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "consumer_group",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.UpdateConsumerGroupRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_consumer_group",
          "description": "Deletes a single consumer group.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import managedkafka_v1\n\n    async def sample_delete_consumer_group():\n        # Create a client\n        client = managedkafka_v1.ManagedKafkaAsyncClient()\n\n        # Initialize request argument(s)\n        request = managedkafka_v1.DeleteConsumerGroupRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_consumer_group(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.managedkafka_v1.types.DeleteConsumerGroupRequest, dict]]):\n        The request object. Request",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the consumer group to delete. ``projects/{project}/locations/{location}/clusters/{cluster}/consumerGroups/{consumerGroup}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "managed_kafka.DeleteConsumerGroupRequest"
          ]
        }
      }
    ]
  }
}