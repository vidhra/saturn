{
  "CloudTasks": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_queues",
          "description": "Lists queues.\n\nQueues are returned in lexicographical order.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_list_queues():\n        # Create a client\n        client = tasks_v2beta2.CloudTasksAsyncClient()\n\n        # Initialize request argument(s)\n        request = tasks_v2beta2.ListQueuesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_queues(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[go",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The location name. For example: ``projects/PROJECT_ID/locations/LOCATION_ID``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.services.cloud_tasks.pagers.ListQueuesAsyncPager: Response message for [ListQueues][google.cloud.tasks.v2beta2.CloudTasks.ListQueues].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.ListQueuesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_queue",
          "description": "Gets a queue.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_get_queue():\n        # Create a client\n        client = tasks_v2beta2.CloudTasksAsyncClient()\n\n        # Initialize request argument(s)\n        request = tasks_v2beta2.GetQueueRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_queue(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.tasks_v2beta2.types.GetQueueRequest, dict]]):\n        The request object. Request message ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the queue. For example: ``projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.types.Queue: A queue is a container of related tasks. Queues are configured to manage how those tasks are dispatched. Configurable properties include rate limits, retry options, target types, and others."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.GetQueueRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_queue",
          "description": "Creates a queue.\n\nQueues created with this method allow tasks to live for a\nmaximum of 31 days. After a task is 31 days old, the task will\nbe deleted regardless of whether it was dispatched or not.\n\nWARNING: Using this method may have unintended side effects if\nyou are using an App Engine ``queue.yaml`` or ``queue.xml`` file\nto manage your queues. Read `Overview of Queue Management and\nqueue.yaml <https://cloud.google.com/tasks/docs/queue-yaml>`__\nbefore using this method.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_create_queue():\n        # Create a client\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The location name in which the queue will be created. For example: ``projects/PROJECT_ID/locations/LOCATION_ID``  The list of allowed locations can be obtained by calling Cloud Tasks' implementation of [ListLocations][google.cloud.location.Locations.ListLocations].  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "queue": {
                "type": "google.cloud.tasks_v2beta2.types.Queue",
                "description": "Required. The queue to create.  [Queue's name][google.cloud.tasks.v2beta2.Queue.name] cannot be the same as an existing queue.  This corresponds to the ``queue`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.types.Queue: A queue is a container of related tasks. Queues are configured to manage how those tasks are dispatched. Configurable properties include rate limits, retry options, target types, and others."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "queue",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.CreateQueueRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_queue",
          "description": "Updates a queue.\n\nThis method creates the queue if it does not exist and updates\nthe queue if it does exist.\n\nQueues created with this method allow tasks to live for a\nmaximum of 31 days. After a task is 31 days old, the task will\nbe deleted regardless of whether it was dispatched or not.\n\nWARNING: Using this method may have unintended side effects if\nyou are using an App Engine ``queue.yaml`` or ``queue.xml`` file\nto manage your queues. Read `Overview of Queue Management and\nqueue.yaml <https://cloud.google.com/tasks/docs/queue-yaml>`__\nbefore using this method.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "queue": {
                "type": "google.cloud.tasks_v2beta2.types.Queue",
                "description": "Required. The queue to create or update.  The queue's [name][google.cloud.tasks.v2beta2.Queue.name] must be specified.  Output only fields cannot be modified using UpdateQueue. Any value specified for an output only field will be ignored. The queue's [name][google.cloud.tasks.v2beta2.Queue.name] cannot be changed.  This corresponds to the ``queue`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "A mask used to specify which fields of the queue are being updated. If empty, then all fields will be updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.types.Queue: A queue is a container of related tasks. Queues are configured to manage how those tasks are dispatched. Configurable properties include rate limits, retry options, target types, and others."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "queue",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.UpdateQueueRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_queue",
          "description": "Deletes a queue.\n\nThis command will delete the queue even if it has tasks in it.\n\nNote: If you delete a queue, a queue with the same name can't be\ncreated for 7 days.\n\nWARNING: Using this method may have unintended side effects if\nyou are using an App Engine ``queue.yaml`` or ``queue.xml`` file\nto manage your queues. Read `Overview of Queue Management and\nqueue.yaml <https://cloud.google.com/tasks/docs/queue-yaml>`__\nbefore using this method.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_delete_queue():\n        # Create a client\n        client = tasks_v2beta2.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The queue name. For example: ``projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.DeleteQueueRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "purge_queue",
          "description": "Purges a queue by deleting all of its tasks.\n\nAll tasks created before this method is called are\npermanently deleted.\n\nPurge operations can take up to one minute to take\neffect. Tasks might be dispatched before the purge takes\neffect. A purge is irreversible.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_purge_queue():\n        # Create a client\n        client = tasks_v2beta2.CloudTasksAsyncClient()\n\n        # Initialize request argument(s)\n        request = tasks_v2beta2.PurgeQueueRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The queue name. For example: ``projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.types.Queue: A queue is a container of related tasks. Queues are configured to manage how those tasks are dispatched. Configurable properties include rate limits, retry options, target types, and others."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.PurgeQueueRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "pause_queue",
          "description": "Pauses the queue.\n\nIf a queue is paused then the system will stop dispatching tasks\nuntil the queue is resumed via\n[ResumeQueue][google.cloud.tasks.v2beta2.CloudTasks.ResumeQueue].\nTasks can still be added when the queue is paused. A queue is\npaused if its [state][google.cloud.tasks.v2beta2.Queue.state] is\n[PAUSED][google.cloud.tasks.v2beta2.Queue.State.PAUSED].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_pause_queue():\n        # Create a client\n        client = tasks_v2beta2.CloudTasksAsyncClient()\n\n        # Initialize request argument(s)\n        request =",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The queue name. For example: ``projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.types.Queue: A queue is a container of related tasks. Queues are configured to manage how those tasks are dispatched. Configurable properties include rate limits, retry options, target types, and others."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.PauseQueueRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "resume_queue",
          "description": "Resume a queue.\n\nThis method resumes a queue after it has been\n[PAUSED][google.cloud.tasks.v2beta2.Queue.State.PAUSED] or\n[DISABLED][google.cloud.tasks.v2beta2.Queue.State.DISABLED]. The\nstate of a queue is stored in the queue's\n[state][google.cloud.tasks.v2beta2.Queue.state]; after calling\nthis method it will be set to\n[RUNNING][google.cloud.tasks.v2beta2.Queue.State.RUNNING].\n\nWARNING: Resuming many high-QPS queues at the same time can lead\nto target overloading. If you are resuming high-QPS queues,\nfollow the 500/50/5 pattern described in `Managing Cloud Tasks\nScaling\nRisks <https://cloud.google.com/tasks/docs/manage-cloud-task-scaling>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The queue name. For example: ``projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.types.Queue: A queue is a container of related tasks. Queues are configured to manage how those tasks are dispatched. Configurable properties include rate limits, retry options, target types, and others."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.ResumeQueueRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "upload_queue_yaml",
          "description": "Update queue list by uploading a queue.yaml file.\n\nThe queue.yaml file is supplied in the request body as a\nYAML encoded string. This method was added to support\ngcloud clients versions before 322.0.0. New clients\nshould use CreateQueue instead of this method.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_upload_queue_yaml():\n        # Create a client\n        client = tasks_v2beta2.CloudTasksAsyncClient()\n\n        # Initialize request argument(s)\n        request = tasks_v2beta2.UploadQueueYamlRequest(\n            app_id=\"app_id_value\",\n        )\n\n        # Mak",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.UploadQueueYamlRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_iam_policy",
          "description": "Gets the access control policy for a\n[Queue][google.cloud.tasks.v2beta2.Queue]. Returns an empty\npolicy if the resource exists and does not have a policy set.\n\nAuthorization requires the following `Google\nIAM <https://cloud.google.com/iam>`__ permission on the\nspecified resource parent:\n\n-  ``cloudtasks.queues.getIamPolicy``\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_get_iam_policy():\n        # Create a client\n        client = tasks_v2beta2.CloudTasksAsyncClient()\n\n        # Initialize request arg",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "resource": {
                "type": "str",
                "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.  This corresponds to the ``resource`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.iam.v1.policy_pb2.Policy: An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.  A Policy is a collection of bindings. A binding binds one or more members, or principals, to a single role. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A role is a named list of permissions; each role can be an IAM predefined role or a user-created custom role.  For some types of Google Cloud resources, a binding can also specify a condition, which is a logical expression that allows access to a resource only if the expression evaluates to true. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](\\ https://cloud.google.com/iam/help/conditions/resource-policies).  **JSON example:**  :literal:`\\`     {       \"bindings\": [         {           \"role\": \"roles/resourcemanager.organizationAdmin\",           \"members\": [             \"user:mike@example.com\",             \"group:admins@example.com\",             \"domain:google.com\",             \"serviceAccount:my-project-id@appspot.gserviceaccount.com\"           ]         },         {           \"role\": \"roles/resourcemanager.organizationViewer\",           \"members\": [             \"user:eve@example.com\"           ],           \"condition\": {             \"title\": \"expirable access\",             \"description\": \"Does not grant access after Sep 2020\",             \"expression\": \"request.time <             timestamp('2020-10-01T00:00:00.000Z')\",           }         }       ],       \"etag\": \"BwWWja0YfJA=\",       \"version\": 3     }`\\ \\`  **YAML example:**  :literal:`\\`     bindings:     - members:       - user:mike@example.com       - group:admins@example.com       - domain:google.com       - serviceAccount:my-project-id@appspot.gserviceaccount.com       role: roles/resourcemanager.organizationAdmin     - members:       - user:eve@example.com       role: roles/resourcemanager.organizationViewer       condition:         title: expirable access         description: Does not grant access after Sep 2020         expression: request.time < timestamp('2020-10-01T00:00:00.000Z')     etag: BwWWja0YfJA=     version: 3`\\ \\`  For a description of IAM and its features, see the [IAM documentation](\\ https://cloud.google.com/iam/docs/)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "resource",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "iam_policy_pb2.GetIamPolicyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "set_iam_policy",
          "description": "Sets the access control policy for a\n[Queue][google.cloud.tasks.v2beta2.Queue]. Replaces any existing\npolicy.\n\nNote: The Cloud Console does not check queue-level IAM\npermissions yet. Project-level permissions are required to use\nthe Cloud Console.\n\nAuthorization requires the following `Google\nIAM <https://cloud.google.com/iam>`__ permission on the\nspecified resource parent:\n\n-  ``cloudtasks.queues.setIamPolicy``\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_set_iam_policy():\n        # Create a client",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "resource": {
                "type": "str",
                "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.  This corresponds to the ``resource`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.iam.v1.policy_pb2.Policy: An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.  A Policy is a collection of bindings. A binding binds one or more members, or principals, to a single role. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A role is a named list of permissions; each role can be an IAM predefined role or a user-created custom role.  For some types of Google Cloud resources, a binding can also specify a condition, which is a logical expression that allows access to a resource only if the expression evaluates to true. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](\\ https://cloud.google.com/iam/help/conditions/resource-policies).  **JSON example:**  :literal:`\\`     {       \"bindings\": [         {           \"role\": \"roles/resourcemanager.organizationAdmin\",           \"members\": [             \"user:mike@example.com\",             \"group:admins@example.com\",             \"domain:google.com\",             \"serviceAccount:my-project-id@appspot.gserviceaccount.com\"           ]         },         {           \"role\": \"roles/resourcemanager.organizationViewer\",           \"members\": [             \"user:eve@example.com\"           ],           \"condition\": {             \"title\": \"expirable access\",             \"description\": \"Does not grant access after Sep 2020\",             \"expression\": \"request.time <             timestamp('2020-10-01T00:00:00.000Z')\",           }         }       ],       \"etag\": \"BwWWja0YfJA=\",       \"version\": 3     }`\\ \\`  **YAML example:**  :literal:`\\`     bindings:     - members:       - user:mike@example.com       - group:admins@example.com       - domain:google.com       - serviceAccount:my-project-id@appspot.gserviceaccount.com       role: roles/resourcemanager.organizationAdmin     - members:       - user:eve@example.com       role: roles/resourcemanager.organizationViewer       condition:         title: expirable access         description: Does not grant access after Sep 2020         expression: request.time < timestamp('2020-10-01T00:00:00.000Z')     etag: BwWWja0YfJA=     version: 3`\\ \\`  For a description of IAM and its features, see the [IAM documentation](\\ https://cloud.google.com/iam/docs/)."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "resource",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "iam_policy_pb2.SetIamPolicyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "test_iam_permissions",
          "description": "Returns permissions that a caller has on a\n[Queue][google.cloud.tasks.v2beta2.Queue]. If the resource does\nnot exist, this will return an empty set of permissions, not a\n[NOT_FOUND][google.rpc.Code.NOT_FOUND] error.\n\nNote: This operation is designed to be used for building\npermission-aware UIs and command-line tools, not for\nauthorization checking. This operation may \"fail open\" without\nwarning.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_test_iam_permissions():\n        # Create a client\n        cl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "resource": {
                "type": "str",
                "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.  This corresponds to the ``resource`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "permissions": {
                "type": "MutableSequence[str]",
                "description": "The set of permissions to check for the ``resource``. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see `IAM Overview <https://cloud.google.com/iam/docs/overview#permissions>`__.  This corresponds to the ``permissions`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse: Response message for TestIamPermissions method."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "resource",
              "permissions",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "iam_policy_pb2.TestIamPermissionsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_tasks",
          "description": "Lists the tasks in a queue.\n\nBy default, only the\n[BASIC][google.cloud.tasks.v2beta2.Task.View.BASIC] view is\nretrieved due to performance considerations;\n[response_view][google.cloud.tasks.v2beta2.ListTasksRequest.response_view]\ncontrols the subset of information which is returned.\n\nThe tasks may be returned in any order. The ordering may change\nat any time.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_list_tasks():\n        # Create a client\n        client = tasks_v2beta2.CloudTasksAsyncClient()\n\n        # Initialize request argument(s)\n        request = tas",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The queue name. For example: ``projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.services.cloud_tasks.pagers.ListTasksAsyncPager: Response message for listing tasks using [ListTasks][google.cloud.tasks.v2beta2.CloudTasks.ListTasks].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.ListTasksRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_task",
          "description": "Gets a task.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_get_task():\n        # Create a client\n        client = tasks_v2beta2.CloudTasksAsyncClient()\n\n        # Initialize request argument(s)\n        request = tasks_v2beta2.GetTaskRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_task(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.tasks_v2beta2.types.GetTaskRequest, dict]]):\n        The request object. Request message for g",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The task name. For example: ``projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.types.Task: A unit of scheduled work."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.GetTaskRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_task",
          "description": "Creates a task and adds it to a queue.\n\nTasks cannot be updated after creation; there is no UpdateTask\ncommand.\n\n-  For [App Engine\n   queues][google.cloud.tasks.v2beta2.AppEngineHttpTarget], the\n   maximum task size is 100KB.\n-  For [pull queues][google.cloud.tasks.v2beta2.PullTarget], the\n   maximum task size is 1MB.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_create_task():\n        # Create a client\n        client = tasks_v2beta2.CloudTasksAsyncClient()\n\n        # Initialize request argument(s)\n        request = tasks_v2beta2.CreateTaskRequest(\n          ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The queue name. For example: ``projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID``  The queue must already exist.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "task": {
                "type": "google.cloud.tasks_v2beta2.types.Task",
                "description": "Required. The task to add.  Task names have the following format: ``projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID``. The user can optionally specify a task [name][google.cloud.tasks.v2beta2.Task.name]. If a name is not specified then the system will generate a random unique task id, which will be set in the task returned in the [response][google.cloud.tasks.v2beta2.Task.name].  If [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time] is not set or is in the past then Cloud Tasks will set it to the current time.  Task De-duplication:  Explicitly specifying a task ID enables task de-duplication. If a task's ID is identical to that of an existing task or a task that was deleted or completed recently then the call will fail with [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS]. If the task's queue was created using Cloud Tasks, then another task with the same name can't be created for ~1 hour after the original task was deleted or completed. If the task's queue was created using queue.yaml or queue.xml, then another task with the same name can't be created for ~9 days after the original task was deleted or completed.  Because there is an extra lookup cost to identify duplicate task names, these [CreateTask][google.cloud.tasks.v2beta2.CloudTasks.CreateTask] calls have significantly increased latency. Using hashed strings for the task id or for the prefix of the task id is recommended. Choosing task ids that are sequential or have sequential prefixes, for example using a timestamp, causes an increase in latency and error rates in all task commands. The infrastructure relies on an approximately uniform distribution of task ids to store and serve tasks efficiently.  This corresponds to the ``task`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.types.Task: A unit of scheduled work."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "task",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.CreateTaskRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_task",
          "description": "Deletes a task.\n\nA task can be deleted if it is scheduled or dispatched.\nA task cannot be deleted if it has completed\nsuccessfully or permanently failed.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_delete_task():\n        # Create a client\n        client = tasks_v2beta2.CloudTasksAsyncClient()\n\n        # Initialize request argument(s)\n        request = tasks_v2beta2.DeleteTaskRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_task(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.tasks_v2be",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The task name. For example: ``projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.DeleteTaskRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "lease_tasks",
          "description": "Leases tasks from a pull queue for\n[lease_duration][google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration].\n\nThis method is invoked by the worker to obtain a lease. The\nworker must acknowledge the task via\n[AcknowledgeTask][google.cloud.tasks.v2beta2.CloudTasks.AcknowledgeTask]\nafter they have performed the work associated with the task.\n\nThe [payload][google.cloud.tasks.v2beta2.PullMessage.payload] is\nintended to store data that the worker needs to perform the work\nassociated with the task. To return the payloads in the\n[response][google.cloud.tasks.v2beta2.LeaseTasksResponse], set\n[response_view][google.cloud.tasks.v2beta2.LeaseTasksRequest.response_view]\nto [FULL][google.cloud.tasks.v2beta2.Task.View.FULL].\n\nA maximum of 10 qps of\n[LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks]\nrequests are allowed per queue.\n[RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED] is\nreturned when this limit is exceeded.\n[RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED] is also\nreturned when\n[m",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The queue name. For example: ``projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "lease_duration": {
                "type": "google.protobuf.duration_pb2.Duration",
                "description": "Required. The duration of the lease.  Each task returned in the [response][google.cloud.tasks.v2beta2.LeaseTasksResponse] will have its [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time] set to the current time plus the ``lease_duration``. The task is leased until its [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time]; thus, the task will not be returned to another [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] call before its [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time].  After the worker has successfully finished the work associated with the task, the worker must call via [AcknowledgeTask][google.cloud.tasks.v2beta2.CloudTasks.AcknowledgeTask] before the [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time]. Otherwise the task will be returned to a later [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] call so that another worker can retry it.  The maximum lease duration is 1 week. ``lease_duration`` will be truncated to the nearest second.  This corresponds to the ``lease_duration`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.types.LeaseTasksResponse: Response message for leasing tasks using [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks]."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "lease_duration",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.LeaseTasksRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "acknowledge_task",
          "description": "Acknowledges a pull task.\n\nThe worker, that is, the entity that\n[leased][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] this\ntask must call this method to indicate that the work associated\nwith the task has finished.\n\nThe worker must acknowledge a task within the\n[lease_duration][google.cloud.tasks.v2beta2.LeaseTasksRequest.lease_duration]\nor the lease will expire and the task will become available to\nbe leased again. After the task is acknowledged, it will not be\nreturned by a later\n[LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks],\n[GetTask][google.cloud.tasks.v2beta2.CloudTasks.GetTask], or\n[ListTasks][google.cloud.tasks.v2beta2.CloudTasks.ListTasks].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The task name. For example: ``projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "schedule_time": {
                "type": "google.protobuf.timestamp_pb2.Timestamp",
                "description": "Required. The task's current schedule time, available in the [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time] returned by [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] response or [RenewLease][google.cloud.tasks.v2beta2.CloudTasks.RenewLease] response. This restriction is to ensure that your worker currently holds the lease.  This corresponds to the ``schedule_time`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "schedule_time",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.AcknowledgeTaskRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "renew_lease",
          "description": "Renew the current lease of a pull task.\n\nThe worker can use this method to extend the lease by a new\nduration, starting from now. The new task lease will be returned\nin the task's\n[schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_renew_lease():\n        # Create a client\n        client = tasks_v2beta2.CloudTasksAsyncClient()\n\n        # Initialize request argument(s)\n        request = tasks_v2beta2.RenewLeaseRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response =",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The task name. For example: ``projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "schedule_time": {
                "type": "google.protobuf.timestamp_pb2.Timestamp",
                "description": "Required. The task's current schedule time, available in the [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time] returned by [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] response or [RenewLease][google.cloud.tasks.v2beta2.CloudTasks.RenewLease] response. This restriction is to ensure that your worker currently holds the lease.  This corresponds to the ``schedule_time`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "lease_duration": {
                "type": "google.protobuf.duration_pb2.Duration",
                "description": "Required. The desired new lease duration, starting from now.  The maximum lease duration is 1 week. ``lease_duration`` will be truncated to the nearest second.  This corresponds to the ``lease_duration`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.types.Task: A unit of scheduled work."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "schedule_time",
              "lease_duration",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.RenewLeaseRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "cancel_lease",
          "description": "Cancel a pull task's lease.\n\nThe worker can use this method to cancel a task's lease by\nsetting its\n[schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time]\nto now. This will make the task available to be leased to the\nnext caller of\n[LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks].\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import tasks_v2beta2\n\n    async def sample_cancel_lease():\n        # Create a client\n        client = tasks_v2beta2.CloudTasksAsyncClient()\n\n        # Initialize request argument(s)\n        request = tasks_v2beta2.CancelLeaseRequest(\n            name=\"name_va",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The task name. For example: ``projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "schedule_time": {
                "type": "google.protobuf.timestamp_pb2.Timestamp",
                "description": "Required. The task's current schedule time, available in the [schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time] returned by [LeaseTasks][google.cloud.tasks.v2beta2.CloudTasks.LeaseTasks] response or [RenewLease][google.cloud.tasks.v2beta2.CloudTasks.RenewLease] response. This restriction is to ensure that your worker currently holds the lease.  This corresponds to the ``schedule_time`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.types.Task: A unit of scheduled work."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "schedule_time",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.CancelLeaseRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "run_task",
          "description": "Forces a task to run now.\n\nWhen this method is called, Cloud Tasks will dispatch the task,\neven if the task is already running, the queue has reached its\n[RateLimits][google.cloud.tasks.v2beta2.RateLimits] or is\n[PAUSED][google.cloud.tasks.v2beta2.Queue.State.PAUSED].\n\nThis command is meant to be used for manual debugging. For\nexample,\n[RunTask][google.cloud.tasks.v2beta2.CloudTasks.RunTask] can be\nused to retry a failed task after a fix has been made or to\nmanually force a task to be dispatched now.\n\nThe dispatched task is returned. That is, the task that is\nreturned contains the\n[status][google.cloud.tasks.v2beta2.Task.status] after the task\nis dispatched but before the task is received by its target.\n\nIf Cloud Tasks receives a successful response from the task's\ntarget, then the task will be deleted; otherwise the task's\n[schedule_time][google.cloud.tasks.v2beta2.Task.schedule_time]\nwill be reset to the time that\n[RunTask][google.cloud.tasks.v2beta2.CloudTasks.RunTask] was\ncalled plus the retry delay speci",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The task name. For example: ``projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.tasks_v2beta2.types.Task: A unit of scheduled work."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "cloudtasks.RunTaskRequest"
          ]
        }
      }
    ]
  }
}