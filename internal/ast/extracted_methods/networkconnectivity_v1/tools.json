{
  "HubService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_hubs",
          "description": "Lists the Network Connectivity Center hubs associated\nwith a given project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_list_hubs():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.ListHubsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_hubs(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource's name. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.services.hub_service.pagers.ListHubsAsyncPager: Response for [HubService.ListHubs][google.cloud.networkconnectivity.v1.HubService.ListHubs] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.ListHubsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_hub",
          "description": "Gets details about a Network Connectivity Center hub.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_get_hub():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.GetHubRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_hub(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.networkconnectivity_v1.types.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the hub resource to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.types.Hub: A Network Connectivity Center hub is a global management resource to which you attach spokes. A single hub can contain spokes from multiple regions. However, if any of a hub's spokes use the site-to-site data transfer feature, the resources associated with those spokes must all be in the same VPC network. Spokes that do not use site-to-site data transfer can be associated with any VPC network in your project."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.GetHubRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_hub",
          "description": "Creates a new Network Connectivity Center hub in the\nspecified project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_create_hub():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.CreateHubRequest(\n            parent=\"parent_value\",\n            hub_id=\"hub_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_hub(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        respons",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "hub": {
                "type": "google.cloud.networkconnectivity_v1.types.Hub",
                "description": "Required. The initial values for a new hub.  This corresponds to the ``hub`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "hub_id": {
                "type": "str",
                "description": "Required. A unique identifier for the hub.  This corresponds to the ``hub_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.networkconnectivity_v1.types.Hub` A Network Connectivity Center hub is a global management resource to which you attach spokes. A single hub can contain spokes from multiple regions. However, if any of a hub's spokes use the site-to-site data transfer feature, the resources associated with those spokes must all be in the same VPC network. Spokes that do not use site-to-site data transfer can be associated with any VPC network in your project."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "hub",
              "hub_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gcn_hub.CreateHubRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_hub",
          "description": "Updates the description and/or labels of a Network\nConnectivity Center hub.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_update_hub():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.UpdateHubRequest(\n        )\n\n        # Make the request\n        operation = client.update_hub(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "hub": {
                "type": "google.cloud.networkconnectivity_v1.types.Hub",
                "description": "Required. The state that the hub should be in after the update.  This corresponds to the ``hub`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. In the case of an update to an existing hub, field mask is used to specify the fields to be overwritten. The fields specified in the update_mask are relative to the resource, not the full request. A field is overwritten if it is in the mask. If the user does not provide a mask, then all fields are overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.networkconnectivity_v1.types.Hub` A Network Connectivity Center hub is a global management resource to which you attach spokes. A single hub can contain spokes from multiple regions. However, if any of a hub's spokes use the site-to-site data transfer feature, the resources associated with those spokes must all be in the same VPC network. Spokes that do not use site-to-site data transfer can be associated with any VPC network in your project."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "hub",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gcn_hub.UpdateHubRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_hub",
          "description": "Deletes a Network Connectivity Center hub.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_delete_hub():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.DeleteHubRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_hub(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the hub to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.DeleteHubRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_hub_spokes",
          "description": "Lists the Network Connectivity Center spokes\nassociated with a specified hub and location. The list\nincludes both spokes that are attached to the hub and\nspokes that have been proposed but not yet accepted.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_list_hub_spokes():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.ListHubSpokesRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        page_result =",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the hub. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.services.hub_service.pagers.ListHubSpokesAsyncPager: The response for [HubService.ListHubSpokes][google.cloud.networkconnectivity.v1.HubService.ListHubSpokes].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.ListHubSpokesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_spokes",
          "description": "Lists the Network Connectivity Center spokes in a\nspecified project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_list_spokes():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.ListSpokesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_spokes(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.services.hub_service.pagers.ListSpokesAsyncPager: The response for [HubService.ListSpokes][google.cloud.networkconnectivity.v1.HubService.ListSpokes].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.ListSpokesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_spoke",
          "description": "Gets details about a Network Connectivity Center\nspoke.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_get_spoke():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.GetSpokeRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_spoke(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.networkconnectivity_v",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the spoke resource.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.types.Spoke: A Network Connectivity Center spoke represents one or more network connectivity resources.  When you create a spoke, you associate it with a hub. You must also identify a value for exactly one of the following fields:  -  linked_vpn_tunnels -  linked_interconnect_attachments -  linked_router_appliance_instances -  linked_vpc_network"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.GetSpokeRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_spoke",
          "description": "Creates a Network Connectivity Center spoke.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_create_spoke():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.CreateSpokeRequest(\n            parent=\"parent_value\",\n            spoke_id=\"spoke_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_spoke(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operat",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "spoke": {
                "type": "google.cloud.networkconnectivity_v1.types.Spoke",
                "description": "Required. The initial values for a new spoke.  This corresponds to the ``spoke`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "spoke_id": {
                "type": "str",
                "description": "Required. Unique id for the spoke to create.  This corresponds to the ``spoke_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.networkconnectivity_v1.types.Spoke` A Network Connectivity Center spoke represents one or more network connectivity resources.  When you create a spoke, you associate it with a hub. You must also identify a value for exactly one of the following fields:  -  linked_vpn_tunnels -  linked_interconnect_attachments -  linked_router_appliance_instances -  linked_vpc_network"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "spoke",
              "spoke_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.CreateSpokeRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_spoke",
          "description": "Updates the parameters of a Network Connectivity\nCenter spoke.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_update_spoke():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.UpdateSpokeRequest(\n        )\n\n        # Make the request\n        operation = client.update_spoke(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        pri",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "spoke": {
                "type": "google.cloud.networkconnectivity_v1.types.Spoke",
                "description": "Required. The state that the spoke should be in after the update.  This corresponds to the ``spoke`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. In the case of an update to an existing spoke, field mask is used to specify the fields to be overwritten. The fields specified in the update_mask are relative to the resource, not the full request. A field is overwritten if it is in the mask. If the user does not provide a mask, then all fields are overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.networkconnectivity_v1.types.Spoke` A Network Connectivity Center spoke represents one or more network connectivity resources.  When you create a spoke, you associate it with a hub. You must also identify a value for exactly one of the following fields:  -  linked_vpn_tunnels -  linked_interconnect_attachments -  linked_router_appliance_instances -  linked_vpc_network"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "spoke",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.UpdateSpokeRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "reject_hub_spoke",
          "description": "Rejects a Network Connectivity Center spoke from being attached\nto a hub. If the spoke was previously in the ``ACTIVE`` state,\nit transitions to the ``INACTIVE`` state and is no longer able\nto connect to other spokes that are attached to the hub.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_reject_hub_spoke():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.RejectHubSpokeRequest(\n            name=\"name_value\",\n            spoke",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the hub from which to reject the spoke.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "spoke_uri": {
                "type": "str",
                "description": "Required. The URI of the spoke to reject from the hub.  This corresponds to the ``spoke_uri`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.networkconnectivity_v1.types.RejectHubSpokeResponse` The response for [HubService.RejectHubSpoke][google.cloud.networkconnectivity.v1.HubService.RejectHubSpoke]."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "spoke_uri",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.RejectHubSpokeRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "accept_hub_spoke",
          "description": "Accepts a proposal to attach a Network Connectivity\nCenter spoke to a hub.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_accept_hub_spoke():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.AcceptHubSpokeRequest(\n            name=\"name_value\",\n            spoke_uri=\"spoke_uri_value\",\n        )\n\n        # Make the request\n        operation = client.accept_hub_spoke(request=request)\n\n        print(\"Waiting for operation to complete",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the hub into which to accept the spoke.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "spoke_uri": {
                "type": "str",
                "description": "Required. The URI of the spoke to accept into the hub.  This corresponds to the ``spoke_uri`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.networkconnectivity_v1.types.AcceptHubSpokeResponse` The response for [HubService.AcceptHubSpoke][google.cloud.networkconnectivity.v1.HubService.AcceptHubSpoke]."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "spoke_uri",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.AcceptHubSpokeRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_spoke",
          "description": "Deletes a Network Connectivity Center spoke.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_delete_spoke():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.DeleteSpokeRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_spoke(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the respons",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the spoke to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.DeleteSpokeRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_route_table",
          "description": "Gets details about a Network Connectivity Center\nroute table.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_get_route_table():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.GetRouteTableRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_route_table(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.clou",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the route table resource.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.types.RouteTable:"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.GetRouteTableRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_route",
          "description": "Gets details about the specified route.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_get_route():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.GetRouteRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_route(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.networkconnectivity_v1.types.GetRoute",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the route resource.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.types.Route: A route defines a path from VM instances within a spoke to a specific destination resource. Only VPC spokes have routes."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.GetRouteRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_routes",
          "description": "Lists routes in a given project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_list_routes():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.ListRoutesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_routes(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[goo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource's name. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.services.hub_service.pagers.ListRoutesAsyncPager: Response for [HubService.ListRoutes][google.cloud.networkconnectivity.v1.HubService.ListRoutes] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.ListRoutesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_route_tables",
          "description": "Lists route tables in a given project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_list_route_tables():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.ListRouteTablesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_route_tables(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource's name. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.services.hub_service.pagers.ListRouteTablesAsyncPager: Response for [HubService.ListRouteTables][google.cloud.networkconnectivity.v1.HubService.ListRouteTables] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.ListRouteTablesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_group",
          "description": "Gets details about a Network Connectivity Center\ngroup.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_get_group():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.GetGroupRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_group(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.networkconnectivity_v",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the route table resource.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.types.Group: A group represents a subset of spokes attached to a hub."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.GetGroupRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_groups",
          "description": "Lists groups in a given hub.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_list_groups():\n        # Create a client\n        client = networkconnectivity_v1.HubServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.ListGroupsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_groups(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource's name. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.services.hub_service.pagers.ListGroupsAsyncPager: Response for [HubService.ListGroups][google.cloud.networkconnectivity.v1.HubService.ListGroups] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "hub.ListGroupsRequest"
          ]
        }
      }
    ]
  },
  "PolicyBasedRoutingService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_policy_based_routes",
          "description": "Lists PolicyBasedRoutes in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_list_policy_based_routes():\n        # Create a client\n        client = networkconnectivity_v1.PolicyBasedRoutingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.ListPolicyBasedRoutesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_policy_based_routes(request=request)\n\n        # Handle the response\n        async for response in pag",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource's name. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.services.policy_based_routing_service.pagers.ListPolicyBasedRoutesAsyncPager: Response for [PolicyBasedRouting.ListPolicyBasedRoutes][] method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "policy_based_routing.ListPolicyBasedRoutesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_policy_based_route",
          "description": "Gets details of a single PolicyBasedRoute.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_get_policy_based_route():\n        # Create a client\n        client = networkconnectivity_v1.PolicyBasedRoutingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.GetPolicyBasedRouteRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_policy_based_route(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[U",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the PolicyBasedRoute resource to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.networkconnectivity_v1.types.PolicyBasedRoute: Policy Based Routes (PBR) are more powerful routes that allows GCP customers to route their L4 network traffic based on not just destination IP, but also source IP, protocol and more. A PBR always take precedence when it conflicts with other types of routes. Next id: 22"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "policy_based_routing.GetPolicyBasedRouteRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_policy_based_route",
          "description": "Creates a new PolicyBasedRoute in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_create_policy_based_route():\n        # Create a client\n        client = networkconnectivity_v1.PolicyBasedRoutingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        policy_based_route = networkconnectivity_v1.PolicyBasedRoute()\n        policy_based_route.next_hop_ilb_ip = \"next_hop_ilb_ip_value\"\n        policy_based_route.network = \"network_value\"\n        policy_based_route.filter.protocol_version = \"IPV4\"\n\n        request =",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource's name of the PolicyBasedRoute.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "policy_based_route": {
                "type": "google.cloud.networkconnectivity_v1.types.PolicyBasedRoute",
                "description": "Required. Initial values for a new Policy Based Route.  This corresponds to the ``policy_based_route`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "policy_based_route_id": {
                "type": "str",
                "description": "Required. Unique id for the Policy Based Route to create.  This corresponds to the ``policy_based_route_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.networkconnectivity_v1.types.PolicyBasedRoute` Policy Based Routes (PBR) are more powerful routes that allows GCP customers to route their L4 network traffic based on not just destination IP, but also source IP, protocol and more. A PBR always take precedence when it conflicts with other types of routes. Next id: 22"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "policy_based_route",
              "policy_based_route_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "policy_based_routing.CreatePolicyBasedRouteRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_policy_based_route",
          "description": "Deletes a single PolicyBasedRoute.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import networkconnectivity_v1\n\n    async def sample_delete_policy_based_route():\n        # Create a client\n        client = networkconnectivity_v1.PolicyBasedRoutingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = networkconnectivity_v1.DeletePolicyBasedRouteRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_policy_based_route(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operati",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the PolicyBasedRoute resource to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "policy_based_routing.DeletePolicyBasedRouteRequest"
          ]
        }
      }
    ]
  }
}