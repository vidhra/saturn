{
  "PrivilegedAccessManager": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "check_onboarding_status",
          "description": "``CheckOnboardingStatus`` reports the onboarding status for a\nproject/folder/organization. Any findings reported by this API\nneed to be fixed before PAM can be used on the resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_check_onboarding_status():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.CheckOnboardingStatusRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "CheckOnboardingStatusRequest"
          ],
          "response_types": [
            "google.cloud.privilegedaccessmanager_v1.types.CheckOnboardingStatusResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_entitlements",
          "description": "Lists entitlements in a given\nproject/folder/organization and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_list_entitlements():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.ListEntitlementsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_entitlements(request=request)\n\n        # Handle the response\n        async for response ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent which owns the entitlement resources.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.privilegedaccessmanager_v1.services.privileged_access_manager.pagers.ListEntitlementsAsyncPager: Message for response to listing entitlements. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.privilegedaccessmanager_v1.services.privileged_access_manager.pagers.ListEntitlementsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "search_entitlements",
          "description": "``SearchEntitlements`` returns entitlements on which the caller\nhas the specified access.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_search_entitlements():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.SearchEntitlementsRequest(\n            parent=\"parent_value\",\n            caller_access_type=\"GRANT_APPROVER\",\n        )\n\n        # Make the request\n        page_result = client.search_entitlements(re",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "SearchEntitlementsRequest"
          ],
          "response_types": [
            "google.cloud.privilegedaccessmanager_v1.services.privileged_access_manager.pagers.SearchEntitlementsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_entitlement",
          "description": "Gets details of a single entitlement.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_get_entitlement():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.GetEntitlementRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_entitlement(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.privilegedaccessmanager_v1.types.Entitlement: An entitlement defines the eligibility of a set of users to obtain predefined access for some time possibly after going through an approval workflow."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.privilegedaccessmanager_v1.types.Entitlement"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_entitlement",
          "description": "Creates a new entitlement in a given\nproject/folder/organization and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_create_entitlement():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.CreateEntitlementRequest(\n            parent=\"parent_value\",\n            entitlement_id=\"entitlement_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_entitlement(request=request)",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Name of the parent resource for the entitlement. Possible formats:  -  ``organizations/{organization-number}/locations/{region}`` -  ``folders/{folder-number}/locations/{region}`` -  ``projects/{project-id|project-number}/locations/{region}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "entitlement": {
                "type": "google.cloud.privilegedaccessmanager_v1.types.Entitlement",
                "description": "Required. The resource being created This corresponds to the ``entitlement`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "entitlement_id": {
                "type": "str",
                "description": "Required. The ID to use for this entitlement. This becomes the last part of the resource name.  This value should be 4-63 characters in length, and valid characters are \"[a-z]\", \"[0-9]\", and \"-\". The first character should be from [a-z].  This value should be unique among all other entitlements under the specified ``parent``.  This corresponds to the ``entitlement_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.privilegedaccessmanager_v1.types.Entitlement` An entitlement defines the eligibility of a set of users to obtain predefined access for some time possibly after going through an approval workflow."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "entitlement",
              "entitlement_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_entitlement",
          "description": "Deletes a single entitlement. This method can only be called\nwhen there are no in-progress\n(``ACTIVE``/``ACTIVATING``/``REVOKING``) grants under the\nentitlement.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_delete_entitlement():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.DeleteEntitlementRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.privilegedaccessmanager_v1.types.Entitlement` An entitlement defines the eligibility of a set of users to obtain predefined access for some time possibly after going through an approval workflow."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_entitlement",
          "description": "Updates the entitlement specified in the request. Updated fields\nin the entitlement need to be specified in an update mask. The\nchanges made to an entitlement are applicable only on future\ngrants of the entitlement. However, if new approvers are added\nor existing approvers are removed from the approval workflow,\nthe changes are effective on existing grants.\n\nThe following fields are not supported for updates:\n\n-  All immutable fields\n-  Entitlement name\n-  Resource name\n-  Resource type\n-  Adding an approval workflow in an entitlement which\n   previously had no approval workflow.\n-  Deleting the approval workflow from an entitlement.\n-  Adding or deleting a step in the approval workflow (only one\n   step is supported)\n\nNote that updates are allowed on the list of approvers in an\napproval workflow step.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "entitlement": {
                "type": "google.cloud.privilegedaccessmanager_v1.types.Entitlement",
                "description": "Required. The entitlement resource that is updated.  This corresponds to the ``entitlement`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The list of fields to update. A field is overwritten if, and only if, it is in the mask. Any immutable fields set in the mask are ignored by the server. Repeated fields and map fields are only allowed in the last position of a ``paths`` string and overwrite the existing values. Hence an update to a repeated field or a map should contain the entire list of values. The fields specified in the update_mask are relative to the resource and not to the request. (e.g. ``MaxRequestDuration``; *not* ``entitlement.MaxRequestDuration``) A value of '*' for this field refers to full replacement of the resource.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.privilegedaccessmanager_v1.types.Entitlement` An entitlement defines the eligibility of a set of users to obtain predefined access for some time possibly after going through an approval workflow."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "entitlement",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_grants",
          "description": "Lists grants for a given entitlement.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_list_grants():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.ListGrantsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_grants(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource which owns the grants.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.privilegedaccessmanager_v1.services.privileged_access_manager.pagers.ListGrantsAsyncPager: Message for response to listing grants. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.privilegedaccessmanager_v1.services.privileged_access_manager.pagers.ListGrantsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "search_grants",
          "description": "``SearchGrants`` returns grants that are related to the calling\nuser in the specified way.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_search_grants():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.SearchGrantsRequest(\n            parent=\"parent_value\",\n            caller_relationship=\"HAD_APPROVED\",\n        )\n\n        # Make the request\n        page_result = client.search_grants(request=request)\n\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "SearchGrantsRequest"
          ],
          "response_types": [
            "google.cloud.privilegedaccessmanager_v1.services.privileged_access_manager.pagers.SearchGrantsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_grant",
          "description": "Get details of a single grant.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_get_grant():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.GetGrantRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_grant(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.privilegedaccessmanag",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.privilegedaccessmanager_v1.types.Grant: A grant represents a request from a user for obtaining the access specified in an entitlement they are eligible for."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.privilegedaccessmanager_v1.types.Grant"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_grant",
          "description": "Creates a new grant in a given\nproject/folder/organization and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_create_grant():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.CreateGrantRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_grant(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Name of the parent entitlement for which this grant is being requested.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "grant": {
                "type": "google.cloud.privilegedaccessmanager_v1.types.Grant",
                "description": "Required. The resource being created. This corresponds to the ``grant`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.privilegedaccessmanager_v1.types.Grant: A grant represents a request from a user for obtaining the access specified in an entitlement they are eligible for."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "grant",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.privilegedaccessmanager_v1.types.Grant"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "approve_grant",
          "description": "``ApproveGrant`` is used to approve a grant. This method can\nonly be called on a grant when it's in the ``APPROVAL_AWAITED``\nstate. This operation can't be undone.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_approve_grant():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.ApproveGrantRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.approve_gr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "ApproveGrantRequest"
          ],
          "response_types": [
            "google.cloud.privilegedaccessmanager_v1.types.Grant"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "deny_grant",
          "description": "``DenyGrant`` is used to deny a grant. This method can only be\ncalled on a grant when it's in the ``APPROVAL_AWAITED`` state.\nThis operation can't be undone.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_deny_grant():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.DenyGrantRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.deny_grant(request=req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "DenyGrantRequest"
          ],
          "response_types": [
            "google.cloud.privilegedaccessmanager_v1.types.Grant"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "revoke_grant",
          "description": "``RevokeGrant`` is used to immediately revoke access for a\ngrant. This method can be called when the grant is in a\nnon-terminal state.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import privilegedaccessmanager_v1\n\n    async def sample_revoke_grant():\n        # Create a client\n        client = privilegedaccessmanager_v1.PrivilegedAccessManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = privilegedaccessmanager_v1.RevokeGrantRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.revoke_grant(request=request)\n\n        print(\"",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "RevokeGrantRequest"
          ],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      }
    ]
  }
}