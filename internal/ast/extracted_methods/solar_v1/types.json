{
  "\\Users\\AMD\\vidhra\\internal\\ast\\google-cloud-python\\packages\\google-maps-solar\\google\\maps\\solar_v1\\types\\solar_service.py": [
    {
      "type": "request_class",
      "name": "FindClosestBuildingInsightsRequest",
      "docstring": "Request message for ``Solar.FindClosestBuildingInsights``.\n\nAttributes:\n    location (google.type.latlng_pb2.LatLng):\n        Required. The longitude and latitude from\n        which the API looks for the nearest known\n        building.\n    required_quality (google.maps.solar_v1.types.ImageryQuality):\n        Optional. The minimum quality level allowed\n        in the results. No result with lower quality\n        than this will be returned. Not specifying this\n        is equivalent to restricting to HIGH quality\n        only.\n    exact_quality_required (bool):\n        Optional. Whether to require exact quality of the imagery.\n        If set to false, the ``required_quality`` field is\n        interpreted as the minimum required quality, such that HIGH\n        quality imagery may be returned when ``required_quality`` is\n        set to MEDIUM. If set to true, ``required_quality`` is\n        interpreted as the exact required quality and only\n        ``MEDIUM`` quality imagery is returned if\n        ``required_quali",
      "attributes": {
        "location": {
          "type": "google.type.latlng_pb2.LatLng",
          "description": "Required. The longitude and latitude from which the API looks for the nearest known building."
        },
        "required_quality": {
          "type": "google.maps.solar_v1.types.ImageryQuality",
          "description": "Optional. The minimum quality level allowed in the results. No result with lower quality than this will be returned. Not specifying this is equivalent to restricting to HIGH quality only."
        },
        "exact_quality_required": {
          "type": "bool",
          "description": "Optional. Whether to require exact quality of the imagery. If set to false, the ``required_quality`` field is interpreted as the minimum required quality, such that HIGH quality imagery may be returned when ``required_quality`` is set to MEDIUM. If set to true, ``required_quality`` is interpreted as the exact required quality and only ``MEDIUM`` quality imagery is returned if ``required_quality`` is set to ``MEDIUM``."
        }
      }
    },
    {
      "type": "request_class",
      "name": "LatLngBox",
      "docstring": "A bounding box in lat/lng coordinates.\n\nAttributes:\n    sw (google.type.latlng_pb2.LatLng):\n        The southwest corner of the box.\n    ne (google.type.latlng_pb2.LatLng):\n        The northeast corner of the box.",
      "attributes": {
        "sw": {
          "type": "google.type.latlng_pb2.LatLng",
          "description": "The southwest corner of the box."
        },
        "ne": {
          "type": "google.type.latlng_pb2.LatLng",
          "description": "The northeast corner of the box."
        }
      }
    },
    {
      "type": "request_class",
      "name": "BuildingInsights",
      "docstring": "Response message for ``Solar.FindClosestBuildingInsights``.\nInformation about the location, dimensions, and solar potential of a\nbuilding.\n\nAttributes:\n    name (str):\n        The resource name for the building, of the format\n        ``building/<place ID>``.\n    center (google.type.latlng_pb2.LatLng):\n        A point near the center of the building.\n    bounding_box (google.maps.solar_v1.types.LatLngBox):\n        The bounding box of the building.\n    imagery_date (google.type.date_pb2.Date):\n        Date that the underlying imagery was\n        acquired. This is approximate.\n    imagery_processed_date (google.type.date_pb2.Date):\n        When processing was completed on this\n        imagery.\n    postal_code (str):\n        Postal code (e.g., US zip code) this building\n        is contained by.\n    administrative_area (str):\n        Administrative area 1 (e.g., in the US, the\n        state) that contains this building. For example,\n        in the US, the abbreviation might be \"MA\" or\n        \"CA.\".\n    statistica",
      "attributes": {
        "name": {
          "type": "str",
          "description": "The resource name for the building, of the format ``building/<place ID>``."
        },
        "center": {
          "type": "google.type.latlng_pb2.LatLng",
          "description": "A point near the center of the building."
        },
        "bounding_box": {
          "type": "google.maps.solar_v1.types.LatLngBox",
          "description": "The bounding box of the building."
        },
        "imagery_date": {
          "type": "google.type.date_pb2.Date",
          "description": "Date that the underlying imagery was acquired. This is approximate."
        },
        "imagery_processed_date": {
          "type": "google.type.date_pb2.Date",
          "description": "When processing was completed on this imagery."
        },
        "postal_code": {
          "type": "str",
          "description": "Postal code (e.g., US zip code) this building is contained by."
        },
        "administrative_area": {
          "type": "str",
          "description": "Administrative area 1 (e.g., in the US, the state) that contains this building. For example, in the US, the abbreviation might be \"MA\" or \"CA.\"."
        },
        "statistical_area": {
          "type": "str",
          "description": "Statistical area (e.g., US census tract) this building is in."
        },
        "region_code": {
          "type": "str",
          "description": "Region code for the country (or region) this building is in."
        },
        "solar_potential": {
          "type": "google.maps.solar_v1.types.SolarPotential",
          "description": "Solar potential of the building."
        },
        "imagery_quality": {
          "type": "google.maps.solar_v1.types.ImageryQuality",
          "description": "The quality of the imagery used to compute the data for this building."
        }
      }
    },
    {
      "type": "request_class",
      "name": "SolarPotential",
      "docstring": "Information about the solar potential of a building. A number of\nfields in this are defined in terms of \"panels\". The fields\n[panel_capacity_watts]\n[google.maps.solar.v1.SolarPotential.panel_capacity_watts],\n[panel_height_meters]\n[google.maps.solar.v1.SolarPotential.panel_height_meters], and\n[panel_width_meters]\n[google.maps.solar.v1.SolarPotential.panel_width_meters] describe\nthe parameters of the model of panel used in these calculations.\n\nAttributes:\n    max_array_panels_count (int):\n        Size of the maximum array - that is, the\n        maximum number of panels that can fit on the\n        roof.\n    panel_capacity_watts (float):\n        Capacity, in watts, of the panel used in the\n        calculations.\n    panel_height_meters (float):\n        Height, in meters in portrait orientation, of\n        the panel used in the calculations.\n    panel_width_meters (float):\n        Width, in meters in portrait orientation, of\n        the panel used in the calculations.\n    panel_lifetime_years (int):\n        The exp",
      "attributes": {
        "max_array_panels_count": {
          "type": "int",
          "description": "Size of the maximum array - that is, the maximum number of panels that can fit on the roof."
        },
        "panel_capacity_watts": {
          "type": "float",
          "description": "Capacity, in watts, of the panel used in the calculations."
        },
        "panel_height_meters": {
          "type": "float",
          "description": "Height, in meters in portrait orientation, of the panel used in the calculations."
        },
        "panel_width_meters": {
          "type": "float",
          "description": "Width, in meters in portrait orientation, of the panel used in the calculations."
        },
        "panel_lifetime_years": {
          "type": "int",
          "description": "The expected lifetime, in years, of the solar panels. This is used in the financial calculations."
        },
        "max_array_area_meters2": {
          "type": "float",
          "description": "Size, in square meters, of the maximum array."
        },
        "max_sunshine_hours_per_year": {
          "type": "float",
          "description": "Maximum number of sunshine hours received per year, by any point on the roof. Sunshine hours are a measure of the total amount of insolation (energy) received per year. 1 sunshine hour = 1 kWh per kW (where kW refers to kW of capacity under Standard Testing Conditions)."
        },
        "carbon_offset_factor_kg_per_mwh": {
          "type": "float",
          "description": "Equivalent amount of CO2 produced per MWh of grid electricity. This is a measure of the carbon intensity of grid electricity displaced by solar electricity."
        },
        "whole_roof_stats": {
          "type": "google.maps.solar_v1.types.SizeAndSunshineStats",
          "description": "Total size and sunlight quantiles for the part of the roof that was assigned to some roof segment. Despite the name, this may not include the entire building. See [building_stats] [google.maps.solar.v1.SolarPotential.building_stats]."
        },
        "building_stats": {
          "type": "google.maps.solar_v1.types.SizeAndSunshineStats",
          "description": "Size and sunlight quantiles for the entire building, including parts of the roof that were not assigned to some roof segment. Because the orientations of these parts are not well characterised, the roof area estimate is unreliable, but the ground area estimate is reliable. It may be that a more reliable whole building roof area can be obtained by scaling the roof area from [whole_roof_stats] [google.maps.solar.v1.SolarPotential.whole_roof_stats] by the ratio of the ground areas of ``building_stats`` and ``whole_roof_stats``."
        },
        "roof_segment_stats": {
          "type": "MutableSequence[google.maps.solar_v1.types.RoofSegmentSizeAndSunshineStats]",
          "description": "Size and sunlight quantiles for each roof segment."
        },
        "solar_panels": {
          "type": "MutableSequence[google.maps.solar_v1.types.SolarPanel]",
          "description": "Each [SolarPanel] [google.maps.solar.v1.SolarPanel] describes a single solar panel. They are listed in the order that the panel layout algorithm placed this. This is usually, though not always, in decreasing order of annual energy production."
        },
        "solar_panel_configs": {
          "type": "MutableSequence[google.maps.solar_v1.types.SolarPanelConfig]",
          "description": "Each [SolarPanelConfig] [google.maps.solar.v1.SolarPanelConfig] describes a different arrangement of solar panels on the roof. They are in order of increasing number of panels. The ``SolarPanelConfig`` with [panels_count] [google.maps.solar.v1.SolarPanelConfig.panels_count]=N is based on the first N panels in the ``solar_panels`` list. This field is only populated if at least 4 panels can fit on a roof."
        },
        "financial_analyses": {
          "type": "MutableSequence[google.maps.solar_v1.types.FinancialAnalysis]",
          "description": "A [FinancialAnalysis] [google.maps.solar.v1.FinancialAnalysis] gives the savings from going solar assuming a given monthly bill and a given electricity provider. They are in order of increasing order of monthly bill amount. This field will be empty for buildings in areas for which the Solar API does not have enough information to perform financial computations."
        }
      }
    },
    {
      "type": "request_class",
      "name": "RoofSegmentSizeAndSunshineStats",
      "docstring": "Information about the size and sunniness quantiles of a roof\nsegment.\n\n\n.. _oneof: https://proto-plus-python.readthedocs.io/en/stable/fields.html#oneofs-mutually-exclusive-fields\n\nAttributes:\n    pitch_degrees (float):\n        Angle of the roof segment relative to the\n        theoretical ground plane. 0 = parallel to the\n        ground, 90 = perpendicular to the ground.\n\n        This field is a member of `oneof`_ ``_pitch_degrees``.\n    azimuth_degrees (float):\n        Compass direction the roof segment is pointing in. 0 =\n        North, 90 = East, 180 = South. For a \"flat\" roof segment\n        (``pitch_degrees`` very near 0), azimuth is not well\n        defined, so for consistency, we define it arbitrarily to be\n        0 (North).\n\n        This field is a member of `oneof`_ ``_azimuth_degrees``.\n    stats (google.maps.solar_v1.types.SizeAndSunshineStats):\n        Total size and sunlight quantiles for the\n        roof segment.\n    center (google.type.latlng_pb2.LatLng):\n        A point near the center of the ",
      "attributes": {
        "pitch_degrees": {
          "type": "float",
          "description": "Angle of the roof segment relative to the theoretical ground plane. 0 = parallel to the ground, 90 = perpendicular to the ground.  This field is a member of `oneof`_ ``_pitch_degrees``."
        },
        "azimuth_degrees": {
          "type": "float",
          "description": "Compass direction the roof segment is pointing in. 0 = North, 90 = East, 180 = South. For a \"flat\" roof segment (``pitch_degrees`` very near 0), azimuth is not well defined, so for consistency, we define it arbitrarily to be 0 (North).  This field is a member of `oneof`_ ``_azimuth_degrees``."
        },
        "stats": {
          "type": "google.maps.solar_v1.types.SizeAndSunshineStats",
          "description": "Total size and sunlight quantiles for the roof segment."
        },
        "center": {
          "type": "google.type.latlng_pb2.LatLng",
          "description": "A point near the center of the roof segment."
        },
        "bounding_box": {
          "type": "google.maps.solar_v1.types.LatLngBox",
          "description": "The bounding box of the roof segment."
        },
        "plane_height_at_center_meters": {
          "type": "float",
          "description": "The height of the roof segment plane, in meters above sea level, at the point designated by ``center``. Together with the pitch, azimuth, and center location, this fully defines the roof segment plane.  This field is a member of `oneof`_ ``_plane_height_at_center_meters``."
        }
      }
    },
    {
      "type": "request_class",
      "name": "SizeAndSunshineStats",
      "docstring": "Size and sunniness quantiles of a roof, or part of a roof.\n\nAttributes:\n    area_meters2 (float):\n        The area of the roof or roof segment, in m^2.\n        This is the roof area (accounting for tilt), not\n        the ground footprint area.\n    sunshine_quantiles (MutableSequence[float]):\n        Quantiles of the pointwise sunniness across the area. If\n        there are N values here, this represents the (N-1)-iles. For\n        example, if there are 5 values, then they would be the\n        quartiles (min, 25%, 50%, 75%, max). Values are in annual\n        kWh/kW like [max_sunshine_hours_per_year]\n        [google.maps.solar.v1.SolarPotential.max_sunshine_hours_per_year].\n    ground_area_meters2 (float):\n        The ground footprint area covered by the roof\n        or roof segment, in m^2.",
      "attributes": {
        "area_meters2": {
          "type": "float",
          "description": "The area of the roof or roof segment, in m^2. This is the roof area (accounting for tilt), not the ground footprint area."
        },
        "sunshine_quantiles": {
          "type": "MutableSequence[float]",
          "description": "Quantiles of the pointwise sunniness across the area. If there are N values here, this represents the (N-1)-iles. For example, if there are 5 values, then they would be the quartiles (min, 25%, 50%, 75%, max). Values are in annual kWh/kW like [max_sunshine_hours_per_year] [google.maps.solar.v1.SolarPotential.max_sunshine_hours_per_year]."
        },
        "ground_area_meters2": {
          "type": "float",
          "description": "The ground footprint area covered by the roof or roof segment, in m^2."
        }
      }
    },
    {
      "type": "request_class",
      "name": "SolarPanel",
      "docstring": "SolarPanel describes the position, orientation, and production of a\nsingle solar panel. See the [panel_height_meters]\n[google.maps.solar.v1.SolarPotential.panel_height_meters],\n[panel_width_meters]\n[google.maps.solar.v1.SolarPotential.panel_width_meters], and\n[panel_capacity_watts]\n[google.maps.solar.v1.SolarPotential.panel_capacity_watts] fields in\n[SolarPotential] [google.maps.solar.v1.SolarPotential] for\ninformation on the parameters of the panel.\n\n\n.. _oneof: https://proto-plus-python.readthedocs.io/en/stable/fields.html#oneofs-mutually-exclusive-fields\n\nAttributes:\n    center (google.type.latlng_pb2.LatLng):\n        The centre of the panel.\n    orientation (google.maps.solar_v1.types.SolarPanelOrientation):\n        The orientation of the panel.\n    yearly_energy_dc_kwh (float):\n        How much sunlight energy this layout captures\n        over the course of a year, in DC kWh.\n    segment_index (int):\n        Index in [roof_segment_stats]\n        [google.maps.solar.v1.SolarPotential.roof_segment_stats] of",
      "attributes": {
        "center": {
          "type": "google.type.latlng_pb2.LatLng",
          "description": "The centre of the panel."
        },
        "orientation": {
          "type": "google.maps.solar_v1.types.SolarPanelOrientation",
          "description": "The orientation of the panel."
        },
        "yearly_energy_dc_kwh": {
          "type": "float",
          "description": "How much sunlight energy this layout captures over the course of a year, in DC kWh."
        },
        "segment_index": {
          "type": "int",
          "description": "Index in [roof_segment_stats] [google.maps.solar.v1.SolarPotential.roof_segment_stats] of the ``RoofSegmentSizeAndSunshineStats`` which corresponds to the roof segment that this panel is placed on.  This field is a member of `oneof`_ ``_segment_index``."
        }
      }
    },
    {
      "type": "request_class",
      "name": "SolarPanelConfig",
      "docstring": "SolarPanelConfig describes a particular placement of solar\npanels on the roof.\n\nAttributes:\n    panels_count (int):\n        Total number of panels. Note that this is redundant to (the\n        sum of) the corresponding fields in [roof_segment_summaries]\n        [google.maps.solar.v1.SolarPanelConfig.roof_segment_summaries].\n    yearly_energy_dc_kwh (float):\n        How much sunlight energy this layout captures\n        over the course of a year, in DC kWh, assuming\n        the panels described above.\n    roof_segment_summaries (MutableSequence[google.maps.solar_v1.types.RoofSegmentSummary]):\n        Information about the production of each roof segment that\n        is carrying at least one panel in this layout.\n        ``roof_segment_summaries[i]`` describes the i-th roof\n        segment, including its size, expected production and\n        orientation.",
      "attributes": {
        "panels_count": {
          "type": "int",
          "description": "Total number of panels. Note that this is redundant to (the sum of) the corresponding fields in [roof_segment_summaries] [google.maps.solar.v1.SolarPanelConfig.roof_segment_summaries]."
        },
        "yearly_energy_dc_kwh": {
          "type": "float",
          "description": "How much sunlight energy this layout captures over the course of a year, in DC kWh, assuming the panels described above."
        },
        "roof_segment_summaries": {
          "type": "MutableSequence[google.maps.solar_v1.types.RoofSegmentSummary]",
          "description": "Information about the production of each roof segment that is carrying at least one panel in this layout. ``roof_segment_summaries[i]`` describes the i-th roof segment, including its size, expected production and orientation."
        }
      }
    },
    {
      "type": "request_class",
      "name": "RoofSegmentSummary",
      "docstring": "Information about a roof segment on the building, with some\nnumber of panels placed on it.\n\n\n.. _oneof: https://proto-plus-python.readthedocs.io/en/stable/fields.html#oneofs-mutually-exclusive-fields\n\nAttributes:\n    pitch_degrees (float):\n        Angle of the roof segment relative to the\n        theoretical ground plane. 0 = parallel to the\n        ground, 90 = perpendicular to the ground.\n\n        This field is a member of `oneof`_ ``_pitch_degrees``.\n    azimuth_degrees (float):\n        Compass direction the roof segment is pointing in. 0 =\n        North, 90 = East, 180 = South. For a \"flat\" roof segment\n        (``pitch_degrees`` very near 0), azimuth is not well\n        defined, so for consistency, we define it arbitrarily to be\n        0 (North).\n\n        This field is a member of `oneof`_ ``_azimuth_degrees``.\n    panels_count (int):\n        The total number of panels on this segment.\n    yearly_energy_dc_kwh (float):\n        How much sunlight energy this part of the\n        layout captures over the co",
      "attributes": {
        "pitch_degrees": {
          "type": "float",
          "description": "Angle of the roof segment relative to the theoretical ground plane. 0 = parallel to the ground, 90 = perpendicular to the ground.  This field is a member of `oneof`_ ``_pitch_degrees``."
        },
        "azimuth_degrees": {
          "type": "float",
          "description": "Compass direction the roof segment is pointing in. 0 = North, 90 = East, 180 = South. For a \"flat\" roof segment (``pitch_degrees`` very near 0), azimuth is not well defined, so for consistency, we define it arbitrarily to be 0 (North).  This field is a member of `oneof`_ ``_azimuth_degrees``."
        },
        "panels_count": {
          "type": "int",
          "description": "The total number of panels on this segment."
        },
        "yearly_energy_dc_kwh": {
          "type": "float",
          "description": "How much sunlight energy this part of the layout captures over the course of a year, in DC kWh, assuming the panels described above."
        },
        "segment_index": {
          "type": "int",
          "description": "Index in [roof_segment_stats] [google.maps.solar.v1.SolarPotential.roof_segment_stats] of the corresponding ``RoofSegmentSizeAndSunshineStats``.  This field is a member of `oneof`_ ``_segment_index``."
        }
      }
    },
    {
      "type": "request_class",
      "name": "FinancialAnalysis",
      "docstring": "Analysis of the cost and benefits of the optimum solar layout\nfor a particular electric bill size.\n\n\n.. _oneof: https://proto-plus-python.readthedocs.io/en/stable/fields.html#oneofs-mutually-exclusive-fields\n\nAttributes:\n    monthly_bill (google.type.money_pb2.Money):\n        The monthly electric bill this analysis\n        assumes.\n    default_bill (bool):\n        Whether this is the bill size selected to be the default\n        bill for the area this building is in. Exactly one\n        ``FinancialAnalysis`` in ``BuildingSolarPotential`` should\n        have ``default_bill`` set.\n    average_kwh_per_month (float):\n        How much electricity the house uses in an\n        average month, based on the bill size and the\n        local electricity rates.\n    panel_config_index (int):\n        Index in [solar_panel_configs]\n        [google.maps.solar.v1.SolarPotential.solar_panel_configs] of\n        the optimum solar layout for this bill size. This can be -1\n        indicating that there is no layout. In this case, the",
      "attributes": {
        "monthly_bill": {
          "type": "google.type.money_pb2.Money",
          "description": "The monthly electric bill this analysis assumes."
        },
        "default_bill": {
          "type": "bool",
          "description": "Whether this is the bill size selected to be the default bill for the area this building is in. Exactly one ``FinancialAnalysis`` in ``BuildingSolarPotential`` should have ``default_bill`` set."
        },
        "average_kwh_per_month": {
          "type": "float",
          "description": "How much electricity the house uses in an average month, based on the bill size and the local electricity rates."
        },
        "panel_config_index": {
          "type": "int",
          "description": "Index in [solar_panel_configs] [google.maps.solar.v1.SolarPotential.solar_panel_configs] of the optimum solar layout for this bill size. This can be -1 indicating that there is no layout. In this case, the remaining submessages will be omitted.  This field is a member of `oneof`_ ``_panel_config_index``."
        },
        "financial_details": {
          "type": "google.maps.solar_v1.types.FinancialDetails",
          "description": "Financial information that applies regardless of the financing method used."
        },
        "leasing_savings": {
          "type": "google.maps.solar_v1.types.LeasingSavings",
          "description": "Cost and benefit of leasing the solar panels."
        },
        "cash_purchase_savings": {
          "type": "google.maps.solar_v1.types.CashPurchaseSavings",
          "description": "Cost and benefit of buying the solar panels with cash."
        },
        "financed_purchase_savings": {
          "type": "google.maps.solar_v1.types.FinancedPurchaseSavings",
          "description": "Cost and benefit of buying the solar panels by financing the purchase."
        }
      }
    },
    {
      "type": "request_class",
      "name": "FinancialDetails",
      "docstring": "Details of a financial analysis. Some of these details are already\nstored at higher levels (e.g., out of pocket cost). Total money\namounts are over a lifetime period defined by the\n[panel_lifetime_years]\n[google.maps.solar.v1.SolarPotential.panel_lifetime_years] field in\n[SolarPotential] [google.maps.solar.v1.SolarPotential]. Note: The\nout of pocket cost of purchasing the panels is given in the\n[out_of_pocket_cost]\n[google.maps.solar.v1.CashPurchaseSavings.out_of_pocket_cost] field\nin [CashPurchaseSavings] [google.maps.solar.v1.CashPurchaseSavings].\n\n\n.. _oneof: https://proto-plus-python.readthedocs.io/en/stable/fields.html#oneofs-mutually-exclusive-fields\n\nAttributes:\n    initial_ac_kwh_per_year (float):\n        How many AC kWh we think the solar panels\n        will generate in their first year.\n    remaining_lifetime_utility_bill (google.type.money_pb2.Money):\n        Utility bill for electricity not produced by\n        solar, for the lifetime of the panels.\n    federal_incentive (google.type.money_pb2.Mone",
      "attributes": {
        "initial_ac_kwh_per_year": {
          "type": "float",
          "description": "How many AC kWh we think the solar panels will generate in their first year."
        },
        "remaining_lifetime_utility_bill": {
          "type": "google.type.money_pb2.Money",
          "description": "Utility bill for electricity not produced by solar, for the lifetime of the panels."
        },
        "federal_incentive": {
          "type": "google.type.money_pb2.Money",
          "description": "Amount of money available from federal incentives; this applies if the user buys (with or without a loan) the panels."
        },
        "state_incentive": {
          "type": "google.type.money_pb2.Money",
          "description": "Amount of money available from state incentives; this applies if the user buys (with or without a loan) the panels."
        },
        "utility_incentive": {
          "type": "google.type.money_pb2.Money",
          "description": "Amount of money available from utility incentives; this applies if the user buys (with or without a loan) the panels."
        },
        "lifetime_srec_total": {
          "type": "google.type.money_pb2.Money",
          "description": "Amount of money the user will receive from Solar Renewable Energy Credits over the panel lifetime; this applies if the user buys (with or without a loan) the panels."
        },
        "cost_of_electricity_without_solar": {
          "type": "google.type.money_pb2.Money",
          "description": "Total cost of electricity the user would have paid over the lifetime period if they didn't install solar."
        },
        "net_metering_allowed": {
          "type": "bool",
          "description": "Whether net metering is allowed."
        },
        "solar_percentage": {
          "type": "float",
          "description": "Percentage (0-100) of the user's power supplied by solar. Valid for the first year but approximately correct for future years.  This field is a member of `oneof`_ ``_solar_percentage``."
        },
        "percentage_exported_to_grid": {
          "type": "float",
          "description": "The percentage (0-100) of solar electricity production we assumed was exported to the grid, based on the first quarter of production. This affects the calculations if net metering is not allowed.  This field is a member of `oneof`_ ``_percentage_exported_to_grid``."
        }
      }
    },
    {
      "type": "request_class",
      "name": "SavingsOverTime",
      "docstring": "Financial information that's shared between different\nfinancing methods.\n\nAttributes:\n    savings_year1 (google.type.money_pb2.Money):\n        Savings in the first year after panel\n        installation.\n    savings_year20 (google.type.money_pb2.Money):\n        Savings in the first twenty years after panel\n        installation.\n    present_value_of_savings_year20 (google.type.money_pb2.Money):\n        Using the assumed discount rate, what is the\n        present value of the cumulative 20-year savings?\n    savings_lifetime (google.type.money_pb2.Money):\n        Savings in the entire panel lifetime.\n    present_value_of_savings_lifetime (google.type.money_pb2.Money):\n        Using the assumed discount rate, what is the\n        present value of the cumulative lifetime\n        savings?\n    financially_viable (bool):\n        Indicates whether this scenario is\n        financially viable.  Will be false for scenarios\n        with poor financial viability (e.g.,\n        money-losing).",
      "attributes": {
        "savings_year1": {
          "type": "google.type.money_pb2.Money",
          "description": "Savings in the first year after panel installation."
        },
        "savings_year20": {
          "type": "google.type.money_pb2.Money",
          "description": "Savings in the first twenty years after panel installation."
        },
        "present_value_of_savings_year20": {
          "type": "google.type.money_pb2.Money",
          "description": "Using the assumed discount rate, what is the present value of the cumulative 20-year savings?"
        },
        "savings_lifetime": {
          "type": "google.type.money_pb2.Money",
          "description": "Savings in the entire panel lifetime."
        },
        "present_value_of_savings_lifetime": {
          "type": "google.type.money_pb2.Money",
          "description": "Using the assumed discount rate, what is the present value of the cumulative lifetime savings?"
        },
        "financially_viable": {
          "type": "bool",
          "description": "Indicates whether this scenario is financially viable.  Will be false for scenarios with poor financial viability (e.g., money-losing)."
        }
      }
    },
    {
      "type": "request_class",
      "name": "LeasingSavings",
      "docstring": "Cost and benefit of leasing a particular configuration of\nsolar panels with a particular electricity usage.\n\nAttributes:\n    leases_allowed (bool):\n        Whether leases are allowed in this\n        juristiction (leases are not allowed in some\n        states). If this field is false, then the values\n        in this message should probably be ignored.\n    leases_supported (bool):\n        Whether leases are supported in this juristiction by the\n        financial calculation engine. If this field is false, then\n        the values in this message should probably be ignored. This\n        is independent of ``leases_allowed``: in some areas leases\n        are allowed, but under conditions that aren't handled by the\n        financial models.\n    annual_leasing_cost (google.type.money_pb2.Money):\n        Estimated annual leasing cost.\n    savings (google.maps.solar_v1.types.SavingsOverTime):\n        How much is saved (or not) over the lifetime\n        period.",
      "attributes": {
        "leases_allowed": {
          "type": "bool",
          "description": "Whether leases are allowed in this juristiction (leases are not allowed in some states). If this field is false, then the values in this message should probably be ignored."
        },
        "leases_supported": {
          "type": "bool",
          "description": "Whether leases are supported in this juristiction by the financial calculation engine. If this field is false, then the values in this message should probably be ignored. This is independent of ``leases_allowed``: in some areas leases are allowed, but under conditions that aren't handled by the financial models."
        },
        "annual_leasing_cost": {
          "type": "google.type.money_pb2.Money",
          "description": "Estimated annual leasing cost."
        },
        "savings": {
          "type": "google.maps.solar_v1.types.SavingsOverTime",
          "description": "How much is saved (or not) over the lifetime period."
        }
      }
    },
    {
      "type": "request_class",
      "name": "CashPurchaseSavings",
      "docstring": "Cost and benefit of an outright purchase of a particular\nconfiguration of solar panels with a particular electricity\nusage.\n\n\n.. _oneof: https://proto-plus-python.readthedocs.io/en/stable/fields.html#oneofs-mutually-exclusive-fields\n\nAttributes:\n    out_of_pocket_cost (google.type.money_pb2.Money):\n        Initial cost before tax incentives: the amount that must be\n        paid out-of-pocket. Contrast with ``upfront_cost``, which is\n        after tax incentives.\n    upfront_cost (google.type.money_pb2.Money):\n        Initial cost after tax incentives: it's the amount that must\n        be paid during first year. Contrast with\n        ``out_of_pocket_cost``, which is before tax incentives.\n    rebate_value (google.type.money_pb2.Money):\n        The value of all tax rebates.\n    payback_years (float):\n        Number of years until payback occurs. A\n        negative value means payback never occurs within\n        the lifetime period.\n\n        This field is a member of `oneof`_ ``_payback_years``.\n    savings (goo",
      "attributes": {
        "out_of_pocket_cost": {
          "type": "google.type.money_pb2.Money",
          "description": "Initial cost before tax incentives: the amount that must be paid out-of-pocket. Contrast with ``upfront_cost``, which is after tax incentives."
        },
        "upfront_cost": {
          "type": "google.type.money_pb2.Money",
          "description": "Initial cost after tax incentives: it's the amount that must be paid during first year. Contrast with ``out_of_pocket_cost``, which is before tax incentives."
        },
        "rebate_value": {
          "type": "google.type.money_pb2.Money",
          "description": "The value of all tax rebates."
        },
        "payback_years": {
          "type": "float",
          "description": "Number of years until payback occurs. A negative value means payback never occurs within the lifetime period.  This field is a member of `oneof`_ ``_payback_years``."
        },
        "savings": {
          "type": "google.maps.solar_v1.types.SavingsOverTime",
          "description": "How much is saved (or not) over the lifetime period."
        }
      }
    },
    {
      "type": "request_class",
      "name": "FinancedPurchaseSavings",
      "docstring": "Cost and benefit of using a loan to buy a particular\nconfiguration of solar panels with a particular electricity\nusage.\n\nAttributes:\n    annual_loan_payment (google.type.money_pb2.Money):\n        Annual loan payments.\n    rebate_value (google.type.money_pb2.Money):\n        The value of all tax rebates (including\n        Federal Investment Tax Credit (ITC)).\n    loan_interest_rate (float):\n        The interest rate on loans assumed in this\n        set of calculations.\n    savings (google.maps.solar_v1.types.SavingsOverTime):\n        How much is saved (or not) over the lifetime\n        period.",
      "attributes": {
        "annual_loan_payment": {
          "type": "google.type.money_pb2.Money",
          "description": "Annual loan payments."
        },
        "rebate_value": {
          "type": "google.type.money_pb2.Money",
          "description": "The value of all tax rebates (including Federal Investment Tax Credit (ITC))."
        },
        "loan_interest_rate": {
          "type": "float",
          "description": "The interest rate on loans assumed in this set of calculations."
        },
        "savings": {
          "type": "google.maps.solar_v1.types.SavingsOverTime",
          "description": "How much is saved (or not) over the lifetime period."
        }
      }
    },
    {
      "type": "request_class",
      "name": "GetDataLayersRequest",
      "docstring": "Request message for ``Solar.GetDataLayers``.\n\nAttributes:\n    location (google.type.latlng_pb2.LatLng):\n        Required. The longitude and latitude for the\n        center of the region to get data for.\n    radius_meters (float):\n        Required. The radius, in meters, defining the region\n        surrounding that centre point for which data should be\n        returned. The limitations on this value are:\n\n        -  Any value up to 100m can always be specified.\n        -  Values over 100m can be specified, as long as\n           ``radius_meters`` <= ``pixel_size_meters * 1000``.\n        -  However, for values over 175m, the ``DataLayerView`` in\n           the request must not include monthly flux or hourly\n           shade.\n    view (google.maps.solar_v1.types.DataLayerView):\n        Optional. The desired subset of the data to\n        return.\n    required_quality (google.maps.solar_v1.types.ImageryQuality):\n        Optional. The minimum quality level allowed\n        in the results. No result with lower quality\n",
      "attributes": {
        "location": {
          "type": "google.type.latlng_pb2.LatLng",
          "description": "Required. The longitude and latitude for the center of the region to get data for."
        },
        "radius_meters": {
          "type": "float",
          "description": "Required. The radius, in meters, defining the region surrounding that centre point for which data should be returned. The limitations on this value are:  -  Any value up to 100m can always be specified. -  Values over 100m can be specified, as long as ``radius_meters`` <= ``pixel_size_meters * 1000``. -  However, for values over 175m, the ``DataLayerView`` in the request must not include monthly flux or hourly shade."
        },
        "view": {
          "type": "google.maps.solar_v1.types.DataLayerView",
          "description": "Optional. The desired subset of the data to return."
        },
        "required_quality": {
          "type": "google.maps.solar_v1.types.ImageryQuality",
          "description": "Optional. The minimum quality level allowed in the results. No result with lower quality than this will be returned. Not specifying this is equivalent to restricting to HIGH quality only."
        },
        "pixel_size_meters": {
          "type": "float",
          "description": "Optional. The minimum scale, in meters per pixel, of the data to return. Values of 0.1 (the default, if this field is not set explicitly), 0.25, 0.5, and 1.0 are supported. Imagery components whose normal resolution is less than ``pixel_size_meters`` will be returned at the resolution specified by ``pixel_size_meters``; imagery components whose normal resolution is equal to or greater than ``pixel_size_meters`` will be returned at that normal resolution."
        },
        "exact_quality_required": {
          "type": "bool",
          "description": "Optional. Whether to require exact quality of the imagery. If set to false, the ``required_quality`` field is interpreted as the minimum required quality, such that HIGH quality imagery may be returned when ``required_quality`` is set to MEDIUM. If set to true, ``required_quality`` is interpreted as the exact required quality and only ``MEDIUM`` quality imagery is returned if ``required_quality`` is set to ``MEDIUM``."
        }
      }
    },
    {
      "type": "request_class",
      "name": "DataLayers",
      "docstring": "Information about the solar potential of a region. The actual data\nare contained in a number of GeoTIFF files covering the requested\nregion, for which this message contains URLs: Each string in the\n``DataLayers`` message contains a URL from which the corresponding\nGeoTIFF can be fetched. These URLs are valid for a few hours after\nthey've been generated. Most of the GeoTIFF files are at a\nresolution of 0.1m/pixel, but the monthly flux file is at\n0.5m/pixel, and the hourly shade files are at 1m/pixel. If a\n``pixel_size_meters`` value was specified in the\n``GetDataLayersRequest``, then the minimum resolution in the GeoTIFF\nfiles will be that value.\n\nAttributes:\n    imagery_date (google.type.date_pb2.Date):\n        When the source imagery (from which all the\n        other data are derived) in this region was\n        taken. It is necessarily somewhat approximate,\n        as the images may have been taken over more than\n        one day.\n    imagery_processed_date (google.type.date_pb2.Date):\n        When processing",
      "attributes": {
        "imagery_date": {
          "type": "google.type.date_pb2.Date",
          "description": "When the source imagery (from which all the other data are derived) in this region was taken. It is necessarily somewhat approximate, as the images may have been taken over more than one day."
        },
        "imagery_processed_date": {
          "type": "google.type.date_pb2.Date",
          "description": "When processing was completed on this imagery."
        },
        "dsm_url": {
          "type": "str",
          "description": "The URL for an image of the DSM (Digital Surface Model) of the region. Values are in meters above EGM96 geoid (i.e., sea level). Invalid locations (where we don't have data) are stored as -9999."
        },
        "rgb_url": {
          "type": "str",
          "description": "The URL for an image of RGB data (aerial photo) of the region."
        },
        "mask_url": {
          "type": "str",
          "description": "The URL for the building mask image: one bit per pixel saying whether that pixel is considered to be part of a rooftop or not."
        },
        "annual_flux_url": {
          "type": "str",
          "description": "The URL for the annual flux map (annual sunlight on roofs) of the region. Values are kWh/kW/year. This is *unmasked flux*: flux is computed for every location, not just building rooftops. Invalid locations are stored as -9999: locations outside our coverage area will be invalid, and a few locations inside the coverage area, where we were unable to calculate flux, will also be invalid."
        },
        "monthly_flux_url": {
          "type": "str",
          "description": "The URL for the monthly flux map (sunlight on roofs, broken down by month) of the region. Values are kWh/kW/year. The GeoTIFF pointed to by this URL will contain twelve bands, corresponding to January...December, in order."
        },
        "hourly_shade_urls": {
          "type": "MutableSequence[str]",
          "description": "Twelve URLs for hourly shade, corresponding to January...December, in order. Each GeoTIFF will contain 24 bands, corresponding to the 24 hours of the day. Each pixel is a 32 bit integer, corresponding to the (up to) 31 days of that month; a 1 bit means that the corresponding location is able to see the sun at that day, of that hour, of that month. Invalid locations are stored as -9999 (since this is negative, it has bit 31 set, and no valid value could have bit 31 set as that would correspond to the 32nd day of the month).  An example may be useful. If you want to know whether a point (at pixel location (x, y)) saw sun at 4pm on the 22nd of June you would:  1. fetch the sixth URL in this list (corresponding to June). 2. look up the 17th channel (corresponding to 4pm). 3. read the 32-bit value at (x, y). 4. read bit 21 of the value (corresponding to the 22nd of the month). 5. if that bit is a 1, then that spot saw the sun at 4pm 22 June.  More formally: Given ``month`` (1-12), ``day`` (1...month max; February has 28 days) and ``hour`` (0-23), the shade/sun for that month/day/hour at a position ``(x, y)`` is the bit  ::  (hourly_shade[month - 1])(x, y)[hour] & (1 << (day - 1))  where ``(x, y)`` is spatial indexing, ``[month - 1]`` refers to fetching the ``month - 1``\\ st URL (indexing from zero), ``[hour]`` is indexing into the channels, and a final non-zero result means \"sunny\". There are no leap days, and DST doesn't exist (all days are 24 hours long; noon is always \"standard time\" noon)."
        },
        "imagery_quality": {
          "type": "google.maps.solar_v1.types.ImageryQuality",
          "description": "The quality of the result's imagery."
        }
      }
    },
    {
      "type": "request_class",
      "name": "GetGeoTiffRequest",
      "docstring": "Request message for ``Solar.GetGeoTiff``.\n\nAttributes:\n    id (str):\n        Required. The ID of the asset being\n        requested.",
      "attributes": {
        "id": {
          "type": "str",
          "description": "Required. The ID of the asset being requested."
        }
      }
    }
  ]
}