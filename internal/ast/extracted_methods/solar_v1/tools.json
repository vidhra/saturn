{
  "Solar": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "find_closest_building_insights",
          "description": "Locates the closest building to a query point. Returns an error\nwith code ``NOT_FOUND`` if there are no buildings within\napproximately 50m of the query point.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import solar_v1\n\n    async def sample_find_closest_building_insights():\n        # Create a client\n        client = solar_v1.SolarAsyncClient()\n\n        # Initialize request argument(s)\n        request = solar_v1.FindClosestBuildingInsightsRequest(\n        )\n\n        # Make the request\n        response = await client.find_closest_building_insights(request=request)\n\n        # Handle the response\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Solar.FindClosestBuildingInsightsRequest"
          ],
          "response_types": [
            "google.maps.solar_v1.types.BuildingInsights"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_data_layers",
          "description": "Gets solar information for a region surrounding a location.\nReturns an error with code ``NOT_FOUND`` if the location is\noutside the coverage area.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import solar_v1\n\n    async def sample_get_data_layers():\n        # Create a client\n        client = solar_v1.SolarAsyncClient()\n\n        # Initialize request argument(s)\n        request = solar_v1.GetDataLayersRequest(\n            radius_meters=0.1399,\n        )\n\n        # Make the request\n        response = await client.get_data_layers(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Solar.GetDataLayersRequest"
          ],
          "response_types": [
            "google.maps.solar_v1.types.DataLayers"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_geo_tiff",
          "description": "Returns an image by its ID.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import solar_v1\n\n    async def sample_get_geo_tiff():\n        # Create a client\n        client = solar_v1.SolarAsyncClient()\n\n        # Initialize request argument(s)\n        request = solar_v1.GetGeoTiffRequest(\n            id=\"id_value\",\n        )\n\n        # Make the request\n        response = await client.get_geo_tiff(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.maps.solar_v1.types.GetGeoTiffRequest, dict]]):\n        The request object. Request message for ``S",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "Solar.GetGeoTiffRequest"
          ],
          "response_types": [
            "google.api.httpbody_pb2.HttpBody"
          ]
        }
      }
    ]
  }
}