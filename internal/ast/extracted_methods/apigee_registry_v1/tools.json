{
  "Provisioning": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_instance",
          "description": "Provisions instance resources for the Registry.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_create_instance():\n        # Create a client\n        client = apigee_registry_v1.ProvisioningAsyncClient()\n\n        # Initialize request argument(s)\n        instance = apigee_registry_v1.Instance()\n        instance.config.cmek_key_name = \"cmek_key_name_value\"\n\n        request = apigee_registry_v1.CreateInstanceRequest(\n            parent=\"parent_value\",\n            instance_id=\"instance_id_value\",\n            instance=instance,\n        )\n\n        # Make the reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent resource of the Instance, of the form: ``projects/*/locations/*``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "instance": {
                "type": "google.cloud.apigee_registry_v1.types.Instance",
                "description": "Required. The Instance. This corresponds to the ``instance`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "instance_id": {
                "type": "str",
                "description": "Required. Identifier to assign to the Instance. Must be unique within scope of the parent resource.  This corresponds to the ``instance_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.apigee_registry_v1.types.Instance` An Instance represents the instance resources of the Registry. Currently, only one instance is allowed for each project."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "instance",
              "instance_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_instance",
          "description": "Deletes the Registry instance.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_delete_instance():\n        # Create a client\n        client = apigee_registry_v1.ProvisioningAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.DeleteInstanceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_instance(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the Instance to delete. Format: ``projects/*/locations/*/instances/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_instance",
          "description": "Gets details of a single Instance.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_get_instance():\n        # Create a client\n        client = apigee_registry_v1.ProvisioningAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.GetInstanceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_instance(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.GetInstanceRequest",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the Instance to retrieve. Format: ``projects/*/locations/*/instances/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.Instance: An Instance represents the instance resources of the Registry. Currently, only one instance is allowed for each project."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.Instance"
          ]
        }
      }
    ]
  },
  "Registry": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_apis",
          "description": "Returns matching APIs.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_list_apis():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.ListApisRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_apis(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of APIs. Format: ``projects/*/locations/*``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.services.registry.pagers.ListApisAsyncPager: Response message for ListApis.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.services.registry.pagers.ListApisAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_api",
          "description": "Returns a specified API.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_get_api():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.GetApiRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_api(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.GetApiRequest, dict]]):\n        The request obj",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the API to retrieve. Format: ``projects/*/locations/*/apis/*``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.Api: A top-level description of an API. Produced by producers and are commitments to provide services."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.Api"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_api",
          "description": "Creates a specified API.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_create_api():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.CreateApiRequest(\n            parent=\"parent_value\",\n            api_id=\"api_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_api(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of APIs. Format: ``projects/*/locations/*``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "api": {
                "type": "google.cloud.apigee_registry_v1.types.Api",
                "description": "Required. The API to create. This corresponds to the ``api`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "api_id": {
                "type": "str",
                "description": "Required. The ID to use for the API, which will become the final component of the API's resource name.  This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/.  Following AIP-162, IDs must not have the form of a UUID.  This corresponds to the ``api_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.Api: A top-level description of an API. Produced by producers and are commitments to provide services."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "api",
              "api_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.Api"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_api",
          "description": "Used to modify a specified API.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_update_api():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.UpdateApiRequest(\n        )\n\n        # Make the request\n        response = await client.update_api(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.UpdateApiRequest, dict]]):\n        The request object. Request",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "api": {
                "type": "google.cloud.apigee_registry_v1.types.Api",
                "description": "Required. The API to update.  The ``name`` field is used to identify the API to update. Format: ``projects/*/locations/*/apis/*``  This corresponds to the ``api`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If an asterisk \"*\" is specified, all fields are updated, including fields that are unspecified/default in the request.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.Api: A top-level description of an API. Produced by producers and are commitments to provide services."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "api",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.Api"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_api",
          "description": "Removes a specified API and all of the resources that\nit owns.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_delete_api():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.DeleteApiRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_api(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.DeleteApiRequest, dict]]):\n        The request object. Request mes",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the API to delete. Format: ``projects/*/locations/*/apis/*``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_api_versions",
          "description": "Returns matching versions.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_list_api_versions():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.ListApiVersionsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_api_versions(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of versions. Format: ``projects/*/locations/*/apis/*``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.services.registry.pagers.ListApiVersionsAsyncPager: Response message for ListApiVersions.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.services.registry.pagers.ListApiVersionsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_api_version",
          "description": "Returns a specified version.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_get_api_version():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.GetApiVersionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_api_version(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.GetApiVersionRequest",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the version to retrieve. Format: ``projects/*/locations/*/apis/*/versions/*``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.ApiVersion: Describes a particular version of an API. ApiVersions are what consumers actually use."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiVersion"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_api_version",
          "description": "Creates a specified version.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_create_api_version():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.CreateApiVersionRequest(\n            parent=\"parent_value\",\n            api_version_id=\"api_version_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_api_version(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of versions. Format: ``projects/*/locations/*/apis/*``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "api_version": {
                "type": "google.cloud.apigee_registry_v1.types.ApiVersion",
                "description": "Required. The version to create. This corresponds to the ``api_version`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "api_version_id": {
                "type": "str",
                "description": "Required. The ID to use for the version, which will become the final component of the version's resource name.  This value should be 1-63 characters, and valid characters are /[a-z][0-9]-/.  Following AIP-162, IDs must not have the form of a UUID.  This corresponds to the ``api_version_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.ApiVersion: Describes a particular version of an API. ApiVersions are what consumers actually use."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "api_version",
              "api_version_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiVersion"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_api_version",
          "description": "Used to modify a specified version.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_update_api_version():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.UpdateApiVersionRequest(\n        )\n\n        # Make the request\n        response = await client.update_api_version(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.UpdateApiVersionRequest, dict]]):\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "api_version": {
                "type": "google.cloud.apigee_registry_v1.types.ApiVersion",
                "description": "Required. The version to update.  The ``name`` field is used to identify the version to update. Format: ``projects/*/locations/*/apis/*/versions/*``  This corresponds to the ``api_version`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If an asterisk \"*\" is specified, all fields are updated, including fields that are unspecified/default in the request.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.ApiVersion: Describes a particular version of an API. ApiVersions are what consumers actually use."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "api_version",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiVersion"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_api_version",
          "description": "Removes a specified version and all of the resources\nthat it owns.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_delete_api_version():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.DeleteApiVersionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_api_version(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.DeleteApiVersionRequest, dict]]):\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the version to delete. Format: ``projects/*/locations/*/apis/*/versions/*``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_api_specs",
          "description": "Returns matching specs.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_list_api_specs():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.ListApiSpecsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_api_specs(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apige",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of specs. Format: ``projects/*/locations/*/apis/*/versions/*``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.services.registry.pagers.ListApiSpecsAsyncPager: Response message for ListApiSpecs.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.services.registry.pagers.ListApiSpecsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_api_spec",
          "description": "Returns a specified spec.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_get_api_spec():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.GetApiSpecRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_api_spec(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.GetApiSpecRequest, dict]]):\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the spec to retrieve. Format: ``projects/*/locations/*/apis/*/versions/*/specs/*``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.ApiSpec: Describes a version of an API in a structured way. ApiSpecs provide formal descriptions that consumers can use to use a version. ApiSpec resources are intended to be fully-resolved descriptions of an ApiVersion. When specs consist of multiple files, these should be bundled together (e.g., in a zip archive) and stored as a unit. Multiple specs can exist to provide representations in different API description formats. Synchronization of these representations would be provided by tooling and background services."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiSpec"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_api_spec_contents",
          "description": "Returns the contents of a specified spec. If specs are stored\nwith GZip compression, the default behavior is to return the\nspec uncompressed (the mime_type response field indicates the\nexact format returned).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_get_api_spec_contents():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.GetApiSpecContentsRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = awa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the spec whose contents should be retrieved. Format: ``projects/*/locations/*/apis/*/versions/*/specs/*``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api.httpbody_pb2.HttpBody: Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page.  This message can be used both in streaming and non-streaming API methods in the request as well as the response.  It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body.  Example:  message GetResourceRequest { // A unique request id. string request_id = 1;  // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2;  }  service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);  rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty);  }  Example with streaming methods:  service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody);  rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody);  }  Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api.httpbody_pb2.HttpBody"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_api_spec",
          "description": "Creates a specified spec.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_create_api_spec():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.CreateApiSpecRequest(\n            parent=\"parent_value\",\n            api_spec_id=\"api_spec_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_api_spec(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of specs. Format: ``projects/*/locations/*/apis/*/versions/*``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "api_spec": {
                "type": "google.cloud.apigee_registry_v1.types.ApiSpec",
                "description": "Required. The spec to create. This corresponds to the ``api_spec`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "api_spec_id": {
                "type": "str",
                "description": "Required. The ID to use for the spec, which will become the final component of the spec's resource name.  This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/.  Following AIP-162, IDs must not have the form of a UUID.  This corresponds to the ``api_spec_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.ApiSpec: Describes a version of an API in a structured way. ApiSpecs provide formal descriptions that consumers can use to use a version. ApiSpec resources are intended to be fully-resolved descriptions of an ApiVersion. When specs consist of multiple files, these should be bundled together (e.g., in a zip archive) and stored as a unit. Multiple specs can exist to provide representations in different API description formats. Synchronization of these representations would be provided by tooling and background services."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "api_spec",
              "api_spec_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiSpec"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_api_spec",
          "description": "Used to modify a specified spec.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_update_api_spec():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.UpdateApiSpecRequest(\n        )\n\n        # Make the request\n        response = await client.update_api_spec(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.UpdateApiSpecRequest, dict]]):\n        The requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "api_spec": {
                "type": "google.cloud.apigee_registry_v1.types.ApiSpec",
                "description": "Required. The spec to update.  The ``name`` field is used to identify the spec to update. Format: ``projects/*/locations/*/apis/*/versions/*/specs/*``  This corresponds to the ``api_spec`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If an asterisk \"*\" is specified, all fields are updated, including fields that are unspecified/default in the request.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.ApiSpec: Describes a version of an API in a structured way. ApiSpecs provide formal descriptions that consumers can use to use a version. ApiSpec resources are intended to be fully-resolved descriptions of an ApiVersion. When specs consist of multiple files, these should be bundled together (e.g., in a zip archive) and stored as a unit. Multiple specs can exist to provide representations in different API description formats. Synchronization of these representations would be provided by tooling and background services."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "api_spec",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiSpec"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_api_spec",
          "description": "Removes a specified spec, all revisions, and all\nchild resources (e.g., artifacts).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_delete_api_spec():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.DeleteApiSpecRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_api_spec(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.DeleteApiSpecRequest, dict]]):\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the spec to delete. Format: ``projects/*/locations/*/apis/*/versions/*/specs/*``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "tag_api_spec_revision",
          "description": "Adds a tag to a specified revision of a spec.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_tag_api_spec_revision():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.TagApiSpecRevisionRequest(\n            name=\"name_value\",\n            tag=\"tag_value\",\n        )\n\n        # Make the request\n        response = await client.tag_api_spec_revision(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[U",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiSpec"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_api_spec_revisions",
          "description": "Lists all revisions of a spec.\nRevisions are returned in descending order of revision\ncreation time.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_list_api_spec_revisions():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.ListApiSpecRevisionsRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        page_result = client.list_api_spec_revisions(request=request)\n\n        # Handle the response\n        async for respons",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.services.registry.pagers.ListApiSpecRevisionsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "rollback_api_spec",
          "description": "Sets the current revision to a specified prior\nrevision. Note that this creates a new revision with a\nnew revision ID.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_rollback_api_spec():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.RollbackApiSpecRequest(\n            name=\"name_value\",\n            revision_id=\"revision_id_value\",\n        )\n\n        # Make the request\n        response = await client.rollback_api_spec(request=request)\n\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiSpec"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_api_spec_revision",
          "description": "Deletes a revision of a spec.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_delete_api_spec_revision():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.DeleteApiSpecRevisionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.delete_api_spec_revision(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the spec revision to be deleted, with a revision ID explicitly included.  Example: ``projects/sample/locations/global/apis/petstore/versions/1.0.0/specs/openapi.yaml@c7cfa2a8``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.ApiSpec: Describes a version of an API in a structured way. ApiSpecs provide formal descriptions that consumers can use to use a version. ApiSpec resources are intended to be fully-resolved descriptions of an ApiVersion. When specs consist of multiple files, these should be bundled together (e.g., in a zip archive) and stored as a unit. Multiple specs can exist to provide representations in different API description formats. Synchronization of these representations would be provided by tooling and background services."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiSpec"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_api_deployments",
          "description": "Returns matching deployments.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_list_api_deployments():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.ListApiDeploymentsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_api_deployments(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of deployments. Format: ``projects/*/locations/*/apis/*``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.services.registry.pagers.ListApiDeploymentsAsyncPager: Response message for ListApiDeployments. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.services.registry.pagers.ListApiDeploymentsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_api_deployment",
          "description": "Returns a specified deployment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_get_api_deployment():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.GetApiDeploymentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_api_deployment(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.GetApiDe",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the deployment to retrieve. Format: ``projects/*/locations/*/apis/*/deployments/*``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.ApiDeployment: Describes a service running at particular address that provides a particular version of an API. ApiDeployments have revisions which correspond to different configurations of a single deployment in time. Revision identifiers should be updated whenever the served API spec or endpoint address changes."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiDeployment"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_api_deployment",
          "description": "Creates a specified deployment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_create_api_deployment():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.CreateApiDeploymentRequest(\n            parent=\"parent_value\",\n            api_deployment_id=\"api_deployment_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_api_deployment(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of deployments. Format: ``projects/*/locations/*/apis/*``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "api_deployment": {
                "type": "google.cloud.apigee_registry_v1.types.ApiDeployment",
                "description": "Required. The deployment to create. This corresponds to the ``api_deployment`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "api_deployment_id": {
                "type": "str",
                "description": "Required. The ID to use for the deployment, which will become the final component of the deployment's resource name.  This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/.  Following AIP-162, IDs must not have the form of a UUID.  This corresponds to the ``api_deployment_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.ApiDeployment: Describes a service running at particular address that provides a particular version of an API. ApiDeployments have revisions which correspond to different configurations of a single deployment in time. Revision identifiers should be updated whenever the served API spec or endpoint address changes."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "api_deployment",
              "api_deployment_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiDeployment"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_api_deployment",
          "description": "Used to modify a specified deployment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_update_api_deployment():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.UpdateApiDeploymentRequest(\n        )\n\n        # Make the request\n        response = await client.update_api_deployment(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.UpdateApiDeploymentRequ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "api_deployment": {
                "type": "google.cloud.apigee_registry_v1.types.ApiDeployment",
                "description": "Required. The deployment to update.  The ``name`` field is used to identify the deployment to update. Format: ``projects/*/locations/*/apis/*/deployments/*``  This corresponds to the ``api_deployment`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If an asterisk \"*\" is specified, all fields are updated, including fields that are unspecified/default in the request.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.ApiDeployment: Describes a service running at particular address that provides a particular version of an API. ApiDeployments have revisions which correspond to different configurations of a single deployment in time. Revision identifiers should be updated whenever the served API spec or endpoint address changes."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "api_deployment",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiDeployment"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_api_deployment",
          "description": "Removes a specified deployment, all revisions, and\nall child resources (e.g., artifacts).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_delete_api_deployment():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.DeleteApiDeploymentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_api_deployment(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.DeleteA",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the deployment to delete. Format: ``projects/*/locations/*/apis/*/deployments/*``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "tag_api_deployment_revision",
          "description": "Adds a tag to a specified revision of a\ndeployment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_tag_api_deployment_revision():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.TagApiDeploymentRevisionRequest(\n            name=\"name_value\",\n            tag=\"tag_value\",\n        )\n\n        # Make the request\n        response = await client.tag_api_deployment_revision(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiDeployment"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_api_deployment_revisions",
          "description": "Lists all revisions of a deployment.\nRevisions are returned in descending order of revision\ncreation time.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_list_api_deployment_revisions():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.ListApiDeploymentRevisionsRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        page_result = client.list_api_deployment_revisions(request=request)\n\n        # Handle the response\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.services.registry.pagers.ListApiDeploymentRevisionsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "rollback_api_deployment",
          "description": "Sets the current revision to a specified prior\nrevision. Note that this creates a new revision with a\nnew revision ID.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_rollback_api_deployment():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.RollbackApiDeploymentRequest(\n            name=\"name_value\",\n            revision_id=\"revision_id_value\",\n        )\n\n        # Make the request\n        response = await client.rollback_api_deployment(reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiDeployment"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_api_deployment_revision",
          "description": "Deletes a revision of a deployment.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_delete_api_deployment_revision():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.DeleteApiDeploymentRevisionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.delete_api_deployment_revision(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the deployment revision to be deleted, with a revision ID explicitly included.  Example: ``projects/sample/locations/global/apis/petstore/deployments/prod@c7cfa2a8``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.ApiDeployment: Describes a service running at particular address that provides a particular version of an API. ApiDeployments have revisions which correspond to different configurations of a single deployment in time. Revision identifiers should be updated whenever the served API spec or endpoint address changes."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.ApiDeployment"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_artifacts",
          "description": "Returns matching artifacts.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_list_artifacts():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.ListArtifactsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_artifacts(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of artifacts. Format: ``{parent}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.services.registry.pagers.ListArtifactsAsyncPager: Response message for ListArtifacts.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.services.registry.pagers.ListArtifactsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_artifact",
          "description": "Returns a specified artifact.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_get_artifact():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.GetArtifactRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_artifact(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.GetArtifactRequest, dict]])",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the artifact to retrieve. Format: ``{parent}/artifacts/*``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.Artifact: Artifacts of resources. Artifacts are unique (single-value) per resource and are used to store metadata that is too large or numerous to be stored directly on the resource. Since artifacts are stored separately from parent resources, they should generally be used for metadata that is needed infrequently, i.e., not for display in primary views of the resource but perhaps displayed or downloaded upon request. The ListArtifacts method allows artifacts to be quickly enumerated and checked for presence without downloading their (potentially-large) contents."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.Artifact"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_artifact_contents",
          "description": "Returns the contents of a specified artifact. If artifacts are\nstored with GZip compression, the default behavior is to return\nthe artifact uncompressed (the mime_type response field\nindicates the exact format returned).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_get_artifact_contents():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.GetArtifactContentsRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the artifact whose contents should be retrieved. Format: ``{parent}/artifacts/*``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api.httpbody_pb2.HttpBody: Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page.  This message can be used both in streaming and non-streaming API methods in the request as well as the response.  It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body.  Example:  message GetResourceRequest { // A unique request id. string request_id = 1;  // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2;  }  service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);  rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty);  }  Example with streaming methods:  service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody);  rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody);  }  Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api.httpbody_pb2.HttpBody"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_artifact",
          "description": "Creates a specified artifact.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_create_artifact():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.CreateArtifactRequest(\n            parent=\"parent_value\",\n            artifact_id=\"artifact_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_artifact(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of artifacts. Format: ``{parent}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "artifact": {
                "type": "google.cloud.apigee_registry_v1.types.Artifact",
                "description": "Required. The artifact to create. This corresponds to the ``artifact`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "artifact_id": {
                "type": "str",
                "description": "Required. The ID to use for the artifact, which will become the final component of the artifact's resource name.  This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/.  Following AIP-162, IDs must not have the form of a UUID.  This corresponds to the ``artifact_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.Artifact: Artifacts of resources. Artifacts are unique (single-value) per resource and are used to store metadata that is too large or numerous to be stored directly on the resource. Since artifacts are stored separately from parent resources, they should generally be used for metadata that is needed infrequently, i.e., not for display in primary views of the resource but perhaps displayed or downloaded upon request. The ListArtifacts method allows artifacts to be quickly enumerated and checked for presence without downloading their (potentially-large) contents."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "artifact",
              "artifact_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.Artifact"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "replace_artifact",
          "description": "Used to replace a specified artifact.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_replace_artifact():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.ReplaceArtifactRequest(\n        )\n\n        # Make the request\n        response = await client.replace_artifact(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.ReplaceArtifactRequest, dict]]):\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "artifact": {
                "type": "google.cloud.apigee_registry_v1.types.Artifact",
                "description": "Required. The artifact to replace.  The ``name`` field is used to identify the artifact to replace. Format: ``{parent}/artifacts/*``  This corresponds to the ``artifact`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.apigee_registry_v1.types.Artifact: Artifacts of resources. Artifacts are unique (single-value) per resource and are used to store metadata that is too large or numerous to be stored directly on the resource. Since artifacts are stored separately from parent resources, they should generally be used for metadata that is needed infrequently, i.e., not for display in primary views of the resource but perhaps displayed or downloaded upon request. The ListArtifacts method allows artifacts to be quickly enumerated and checked for presence without downloading their (potentially-large) contents."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "artifact",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.apigee_registry_v1.types.Artifact"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_artifact",
          "description": "Removes a specified artifact.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import apigee_registry_v1\n\n    async def sample_delete_artifact():\n        # Create a client\n        client = apigee_registry_v1.RegistryAsyncClient()\n\n        # Initialize request argument(s)\n        request = apigee_registry_v1.DeleteArtifactRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_artifact(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.apigee_registry_v1.types.DeleteArtifactRequest, dict]]):\n        The request object. Request message for Dele",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the artifact to delete. Format: ``{parent}/artifacts/*``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      }
    ]
  }
}