{
  "TablesService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "get_table",
          "description": "Gets a table. Returns NOT_FOUND if the table does not exist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.area120 import tables_v1alpha1\n\n    async def sample_get_table():\n        # Create a client\n        client = tables_v1alpha1.TablesServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = tables_v1alpha1.GetTableRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_table(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.area120.tables_v1alpha1.types.GetTable",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the table to retrieve. Format: tables/{table}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.area120.tables_v1alpha1.types.Table: A single table."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.area120.tables_v1alpha1.types.Table"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_tables",
          "description": "Lists tables for the user.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.area120 import tables_v1alpha1\n\n    async def sample_list_tables():\n        # Create a client\n        client = tables_v1alpha1.TablesServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = tables_v1alpha1.ListTablesRequest(\n        )\n\n        # Make the request\n        page_result = client.list_tables(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.area120.tables_v1alpha1.types.ListTablesRequest, dict",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.area120.tables_v1alpha1.services.tables_service.pagers.ListTablesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_workspace",
          "description": "Gets a workspace. Returns NOT_FOUND if the workspace does not\nexist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.area120 import tables_v1alpha1\n\n    async def sample_get_workspace():\n        # Create a client\n        client = tables_v1alpha1.TablesServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = tables_v1alpha1.GetWorkspaceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_workspace(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.area120.tables_v1a",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the workspace to retrieve. Format: workspaces/{workspace}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.area120.tables_v1alpha1.types.Workspace: A single workspace."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.area120.tables_v1alpha1.types.Workspace"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_workspaces",
          "description": "Lists workspaces for the user.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.area120 import tables_v1alpha1\n\n    async def sample_list_workspaces():\n        # Create a client\n        client = tables_v1alpha1.TablesServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = tables_v1alpha1.ListWorkspacesRequest(\n        )\n\n        # Make the request\n        page_result = client.list_workspaces(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.area120.tables_v1alpha1.types.ListWor",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.area120.tables_v1alpha1.services.tables_service.pagers.ListWorkspacesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_row",
          "description": "Gets a row. Returns NOT_FOUND if the row does not exist in the\ntable.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.area120 import tables_v1alpha1\n\n    async def sample_get_row():\n        # Create a client\n        client = tables_v1alpha1.TablesServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = tables_v1alpha1.GetRowRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_row(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.area120.tables_v1alpha1.types.GetRo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the row to retrieve. Format: tables/{table}/rows/{row}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.area120.tables_v1alpha1.types.Row: A single row in a table."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.area120.tables_v1alpha1.types.Row"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_rows",
          "description": "Lists rows in a table. Returns NOT_FOUND if the table does not\nexist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.area120 import tables_v1alpha1\n\n    async def sample_list_rows():\n        # Create a client\n        client = tables_v1alpha1.TablesServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = tables_v1alpha1.ListRowsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_rows(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Opt",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent table. Format: tables/{table}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.area120.tables_v1alpha1.services.tables_service.pagers.ListRowsAsyncPager: Response message for TablesService.ListRows. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.area120.tables_v1alpha1.services.tables_service.pagers.ListRowsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_row",
          "description": "Creates a row.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.area120 import tables_v1alpha1\n\n    async def sample_create_row():\n        # Create a client\n        client = tables_v1alpha1.TablesServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = tables_v1alpha1.CreateRowRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_row(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.area120.tables_v1alpha1.types.CreateRowRequest, dict]]):\n        The request ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent table where this row will be created. Format: tables/{table}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "row": {
                "type": "google.area120.tables_v1alpha1.types.Row",
                "description": "Required. The row to create. This corresponds to the ``row`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.area120.tables_v1alpha1.types.Row: A single row in a table."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "row",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.area120.tables_v1alpha1.types.Row"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_create_rows",
          "description": "Creates multiple rows.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.area120 import tables_v1alpha1\n\n    async def sample_batch_create_rows():\n        # Create a client\n        client = tables_v1alpha1.TablesServiceAsyncClient()\n\n        # Initialize request argument(s)\n        requests = tables_v1alpha1.CreateRowRequest()\n        requests.parent = \"parent_value\"\n\n        request = tables_v1alpha1.BatchCreateRowsRequest(\n            parent=\"parent_value\",\n            requests=requests,\n        )\n\n        # Make the request\n        response = await client.batch_create_rows(request=request)\n\n        # Handle t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.area120.tables_v1alpha1.types.BatchCreateRowsResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_row",
          "description": "Updates a row.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.area120 import tables_v1alpha1\n\n    async def sample_update_row():\n        # Create a client\n        client = tables_v1alpha1.TablesServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = tables_v1alpha1.UpdateRowRequest(\n        )\n\n        # Make the request\n        response = await client.update_row(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.area120.tables_v1alpha1.types.UpdateRowRequest, dict]]):\n        The request object. Request message for\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "row": {
                "type": "google.area120.tables_v1alpha1.types.Row",
                "description": "Required. The row to update. This corresponds to the ``row`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to update. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.area120.tables_v1alpha1.types.Row: A single row in a table."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "row",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.area120.tables_v1alpha1.types.Row"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_update_rows",
          "description": "Updates multiple rows.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.area120 import tables_v1alpha1\n\n    async def sample_batch_update_rows():\n        # Create a client\n        client = tables_v1alpha1.TablesServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = tables_v1alpha1.BatchUpdateRowsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.batch_update_rows(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.area120.tables_v1alpha1.types.BatchUpdateRowsRequ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.area120.tables_v1alpha1.types.BatchUpdateRowsResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_row",
          "description": "Deletes a row.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.area120 import tables_v1alpha1\n\n    async def sample_delete_row():\n        # Create a client\n        client = tables_v1alpha1.TablesServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = tables_v1alpha1.DeleteRowRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_row(request=request)\n\nArgs:\n    request (Optional[Union[google.area120.tables_v1alpha1.types.DeleteRowRequest, dict]]):\n        The request object. Request message for\n        TablesService.DeleteRow\n    name (",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the row to delete. Format: tables/{table}/rows/{row}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_delete_rows",
          "description": "Deletes multiple rows.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.area120 import tables_v1alpha1\n\n    async def sample_batch_delete_rows():\n        # Create a client\n        client = tables_v1alpha1.TablesServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = tables_v1alpha1.BatchDeleteRowsRequest(\n            parent=\"parent_value\",\n            names=['names_value1', 'names_value2'],\n        )\n\n        # Make the request\n        await client.batch_delete_rows(request=request)\n\nArgs:\n    request (Optional[Union[google.area120.tables_v1alpha1.types.BatchDeleteRowsRequest, dict]]):\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      }
    ]
  }
}