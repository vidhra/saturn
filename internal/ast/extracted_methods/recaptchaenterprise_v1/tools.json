{
  "RecaptchaEnterpriseService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_assessment",
          "description": "Creates an Assessment of the likelihood an event is\nlegitimate.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_create_assessment():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.CreateAssessmentRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_assessment(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the project in which the assessment is created, in the format ``projects/{project}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "assessment": {
                "type": "google.cloud.recaptchaenterprise_v1.types.Assessment",
                "description": "Required. The assessment details. This corresponds to the ``assessment`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.Assessment: A reCAPTCHA Enterprise assessment resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "assessment",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.CreateAssessmentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "annotate_assessment",
          "description": "Annotates a previously created Assessment to provide\nadditional information on whether the event turned out\nto be authentic or fraudulent.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_annotate_assessment():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.AnnotateAssessmentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.annotate_assessment(request=requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the Assessment, in the format ``projects/{project}/assessments/{assessment}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "annotation": {
                "type": "google.cloud.recaptchaenterprise_v1.types.AnnotateAssessmentRequest.Annotation",
                "description": "Optional. The annotation that is assigned to the Event. This field can be left empty to provide reasons that apply to an event without concluding whether the event is legitimate or fraudulent.  This corresponds to the ``annotation`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.AnnotateAssessmentResponse: Empty response for AnnotateAssessment."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "annotation",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.AnnotateAssessmentRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_key",
          "description": "Creates a new reCAPTCHA Enterprise key.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_create_key():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        key = recaptchaenterprise_v1.Key()\n        key.web_settings.integration_type = \"INVISIBLE\"\n        key.display_name = \"display_name_value\"\n\n        request = recaptchaenterprise_v1.CreateKeyRequest(\n            parent=\"parent_value\",\n            key=key,\n        )\n\n        # Make the request\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the project in which the key is created, in the format ``projects/{project}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "key": {
                "type": "google.cloud.recaptchaenterprise_v1.types.Key",
                "description": "Required. Information to create a reCAPTCHA Enterprise key.  This corresponds to the ``key`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.Key: A key used to identify and configure applications (web and/or mobile) that use reCAPTCHA Enterprise."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "key",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.CreateKeyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_keys",
          "description": "Returns the list of all keys that belong to a\nproject.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_list_keys():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.ListKeysRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_keys(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the project that contains the keys that is listed, in the format ``projects/{project}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.services.recaptcha_enterprise_service.pagers.ListKeysAsyncPager: Response to request to list keys in a project. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.ListKeysRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "retrieve_legacy_secret_key",
          "description": "Returns the secret key related to the specified\npublic key. You must use the legacy secret key only in a\n3rd party integration with legacy reCAPTCHA.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_retrieve_legacy_secret_key():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.RetrieveLegacySecretKeyRequest(\n            key=\"key_value\",\n        )\n\n        # Make the request\n        response = await client.retrieve_le",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "key": {
                "type": "str",
                "description": "Required. The public key name linked to the requested secret key in the format ``projects/{project}/keys/{key}``.  This corresponds to the ``key`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.RetrieveLegacySecretKeyResponse: Secret key is used only in legacy reCAPTCHA. It must be used in a 3rd party integration with legacy reCAPTCHA."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "key",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.RetrieveLegacySecretKeyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_key",
          "description": "Returns the specified key.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_get_key():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.GetKeyRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_key(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.recaptchaenterprise_v1.types.GetKeyReque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the requested key, in the format ``projects/{project}/keys/{key}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.Key: A key used to identify and configure applications (web and/or mobile) that use reCAPTCHA Enterprise."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.GetKeyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_key",
          "description": "Updates the specified key.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_update_key():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        key = recaptchaenterprise_v1.Key()\n        key.web_settings.integration_type = \"INVISIBLE\"\n        key.display_name = \"display_name_value\"\n\n        request = recaptchaenterprise_v1.UpdateKeyRequest(\n            key=key,\n        )\n\n        # Make the request\n        response = await client.update_key(request=reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "key": {
                "type": "google.cloud.recaptchaenterprise_v1.types.Key",
                "description": "Required. The key to update. This corresponds to the ``key`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. The mask to control which fields of the key get updated. If the mask is not present, all fields are updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.Key: A key used to identify and configure applications (web and/or mobile) that use reCAPTCHA Enterprise."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "key",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.UpdateKeyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_key",
          "description": "Deletes the specified key.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_delete_key():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.DeleteKeyRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_key(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.recaptchaenterprise_v1.types.DeleteKeyRequest, dict]]):\n        The request object. The delete ke",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the key to be deleted, in the format ``projects/{project}/keys/{key}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.DeleteKeyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "migrate_key",
          "description": "Migrates an existing key from reCAPTCHA to reCAPTCHA\nEnterprise. Once a key is migrated, it can be used from\neither product. SiteVerify requests are billed as\nCreateAssessment calls. You must be authenticated as one\nof the current owners of the reCAPTCHA Key, and your\nuser must have the reCAPTCHA Enterprise Admin IAM role\nin the destination project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_migrate_key():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.MigrateKeyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "add_ip_override",
          "description": "Adds an IP override to a key. The following restrictions hold:\n\n-  The maximum number of IP overrides per key is 100.\n-  For any conflict (such as IP already exists or IP part of an\n   existing IP range), an error is returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_add_ip_override():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        ip_override_data = recaptchaenterprise_v1.IpOverrideData()\n        ip_override_data.ip = \"ip_value\"\n        i",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the key to which the IP override is added, in the format ``projects/{project}/keys/{key}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "ip_override_data": {
                "type": "google.cloud.recaptchaenterprise_v1.types.IpOverrideData",
                "description": "Required. IP override added to the key.  This corresponds to the ``ip_override_data`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.AddIpOverrideResponse: Response for AddIpOverride."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "ip_override_data",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.AddIpOverrideRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "remove_ip_override",
          "description": "Removes an IP override from a key. The following restrictions\nhold:\n\n-  If the IP isn't found in an existing IP override, a\n   ``NOT_FOUND`` error is returned.\n-  If the IP is found in an existing IP override, but the\n   override type does not match, a ``NOT_FOUND`` error is\n   returned.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_remove_ip_override():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        ip_override_data = recaptchaenterprise_v1.Ip",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the key from which the IP override is removed, in the format ``projects/{project}/keys/{key}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "ip_override_data": {
                "type": "google.cloud.recaptchaenterprise_v1.types.IpOverrideData",
                "description": "Required. IP override to be removed from the key.  This corresponds to the ``ip_override_data`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.RemoveIpOverrideResponse: Response for RemoveIpOverride."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "ip_override_data",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.RemoveIpOverrideRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_ip_overrides",
          "description": "Lists all IP overrides for a key.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_list_ip_overrides():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.ListIpOverridesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_ip_overrides(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArg",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent key for which the IP overrides are listed, in the format ``projects/{project}/keys/{key}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.services.recaptcha_enterprise_service.pagers.ListIpOverridesAsyncPager: Response for ListIpOverrides.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.ListIpOverridesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_metrics",
          "description": "Get some aggregated metrics for a Key. This data can\nbe used to build dashboards.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_get_metrics():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.GetMetricsRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_metrics(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (O",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the requested metrics, in the format ``projects/{project}/keys/{key}/metrics``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.Metrics: Metrics for a single Key."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.GetMetricsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_firewall_policy",
          "description": "Creates a new FirewallPolicy, specifying conditions\nat which reCAPTCHA Enterprise actions can be executed. A\nproject may have a maximum of 1000 policies.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_create_firewall_policy():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.CreateFirewallPolicyRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_f",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the project this policy applies to, in the format ``projects/{project}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "firewall_policy": {
                "type": "google.cloud.recaptchaenterprise_v1.types.FirewallPolicy",
                "description": "Required. Information to create the policy.  This corresponds to the ``firewall_policy`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.FirewallPolicy: A FirewallPolicy represents a single matching pattern and resulting actions to take."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "firewall_policy",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.CreateFirewallPolicyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_firewall_policies",
          "description": "Returns the list of all firewall policies that belong\nto a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_list_firewall_policies():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.ListFirewallPoliciesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_firewall_policies(request=request)\n\n        # Handle the response\n        async for response",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the project to list the policies for, in the format ``projects/{project}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.services.recaptcha_enterprise_service.pagers.ListFirewallPoliciesAsyncPager: Response to request to list firewall policies belonging to a project. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.ListFirewallPoliciesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_firewall_policy",
          "description": "Returns the specified firewall policy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_get_firewall_policy():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.GetFirewallPolicyRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_firewall_policy(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the requested policy, in the format ``projects/{project}/firewallpolicies/{firewallpolicy}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.FirewallPolicy: A FirewallPolicy represents a single matching pattern and resulting actions to take."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.GetFirewallPolicyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_firewall_policy",
          "description": "Updates the specified firewall policy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_update_firewall_policy():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.UpdateFirewallPolicyRequest(\n        )\n\n        # Make the request\n        response = await client.update_firewall_policy(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.recaptchaenterp",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "firewall_policy": {
                "type": "google.cloud.recaptchaenterprise_v1.types.FirewallPolicy",
                "description": "Required. The policy to update. This corresponds to the ``firewall_policy`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. The mask to control which fields of the policy get updated. If the mask is not present, all fields are updated.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.FirewallPolicy: A FirewallPolicy represents a single matching pattern and resulting actions to take."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "firewall_policy",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.UpdateFirewallPolicyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_firewall_policy",
          "description": "Deletes the specified firewall policy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_delete_firewall_policy():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.DeleteFirewallPolicyRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_firewall_policy(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.recaptchaenterprise_v1.types.DeleteFirewallPolicyR",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the policy to be deleted, in the format ``projects/{project}/firewallpolicies/{firewallpolicy}``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.DeleteFirewallPolicyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "reorder_firewall_policies",
          "description": "Reorders all firewall policies.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_reorder_firewall_policies():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.ReorderFirewallPoliciesRequest(\n            parent=\"parent_value\",\n            names=['names_value1', 'names_value2'],\n        )\n\n        # Make the request\n        response = await client.reorder_firewall_policies(request=request)\n\n        # Handle the respons",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the project to list the policies for, in the format ``projects/{project}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "names": {
                "type": "MutableSequence[str]",
                "description": "Required. A list containing all policy names, in the new order. Each name is in the format ``projects/{project}/firewallpolicies/{firewallpolicy}``.  This corresponds to the ``names`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.types.ReorderFirewallPoliciesResponse: The reorder firewall policies response message."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "names",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.ReorderFirewallPoliciesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_related_account_groups",
          "description": "List groups of related accounts.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_list_related_account_groups():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.ListRelatedAccountGroupsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_related_account_groups(request=request)\n\n        # Handle the response\n        async for response in page_result:\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the project to list related account groups from, in the format ``projects/{project}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.services.recaptcha_enterprise_service.pagers.ListRelatedAccountGroupsAsyncPager: The response to a ListRelatedAccountGroups call.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.ListRelatedAccountGroupsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_related_account_group_memberships",
          "description": "Get memberships in a group of related accounts.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_list_related_account_group_memberships():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.ListRelatedAccountGroupMembershipsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_related_account_group_memberships(request=request)\n\n        # Handle the response\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name for the related account group in the format ``projects/{project}/relatedaccountgroups/{relatedaccountgroup}``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.services.recaptcha_enterprise_service.pagers.ListRelatedAccountGroupMembershipsAsyncPager: The response to a ListRelatedAccountGroupMemberships call.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.ListRelatedAccountGroupMembershipsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "search_related_account_group_memberships",
          "description": "Search group memberships related to a given account.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import recaptchaenterprise_v1\n\n    async def sample_search_related_account_group_memberships():\n        # Create a client\n        client = recaptchaenterprise_v1.RecaptchaEnterpriseServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = recaptchaenterprise_v1.SearchRelatedAccountGroupMembershipsRequest(\n            project=\"project_value\",\n        )\n\n        # Make the request\n        page_result = client.search_related_account_group_memberships(request=request)\n\n        # Handle ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "project": {
                "type": "str",
                "description": "Required. The name of the project to search related account group memberships from. Specify the project name in the following format: ``projects/{project}``.  This corresponds to the ``project`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "hashed_account_id": {
                "type": "bytes",
                "description": "Optional. Deprecated: use ``account_id`` instead. The unique stable hashed account identifier used to search connections. The identifier should correspond to a ``hashed_account_id`` provided in a previous ``CreateAssessment`` or ``AnnotateAssessment`` call. Either hashed_account_id or account_id must be set, but not both.  This corresponds to the ``hashed_account_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.recaptchaenterprise_v1.services.recaptcha_enterprise_service.pagers.SearchRelatedAccountGroupMembershipsAsyncPager: The response to a SearchRelatedAccountGroupMemberships call.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "project",
              "hashed_account_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "recaptchaenterprise.SearchRelatedAccountGroupMembershipsRequest"
          ]
        }
      }
    ]
  }
}