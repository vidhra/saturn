{
  "CertificateManager": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_certificates",
          "description": "Lists Certificates in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_list_certificates():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.ListCertificatesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_certificates(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(res",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The project and location from which the certificate should be listed, specified in the format ``projects/*/locations/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.certificate_manager_v1.services.certificate_manager.pagers.ListCertificatesAsyncPager: Response for the ListCertificates method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.ListCertificatesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_certificate",
          "description": "Gets details of a single Certificate.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_get_certificate():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.GetCertificateRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_certificate(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.certificate_m",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. A name of the certificate to describe. Must be in the format ``projects/*/locations/*/certificates/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.certificate_manager_v1.types.Certificate: Defines TLS certificate."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.GetCertificateRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_certificate",
          "description": "Creates a new Certificate in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_create_certificate():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.CreateCertificateRequest(\n            parent=\"parent_value\",\n            certificate_id=\"certificate_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_certificate(request=request)\n\n        print(\"Waiting for operatio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource of the certificate. Must be in the format ``projects/*/locations/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "certificate": {
                "type": "google.cloud.certificate_manager_v1.types.Certificate",
                "description": "Required. A definition of the certificate to create.  This corresponds to the ``certificate`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "certificate_id": {
                "type": "str",
                "description": "Required. A user-provided name of the certificate.  This corresponds to the ``certificate_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.certificate_manager_v1.types.Certificate` Defines TLS certificate."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "certificate",
              "certificate_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.CreateCertificateRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_certificate",
          "description": "Updates a Certificate.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_update_certificate():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.UpdateCertificateRequest(\n        )\n\n        # Make the request\n        operation = client.update_certificate(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "certificate": {
                "type": "google.cloud.certificate_manager_v1.types.Certificate",
                "description": "Required. A definition of the certificate to update.  This corresponds to the ``certificate`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The update mask applies to the resource. For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.certificate_manager_v1.types.Certificate` Defines TLS certificate."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "certificate",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.UpdateCertificateRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_certificate",
          "description": "Deletes a single Certificate.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_delete_certificate():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.DeleteCertificateRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_certificate(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. A name of the certificate to delete. Must be in the format ``projects/*/locations/*/certificates/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.DeleteCertificateRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_certificate_maps",
          "description": "Lists CertificateMaps in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_list_certificate_maps():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.ListCertificateMapsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_certificate_maps(request=request)\n\n        # Handle the response\n        async for response in page_result:\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The project and location from which the certificate maps should be listed, specified in the format ``projects/*/locations/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.certificate_manager_v1.services.certificate_manager.pagers.ListCertificateMapsAsyncPager: Response for the ListCertificateMaps method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.ListCertificateMapsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_certificate_map",
          "description": "Gets details of a single CertificateMap.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_get_certificate_map():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.GetCertificateMapRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_certificate_map(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. A name of the certificate map to describe. Must be in the format ``projects/*/locations/*/certificateMaps/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.certificate_manager_v1.types.CertificateMap: Defines a collection of certificate configurations."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.GetCertificateMapRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_certificate_map",
          "description": "Creates a new CertificateMap in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_create_certificate_map():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.CreateCertificateMapRequest(\n            parent=\"parent_value\",\n            certificate_map_id=\"certificate_map_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_certificate_map(request=request)\n\n        print",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource of the certificate map. Must be in the format ``projects/*/locations/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "certificate_map": {
                "type": "google.cloud.certificate_manager_v1.types.CertificateMap",
                "description": "Required. A definition of the certificate map to create.  This corresponds to the ``certificate_map`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "certificate_map_id": {
                "type": "str",
                "description": "Required. A user-provided name of the certificate map.  This corresponds to the ``certificate_map_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.certificate_manager_v1.types.CertificateMap` Defines a collection of certificate configurations."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "certificate_map",
              "certificate_map_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.CreateCertificateMapRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_certificate_map",
          "description": "Updates a CertificateMap.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_update_certificate_map():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.UpdateCertificateMapRequest(\n        )\n\n        # Make the request\n        operation = client.update_certificate_map(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        pri",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "certificate_map": {
                "type": "google.cloud.certificate_manager_v1.types.CertificateMap",
                "description": "Required. A definition of the certificate map to update.  This corresponds to the ``certificate_map`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The update mask applies to the resource. For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.certificate_manager_v1.types.CertificateMap` Defines a collection of certificate configurations."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "certificate_map",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.UpdateCertificateMapRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_certificate_map",
          "description": "Deletes a single CertificateMap. A Certificate Map\ncan't be deleted if it contains Certificate Map Entries.\nRemove all the entries from the map before calling this\nmethod.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_delete_certificate_map():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.DeleteCertificateMapRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. A name of the certificate map to delete. Must be in the format ``projects/*/locations/*/certificateMaps/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.DeleteCertificateMapRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_certificate_map_entries",
          "description": "Lists CertificateMapEntries in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_list_certificate_map_entries():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.ListCertificateMapEntriesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_certificate_map_entries(request=request)\n\n        # Handle the response\n        async for respon",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The project, location and certificate map from which the certificate map entries should be listed, specified in the format ``projects/*/locations/*/certificateMaps/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.certificate_manager_v1.services.certificate_manager.pagers.ListCertificateMapEntriesAsyncPager: Response for the ListCertificateMapEntries method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.ListCertificateMapEntriesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_certificate_map_entry",
          "description": "Gets details of a single CertificateMapEntry.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_get_certificate_map_entry():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.GetCertificateMapEntryRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_certificate_map_entry(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. A name of the certificate map entry to describe. Must be in the format ``projects/*/locations/*/certificateMaps/*/certificateMapEntries/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.certificate_manager_v1.types.CertificateMapEntry: Defines a certificate map entry."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.GetCertificateMapEntryRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_certificate_map_entry",
          "description": "Creates a new CertificateMapEntry in a given project\nand location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_create_certificate_map_entry():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        certificate_map_entry = certificate_manager_v1.CertificateMapEntry()\n        certificate_map_entry.hostname = \"hostname_value\"\n\n        request = certificate_manager_v1.CreateCertificateMapEntryRequest(\n            parent=\"parent_value\",\n            certificate_ma",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource of the certificate map entry. Must be in the format ``projects/*/locations/*/certificateMaps/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "certificate_map_entry": {
                "type": "google.cloud.certificate_manager_v1.types.CertificateMapEntry",
                "description": "Required. A definition of the certificate map entry to create.  This corresponds to the ``certificate_map_entry`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "certificate_map_entry_id": {
                "type": "str",
                "description": "Required. A user-provided name of the certificate map entry.  This corresponds to the ``certificate_map_entry_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.certificate_manager_v1.types.CertificateMapEntry` Defines a certificate map entry."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "certificate_map_entry",
              "certificate_map_entry_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.CreateCertificateMapEntryRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_certificate_map_entry",
          "description": "Updates a CertificateMapEntry.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_update_certificate_map_entry():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        certificate_map_entry = certificate_manager_v1.CertificateMapEntry()\n        certificate_map_entry.hostname = \"hostname_value\"\n\n        request = certificate_manager_v1.UpdateCertificateMapEntryRequest(\n            certificate_map_entry=certificate_map_entry,\n        )\n\n        # Make the request\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "certificate_map_entry": {
                "type": "google.cloud.certificate_manager_v1.types.CertificateMapEntry",
                "description": "Required. A definition of the certificate map entry to create map entry.  This corresponds to the ``certificate_map_entry`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The update mask applies to the resource. For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.certificate_manager_v1.types.CertificateMapEntry` Defines a certificate map entry."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "certificate_map_entry",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.UpdateCertificateMapEntryRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_certificate_map_entry",
          "description": "Deletes a single CertificateMapEntry.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_delete_certificate_map_entry():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.DeleteCertificateMapEntryRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_certificate_map_entry(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await op",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. A name of the certificate map entry to delete. Must be in the format ``projects/*/locations/*/certificateMaps/*/certificateMapEntries/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.DeleteCertificateMapEntryRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_dns_authorizations",
          "description": "Lists DnsAuthorizations in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_list_dns_authorizations():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.ListDnsAuthorizationsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_dns_authorizations(request=request)\n\n        # Handle the response\n        async for response in page_result:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The project and location from which the dns authorizations should be listed, specified in the format ``projects/*/locations/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.certificate_manager_v1.services.certificate_manager.pagers.ListDnsAuthorizationsAsyncPager: Response for the ListDnsAuthorizations method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.ListDnsAuthorizationsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_dns_authorization",
          "description": "Gets details of a single DnsAuthorization.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_get_dns_authorization():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.GetDnsAuthorizationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_dns_authorization(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[goog",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. A name of the dns authorization to describe. Must be in the format ``projects/*/locations/*/dnsAuthorizations/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.certificate_manager_v1.types.DnsAuthorization: A DnsAuthorization resource describes a way to perform domain authorization for certificate issuance."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.GetDnsAuthorizationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_dns_authorization",
          "description": "Creates a new DnsAuthorization in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_create_dns_authorization():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        dns_authorization = certificate_manager_v1.DnsAuthorization()\n        dns_authorization.domain = \"domain_value\"\n\n        request = certificate_manager_v1.CreateDnsAuthorizationRequest(\n            parent=\"parent_value\",\n            dns_authorization_id=\"dns_authorization",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource of the dns authorization. Must be in the format ``projects/*/locations/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "dns_authorization": {
                "type": "google.cloud.certificate_manager_v1.types.DnsAuthorization",
                "description": "Required. A definition of the dns authorization to create.  This corresponds to the ``dns_authorization`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "dns_authorization_id": {
                "type": "str",
                "description": "Required. A user-provided name of the dns authorization.  This corresponds to the ``dns_authorization_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.certificate_manager_v1.types.DnsAuthorization` A DnsAuthorization resource describes a way to perform domain authorization for certificate issuance."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "dns_authorization",
              "dns_authorization_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.CreateDnsAuthorizationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_dns_authorization",
          "description": "Updates a DnsAuthorization.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_update_dns_authorization():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        dns_authorization = certificate_manager_v1.DnsAuthorization()\n        dns_authorization.domain = \"domain_value\"\n\n        request = certificate_manager_v1.UpdateDnsAuthorizationRequest(\n            dns_authorization=dns_authorization,\n        )\n\n        # Make the request\n        operation = client.update_d",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "dns_authorization": {
                "type": "google.cloud.certificate_manager_v1.types.DnsAuthorization",
                "description": "Required. A definition of the dns authorization to update.  This corresponds to the ``dns_authorization`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The update mask applies to the resource. For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.certificate_manager_v1.types.DnsAuthorization` A DnsAuthorization resource describes a way to perform domain authorization for certificate issuance."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "dns_authorization",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.UpdateDnsAuthorizationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_dns_authorization",
          "description": "Deletes a single DnsAuthorization.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_delete_dns_authorization():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.DeleteDnsAuthorizationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_dns_authorization(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).resul",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. A name of the dns authorization to delete. Must be in the format ``projects/*/locations/*/dnsAuthorizations/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_manager.DeleteDnsAuthorizationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_certificate_issuance_configs",
          "description": "Lists CertificateIssuanceConfigs in a given project\nand location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_list_certificate_issuance_configs():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.ListCertificateIssuanceConfigsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_certificate_issuance_configs(request=request)\n\n        # Handle the response\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The project and location from which the certificate should be listed, specified in the format ``projects/*/locations/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.certificate_manager_v1.services.certificate_manager.pagers.ListCertificateIssuanceConfigsAsyncPager: Response for the ListCertificateIssuanceConfigs method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_issuance_config.ListCertificateIssuanceConfigsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_certificate_issuance_config",
          "description": "Gets details of a single CertificateIssuanceConfig.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_get_certificate_issuance_config():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.GetCertificateIssuanceConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_certificate_issuance_config(request=request)\n\n        # Handle the response\n        print(response)\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. A name of the certificate issuance config to describe. Must be in the format ``projects/*/locations/*/certificateIssuanceConfigs/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.certificate_manager_v1.types.CertificateIssuanceConfig: CertificateIssuanceConfig specifies how to issue and manage a certificate."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_issuance_config.GetCertificateIssuanceConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_certificate_issuance_config",
          "description": "Creates a new CertificateIssuanceConfig in a given\nproject and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_create_certificate_issuance_config():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        certificate_issuance_config = certificate_manager_v1.CertificateIssuanceConfig()\n        certificate_issuance_config.certificate_authority_config.certificate_authority_service_config.ca_pool = \"ca_pool_value\"\n        certificate_issuance_config.rotatio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource of the certificate issuance config. Must be in the format ``projects/*/locations/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "certificate_issuance_config": {
                "type": "google.cloud.certificate_manager_v1.types.CertificateIssuanceConfig",
                "description": "Required. A definition of the certificate issuance config to create.  This corresponds to the ``certificate_issuance_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "certificate_issuance_config_id": {
                "type": "str",
                "description": "Required. A user-provided name of the certificate config.  This corresponds to the ``certificate_issuance_config_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.certificate_manager_v1.types.CertificateIssuanceConfig` CertificateIssuanceConfig specifies how to issue and manage a certificate."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "certificate_issuance_config",
              "certificate_issuance_config_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gcc_certificate_issuance_config.CreateCertificateIssuanceConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_certificate_issuance_config",
          "description": "Deletes a single CertificateIssuanceConfig.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_delete_certificate_issuance_config():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.DeleteCertificateIssuanceConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_certificate_issuance_config(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. A name of the certificate issuance config to delete. Must be in the format ``projects/*/locations/*/certificateIssuanceConfigs/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "certificate_issuance_config.DeleteCertificateIssuanceConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_trust_configs",
          "description": "Lists TrustConfigs in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_list_trust_configs():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.ListTrustConfigsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_trust_configs(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The project and location from which the TrustConfigs should be listed, specified in the format ``projects/*/locations/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.certificate_manager_v1.services.certificate_manager.pagers.ListTrustConfigsAsyncPager: Response for the ListTrustConfigs method.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "trust_config.ListTrustConfigsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_trust_config",
          "description": "Gets details of a single TrustConfig.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_get_trust_config():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.GetTrustConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_trust_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.certificate",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. A name of the TrustConfig to describe. Must be in the format ``projects/*/locations/*/trustConfigs/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.certificate_manager_v1.types.TrustConfig: Defines a trust config."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "trust_config.GetTrustConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_trust_config",
          "description": "Creates a new TrustConfig in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_create_trust_config():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.CreateTrustConfigRequest(\n            parent=\"parent_value\",\n            trust_config_id=\"trust_config_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_trust_config(request=request)\n\n        print(\"Waiting for oper",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource of the TrustConfig. Must be in the format ``projects/*/locations/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "trust_config": {
                "type": "google.cloud.certificate_manager_v1.types.TrustConfig",
                "description": "Required. A definition of the TrustConfig to create.  This corresponds to the ``trust_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "trust_config_id": {
                "type": "str",
                "description": "Required. A user-provided name of the TrustConfig. Must match the regexp ``[a-z0-9-]{1,63}``.  This corresponds to the ``trust_config_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.certificate_manager_v1.types.TrustConfig` Defines a trust config."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "trust_config",
              "trust_config_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gcc_trust_config.CreateTrustConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_trust_config",
          "description": "Updates a TrustConfig.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_update_trust_config():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.UpdateTrustConfigRequest(\n        )\n\n        # Make the request\n        operation = client.update_trust_config(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "trust_config": {
                "type": "google.cloud.certificate_manager_v1.types.TrustConfig",
                "description": "Required. A definition of the TrustConfig to update.  This corresponds to the ``trust_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The update mask applies to the resource. For the ``FieldMask`` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.certificate_manager_v1.types.TrustConfig` Defines a trust config."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "trust_config",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "gcc_trust_config.UpdateTrustConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_trust_config",
          "description": "Deletes a single TrustConfig.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import certificate_manager_v1\n\n    async def sample_delete_trust_config():\n        # Create a client\n        client = certificate_manager_v1.CertificateManagerAsyncClient()\n\n        # Initialize request argument(s)\n        request = certificate_manager_v1.DeleteTrustConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_trust_config(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. A name of the TrustConfig to delete. Must be in the format ``projects/*/locations/*/trustConfigs/*``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "trust_config.DeleteTrustConfigRequest"
          ]
        }
      }
    ]
  }
}