{
  "/Users/prashanthvarma/Saturn/internal/ast/google-cloud-python/packages/google-cloud-functions/google/cloud/functions_v1/types/functions.py": [
    {
      "type": "function",
      "name": "CreateFunctionRequest",
      "description": "Request for the ``CreateFunction`` method.\n\nAttributes:\n    location (str):\n        Required. The project and location in which the function\n        should be created, specified in the format\n        ``projects/*/locations/*``\n    function (google.cloud.functions_v1.types.CloudFunction):\n        Required. Function to be created.",
      "parameters": {
        "type": "object",
        "properties": {
          "location": {
            "description": "Required. The project and location in which the function should be created, specified in the format ``projects/*/locations/*``",
            "type": "string"
          },
          "function": {
            "description": "Required. Function to be created.",
            "reference": "google.cloud.functions_v1.types.CloudFunction",
            "resolved_schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "A user-defined name of the function. Function names must be unique globally and match pattern ``projects/*/locations/*/functions/*``",
                  "type": "string"
                },
                "description": {
                  "description": "User-provided description of a function.",
                  "type": "string"
                },
                "source_archive_url": {
                  "description": "The Google Cloud Storage URL, starting with ``gs://``, pointing to the zip archive which contains the function.  This field is a member of `oneof`_ ``source_code``.",
                  "type": "string"
                },
                "source_repository": {
                  "description": "**Beta Feature**  The source repository where a function is hosted.  This field is a member of `oneof`_ ``source_code``.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.SourceRepository",
                  "resolved_schema": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "description": "The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats:  To refer to a specific commit: ``https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*`` To refer to a moveable alias (branch): ``https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*`` In particular, to refer to HEAD use ``master`` moveable alias. To refer to a specific fixed alias (tag): ``https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*``  You may omit ``paths/*`` if you want to use the main directory. The function response may add an empty ``/paths/`` to the URL.",
                        "type": "string"
                      },
                      "deployed_url": {
                        "description": "Output only. The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.",
                        "type": "string"
                      }
                    }
                  }
                },
                "source_upload_url": {
                  "description": "The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl].  The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)  This field is a member of `oneof`_ ``source_code``.",
                  "type": "string"
                },
                "https_trigger": {
                  "description": "An HTTPS endpoint type of source that can be triggered via URL.  This field is a member of `oneof`_ ``trigger``.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.HttpsTrigger",
                  "resolved_schema": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "description": "Output only. The deployed url for the function.",
                        "type": "string"
                      },
                      "security_level": {
                        "description": "The security level for the function.",
                        "type": "object",
                        "reference": "google.cloud.functions_v1.types.HttpsTrigger.SecurityLevel"
                      }
                    }
                  }
                },
                "event_trigger": {
                  "description": "A source that fires events in response to a condition in another service.  This field is a member of `oneof`_ ``trigger``.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.EventTrigger",
                  "resolved_schema": {
                    "type": "object",
                    "properties": {
                      "event_type": {
                        "description": "Required. The type of event to observe. For example: ``providers/cloud.storage/eventTypes/object.change`` and ``providers/cloud.pubsub/eventTypes/topic.publish``.  Event types match pattern ``providers/*/eventTypes/*.*``. The pattern contains:  1. namespace: For example, ``cloud.storage`` and ``google.firebase.analytics``. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type ``object``. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.",
                        "type": "string"
                      },
                      "resource": {
                        "description": "Required. The resource(s) from which to observe events, for example, ``projects/_/buckets/myBucket``.  Not all syntactically correct values are accepted by all services. For example:  1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the ``CloudFunction``. 2. The resource type must match the pattern expected for an ``event_type``. For example, an ``EventTrigger`` that has an ``event_type`` of \"google.pubsub.topic.publish\" should have a resource that matches Google Cloud Pub/Sub topics.  Additionally, some services may support short names when creating an ``EventTrigger``. These will always be returned in the normalized \"long\" format.  See each *service's* documentation for supported formats.",
                        "type": "string"
                      },
                      "service": {
                        "description": "The hostname of the service that should be observed.  If no string is provided, the default service implementing the API will be used. For example, ``storage.googleapis.com`` is the default for all event types in the ``google.storage`` namespace.",
                        "type": "string"
                      },
                      "failure_policy": {
                        "description": "Specifies policy for failed executions.",
                        "type": "object",
                        "reference": "google.cloud.functions_v1.types.FailurePolicy",
                        "resolved_schema": {
                          "type": "object",
                          "properties": {
                            "retry": {
                              "description": "If specified, then the function will be retried in case of a failure.  This field is a member of `oneof`_ ``action``.",
                              "type": "object",
                              "reference": "google.cloud.functions_v1.types.FailurePolicy.Retry",
                              "resolved_schema": {
                                "type": "object",
                                "properties": {}
                              }
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "event_type",
                      "resource"
                    ]
                  }
                },
                "status": {
                  "description": "Output only. Status of the function deployment.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.CloudFunctionStatus"
                },
                "entry_point": {
                  "description": "The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix (ID of the function), if not specified.",
                  "type": "string"
                },
                "runtime": {
                  "description": "The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the ```gcloud`` command reference <https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime>`__.",
                  "type": "string"
                },
                "timeout": {
                  "description": "The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.",
                  "type": "object",
                  "reference": "google.protobuf.duration_pb2.Duration",
                  "resolved_schema": {
                    "type": "object",
                    "properties": {
                      "nanos": {
                        "description": "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 ``seconds`` field and a positive ``nanos`` field. Must be from 0 to 999,999,999 inclusive.  This field is a member of `oneof`_ ``_nanos``.",
                        "type": "integer"
                      },
                      "seconds": {
                        "description": "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min \\* 60 min/hr \\* 24 hr/day \\* 365.25 days/year \\* 10000 years  This field is a member of `oneof`_ ``_seconds``.",
                        "type": "integer"
                      }
                    }
                  }
                },
                "available_memory_mb": {
                  "description": "The amount of memory in MB available for a function. Defaults to 256MB.",
                  "type": "integer"
                },
                "service_account_email": {
                  "description": "The email of the function's service account. If empty, defaults to ``{project_id}@appspot.gserviceaccount.com``.",
                  "type": "string"
                },
                "update_time": {
                  "description": "Output only. The last update timestamp of a Cloud Function.",
                  "type": "object",
                  "reference": "google.protobuf.timestamp_pb2.Timestamp"
                },
                "version_id": {
                  "description": "Output only. The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.",
                  "type": "integer"
                },
                "labels": {
                  "description": "Labels associated with this Cloud Function.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "environment_variables": {
                  "description": "Environment variables that shall be available during function execution.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "build_environment_variables": {
                  "description": "Build environment variables that shall be available during build time.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "network": {
                  "description": "Deprecated: use vpc_connector",
                  "type": "string"
                },
                "max_instances": {
                  "description": "The limit on the maximum number of function instances that may coexist at a given time.  In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate.  See the `Max Instances <https://cloud.google.com/functions/docs/max-instances>`__ Guide for more details.",
                  "type": "integer"
                },
                "min_instances": {
                  "description": "A lower bound for the number function instances that may coexist at a given time.",
                  "type": "integer"
                },
                "vpc_connector": {
                  "description": "The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is ``projects/*/locations/*/connectors/*``  This field is mutually exclusive with ``network`` field and will eventually replace it.  See `the VPC documentation <https://cloud.google.com/compute/docs/vpc>`__ for more information on connecting Cloud projects.",
                  "type": "string"
                },
                "vpc_connector_egress_settings": {
                  "description": "The egress settings for the connector, controlling what traffic is diverted through it.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.CloudFunction.VpcConnectorEgressSettings"
                },
                "ingress_settings": {
                  "description": "The ingress settings for the function, controlling what traffic can reach it.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.CloudFunction.IngressSettings"
                },
                "kms_key_name": {
                  "description": "Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources.  It must match the pattern ``projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}``.  If specified, you must also provide an artifact registry repository using the ``docker_repository`` field that was created with the same KMS crypto key.  The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred).  1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil.  Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.",
                  "type": "string"
                },
                "build_worker_pool": {
                  "description": "Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is ``projects/{project}/locations/{region}/workerPools/{workerPool}`` where ``{project}`` and ``{region}`` are the project id and region respectively where the worker pool is defined and ``{workerPool}`` is the short name of the worker pool.  If the project id is not the same as the function, then the Cloud Functions Service Agent (``service-<project_number>@gcf-admin-robot.iam.gserviceaccount.com``) must be granted the role Cloud Build Custom Workers Builder (``roles/cloudbuild.customworkers.builder``) in the project.",
                  "type": "string"
                },
                "build_id": {
                  "description": "Output only. The Cloud Build ID of the latest successful deployment of the function.",
                  "type": "string"
                },
                "build_name": {
                  "description": "Output only. The Cloud Build Name of the function deployment. ``projects/<project-number>/locations/<region>/builds/<build-id>``.",
                  "type": "string"
                },
                "secret_environment_variables": {
                  "description": "Secret environment variables configuration.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "reference": "google.cloud.functions_v1.types.SecretEnvVar",
                    "resolved_schema": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Name of the environment variable.",
                          "type": "string"
                        },
                        "project_id": {
                          "description": "Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.",
                          "type": "string"
                        },
                        "secret": {
                          "description": "Name of the secret in secret manager (not the full resource name).",
                          "type": "string"
                        },
                        "version": {
                          "description": "Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "secret_volumes": {
                  "description": "Secret volumes configuration.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "reference": "google.cloud.functions_v1.types.SecretVolume",
                    "resolved_schema": {
                      "type": "object",
                      "properties": {
                        "mount_path": {
                          "description": "The path within the container to mount the secret volume. For example, setting the mount_path as ``/etc/secrets`` would mount the secret value files under the ``/etc/secrets`` directory. This directory will also be completely shadowed and unavailable to mount any other secrets.  Recommended mount paths: /etc/secrets Restricted mount paths: /cloudsql, /dev/log, /pod, /proc, /var/log",
                          "type": "string"
                        },
                        "project_id": {
                          "description": "Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.",
                          "type": "string"
                        },
                        "secret": {
                          "description": "Name of the secret in secret manager (not the full resource name).",
                          "type": "string"
                        },
                        "versions": {
                          "description": "List of secret versions to mount for this secret. If empty, the ``latest`` version of the secret will be made available in a file named after the secret under the mount point.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "reference": "google.cloud.functions_v1.types.SecretVolume.SecretVersion",
                            "resolved_schema": {
                              "type": "object",
                              "properties": {
                                "version": {
                                  "description": "Version of the secret (version number or the string 'latest'). It is preferable to use ``latest`` version with secret volumes as secret value changes are reflected immediately.",
                                  "type": "string"
                                },
                                "path": {
                                  "description": "Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as ``/secret_foo`` would mount the secret value file at ``/etc/secrets/secret_foo``.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "source_token": {
                  "description": "Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
                  "type": "string"
                },
                "docker_repository": {
                  "description": "User-managed repository created in Artifact Registry to which the function's Docker image will be pushed after it is built by Cloud Build. May optionally be encrypted with a customer-managed encryption key (CMEK). If unspecified and ``docker_registry`` is not explicitly set to ``CONTAINER_REGISTRY``, GCF will create and use a default Artifact Registry repository named 'gcf-artifacts' in the region.  It must match the pattern ``projects/{project}/locations/{location}/repositories/{repository}``.  Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.",
                  "type": "string"
                },
                "docker_registry": {
                  "description": "Docker Registry to use for this deployment.  If unspecified, it defaults to ``ARTIFACT_REGISTRY``. If ``docker_repository`` field is specified, this field should either be left unspecified or set to ``ARTIFACT_REGISTRY``.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.CloudFunction.DockerRegistry"
                },
                "automatic_update_policy": {
                  "description": "This field is a member of `oneof`_ ``runtime_update_policy``.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.CloudFunction.AutomaticUpdatePolicy",
                  "resolved_schema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                "on_deploy_update_policy": {
                  "description": "This field is a member of `oneof`_ ``runtime_update_policy``.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.CloudFunction.OnDeployUpdatePolicy",
                  "resolved_schema": {
                    "type": "object",
                    "properties": {
                      "runtime_version": {
                        "description": "Output only. Contains the runtime version which was used during latest function deployment.",
                        "type": "string"
                      }
                    }
                  }
                },
                "build_service_account": {
                  "description": "A service account the user provides for use with Cloud Build. The format of this field is ``projects/{projectId}/serviceAccounts/{serviceAccountEmail}``.",
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "location",
          "function"
        ]
      }
    },
    {
      "type": "function",
      "name": "UpdateFunctionRequest",
      "description": "Request for the ``UpdateFunction`` method.\n\nAttributes:\n    function (google.cloud.functions_v1.types.CloudFunction):\n        Required. New version of the function.\n    update_mask (google.protobuf.field_mask_pb2.FieldMask):\n        Required. The list of fields in ``CloudFunction`` that have\n        to be updated.",
      "parameters": {
        "type": "object",
        "properties": {
          "function": {
            "description": "Required. New version of the function.",
            "reference": "google.cloud.functions_v1.types.CloudFunction",
            "resolved_schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "A user-defined name of the function. Function names must be unique globally and match pattern ``projects/*/locations/*/functions/*``",
                  "type": "string"
                },
                "description": {
                  "description": "User-provided description of a function.",
                  "type": "string"
                },
                "source_archive_url": {
                  "description": "The Google Cloud Storage URL, starting with ``gs://``, pointing to the zip archive which contains the function.  This field is a member of `oneof`_ ``source_code``.",
                  "type": "string"
                },
                "source_repository": {
                  "description": "**Beta Feature**  The source repository where a function is hosted.  This field is a member of `oneof`_ ``source_code``.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.SourceRepository",
                  "resolved_schema": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "description": "The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats:  To refer to a specific commit: ``https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*`` To refer to a moveable alias (branch): ``https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*`` In particular, to refer to HEAD use ``master`` moveable alias. To refer to a specific fixed alias (tag): ``https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*``  You may omit ``paths/*`` if you want to use the main directory. The function response may add an empty ``/paths/`` to the URL.",
                        "type": "string"
                      },
                      "deployed_url": {
                        "description": "Output only. The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.",
                        "type": "string"
                      }
                    }
                  }
                },
                "source_upload_url": {
                  "description": "The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl].  The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)  This field is a member of `oneof`_ ``source_code``.",
                  "type": "string"
                },
                "https_trigger": {
                  "description": "An HTTPS endpoint type of source that can be triggered via URL.  This field is a member of `oneof`_ ``trigger``.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.HttpsTrigger",
                  "resolved_schema": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "description": "Output only. The deployed url for the function.",
                        "type": "string"
                      },
                      "security_level": {
                        "description": "The security level for the function.",
                        "type": "object",
                        "reference": "google.cloud.functions_v1.types.HttpsTrigger.SecurityLevel"
                      }
                    }
                  }
                },
                "event_trigger": {
                  "description": "A source that fires events in response to a condition in another service.  This field is a member of `oneof`_ ``trigger``.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.EventTrigger",
                  "resolved_schema": {
                    "type": "object",
                    "properties": {
                      "event_type": {
                        "description": "Required. The type of event to observe. For example: ``providers/cloud.storage/eventTypes/object.change`` and ``providers/cloud.pubsub/eventTypes/topic.publish``.  Event types match pattern ``providers/*/eventTypes/*.*``. The pattern contains:  1. namespace: For example, ``cloud.storage`` and ``google.firebase.analytics``. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type ``object``. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.",
                        "type": "string"
                      },
                      "resource": {
                        "description": "Required. The resource(s) from which to observe events, for example, ``projects/_/buckets/myBucket``.  Not all syntactically correct values are accepted by all services. For example:  1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the ``CloudFunction``. 2. The resource type must match the pattern expected for an ``event_type``. For example, an ``EventTrigger`` that has an ``event_type`` of \"google.pubsub.topic.publish\" should have a resource that matches Google Cloud Pub/Sub topics.  Additionally, some services may support short names when creating an ``EventTrigger``. These will always be returned in the normalized \"long\" format.  See each *service's* documentation for supported formats.",
                        "type": "string"
                      },
                      "service": {
                        "description": "The hostname of the service that should be observed.  If no string is provided, the default service implementing the API will be used. For example, ``storage.googleapis.com`` is the default for all event types in the ``google.storage`` namespace.",
                        "type": "string"
                      },
                      "failure_policy": {
                        "description": "Specifies policy for failed executions.",
                        "type": "object",
                        "reference": "google.cloud.functions_v1.types.FailurePolicy",
                        "resolved_schema": {
                          "type": "object",
                          "properties": {
                            "retry": {
                              "description": "If specified, then the function will be retried in case of a failure.  This field is a member of `oneof`_ ``action``.",
                              "type": "object",
                              "reference": "google.cloud.functions_v1.types.FailurePolicy.Retry",
                              "resolved_schema": {
                                "type": "object",
                                "properties": {}
                              }
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "event_type",
                      "resource"
                    ]
                  }
                },
                "status": {
                  "description": "Output only. Status of the function deployment.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.CloudFunctionStatus"
                },
                "entry_point": {
                  "description": "The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix (ID of the function), if not specified.",
                  "type": "string"
                },
                "runtime": {
                  "description": "The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the ```gcloud`` command reference <https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime>`__.",
                  "type": "string"
                },
                "timeout": {
                  "description": "The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.",
                  "type": "object",
                  "reference": "google.protobuf.duration_pb2.Duration",
                  "resolved_schema": {
                    "type": "object",
                    "properties": {
                      "nanos": {
                        "description": "Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 ``seconds`` field and a positive ``nanos`` field. Must be from 0 to 999,999,999 inclusive.  This field is a member of `oneof`_ ``_nanos``.",
                        "type": "integer"
                      },
                      "seconds": {
                        "description": "Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min \\* 60 min/hr \\* 24 hr/day \\* 365.25 days/year \\* 10000 years  This field is a member of `oneof`_ ``_seconds``.",
                        "type": "integer"
                      }
                    }
                  }
                },
                "available_memory_mb": {
                  "description": "The amount of memory in MB available for a function. Defaults to 256MB.",
                  "type": "integer"
                },
                "service_account_email": {
                  "description": "The email of the function's service account. If empty, defaults to ``{project_id}@appspot.gserviceaccount.com``.",
                  "type": "string"
                },
                "update_time": {
                  "description": "Output only. The last update timestamp of a Cloud Function.",
                  "type": "object",
                  "reference": "google.protobuf.timestamp_pb2.Timestamp"
                },
                "version_id": {
                  "description": "Output only. The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.",
                  "type": "integer"
                },
                "labels": {
                  "description": "Labels associated with this Cloud Function.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "environment_variables": {
                  "description": "Environment variables that shall be available during function execution.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "build_environment_variables": {
                  "description": "Build environment variables that shall be available during build time.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "network": {
                  "description": "Deprecated: use vpc_connector",
                  "type": "string"
                },
                "max_instances": {
                  "description": "The limit on the maximum number of function instances that may coexist at a given time.  In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate.  See the `Max Instances <https://cloud.google.com/functions/docs/max-instances>`__ Guide for more details.",
                  "type": "integer"
                },
                "min_instances": {
                  "description": "A lower bound for the number function instances that may coexist at a given time.",
                  "type": "integer"
                },
                "vpc_connector": {
                  "description": "The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is ``projects/*/locations/*/connectors/*``  This field is mutually exclusive with ``network`` field and will eventually replace it.  See `the VPC documentation <https://cloud.google.com/compute/docs/vpc>`__ for more information on connecting Cloud projects.",
                  "type": "string"
                },
                "vpc_connector_egress_settings": {
                  "description": "The egress settings for the connector, controlling what traffic is diverted through it.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.CloudFunction.VpcConnectorEgressSettings"
                },
                "ingress_settings": {
                  "description": "The ingress settings for the function, controlling what traffic can reach it.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.CloudFunction.IngressSettings"
                },
                "kms_key_name": {
                  "description": "Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources.  It must match the pattern ``projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}``.  If specified, you must also provide an artifact registry repository using the ``docker_repository`` field that was created with the same KMS crypto key.  The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred).  1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil.  Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.",
                  "type": "string"
                },
                "build_worker_pool": {
                  "description": "Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is ``projects/{project}/locations/{region}/workerPools/{workerPool}`` where ``{project}`` and ``{region}`` are the project id and region respectively where the worker pool is defined and ``{workerPool}`` is the short name of the worker pool.  If the project id is not the same as the function, then the Cloud Functions Service Agent (``service-<project_number>@gcf-admin-robot.iam.gserviceaccount.com``) must be granted the role Cloud Build Custom Workers Builder (``roles/cloudbuild.customworkers.builder``) in the project.",
                  "type": "string"
                },
                "build_id": {
                  "description": "Output only. The Cloud Build ID of the latest successful deployment of the function.",
                  "type": "string"
                },
                "build_name": {
                  "description": "Output only. The Cloud Build Name of the function deployment. ``projects/<project-number>/locations/<region>/builds/<build-id>``.",
                  "type": "string"
                },
                "secret_environment_variables": {
                  "description": "Secret environment variables configuration.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "reference": "google.cloud.functions_v1.types.SecretEnvVar",
                    "resolved_schema": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "description": "Name of the environment variable.",
                          "type": "string"
                        },
                        "project_id": {
                          "description": "Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.",
                          "type": "string"
                        },
                        "secret": {
                          "description": "Name of the secret in secret manager (not the full resource name).",
                          "type": "string"
                        },
                        "version": {
                          "description": "Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "secret_volumes": {
                  "description": "Secret volumes configuration.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "reference": "google.cloud.functions_v1.types.SecretVolume",
                    "resolved_schema": {
                      "type": "object",
                      "properties": {
                        "mount_path": {
                          "description": "The path within the container to mount the secret volume. For example, setting the mount_path as ``/etc/secrets`` would mount the secret value files under the ``/etc/secrets`` directory. This directory will also be completely shadowed and unavailable to mount any other secrets.  Recommended mount paths: /etc/secrets Restricted mount paths: /cloudsql, /dev/log, /pod, /proc, /var/log",
                          "type": "string"
                        },
                        "project_id": {
                          "description": "Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.",
                          "type": "string"
                        },
                        "secret": {
                          "description": "Name of the secret in secret manager (not the full resource name).",
                          "type": "string"
                        },
                        "versions": {
                          "description": "List of secret versions to mount for this secret. If empty, the ``latest`` version of the secret will be made available in a file named after the secret under the mount point.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "reference": "google.cloud.functions_v1.types.SecretVolume.SecretVersion",
                            "resolved_schema": {
                              "type": "object",
                              "properties": {
                                "version": {
                                  "description": "Version of the secret (version number or the string 'latest'). It is preferable to use ``latest`` version with secret volumes as secret value changes are reflected immediately.",
                                  "type": "string"
                                },
                                "path": {
                                  "description": "Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as ``/secret_foo`` would mount the secret value file at ``/etc/secrets/secret_foo``.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "source_token": {
                  "description": "Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
                  "type": "string"
                },
                "docker_repository": {
                  "description": "User-managed repository created in Artifact Registry to which the function's Docker image will be pushed after it is built by Cloud Build. May optionally be encrypted with a customer-managed encryption key (CMEK). If unspecified and ``docker_registry`` is not explicitly set to ``CONTAINER_REGISTRY``, GCF will create and use a default Artifact Registry repository named 'gcf-artifacts' in the region.  It must match the pattern ``projects/{project}/locations/{location}/repositories/{repository}``.  Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.",
                  "type": "string"
                },
                "docker_registry": {
                  "description": "Docker Registry to use for this deployment.  If unspecified, it defaults to ``ARTIFACT_REGISTRY``. If ``docker_repository`` field is specified, this field should either be left unspecified or set to ``ARTIFACT_REGISTRY``.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.CloudFunction.DockerRegistry"
                },
                "automatic_update_policy": {
                  "description": "This field is a member of `oneof`_ ``runtime_update_policy``.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.CloudFunction.AutomaticUpdatePolicy",
                  "resolved_schema": {
                    "type": "object",
                    "properties": {}
                  }
                },
                "on_deploy_update_policy": {
                  "description": "This field is a member of `oneof`_ ``runtime_update_policy``.",
                  "type": "object",
                  "reference": "google.cloud.functions_v1.types.CloudFunction.OnDeployUpdatePolicy",
                  "resolved_schema": {
                    "type": "object",
                    "properties": {
                      "runtime_version": {
                        "description": "Output only. Contains the runtime version which was used during latest function deployment.",
                        "type": "string"
                      }
                    }
                  }
                },
                "build_service_account": {
                  "description": "A service account the user provides for use with Cloud Build. The format of this field is ``projects/{projectId}/serviceAccounts/{serviceAccountEmail}``.",
                  "type": "string"
                }
              }
            }
          },
          "update_mask": {
            "description": "Required. The list of fields in ``CloudFunction`` that have to be updated.",
            "type": "object",
            "reference": "google.protobuf.field_mask_pb2.FieldMask"
          }
        },
        "required": [
          "function",
          "update_mask"
        ]
      }
    },
    {
      "type": "function",
      "name": "GetFunctionRequest",
      "description": "Request for the ``GetFunction`` method.\n\nAttributes:\n    name (str):\n        Required. The name of the function which\n        details should be obtained.\n    version_id (int):\n        Optional. The optional version of the\n        function whose details should be obtained. The\n        version of a 1st Gen function is an integer that\n        starts from 1 and gets incremented on\n        redeployments. Each deployment creates a config\n        version of the underlying function. GCF may keep\n        historical configs for old versions. This field\n        can be specified to fetch the historical\n        configs. Leave it blank or set to 0 to get the\n        latest version of the function.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Required. The name of the function which details should be obtained.",
            "type": "string"
          },
          "version_id": {
            "description": "Optional. The optional version of the function whose details should be obtained. The version of a 1st Gen function is an integer that starts from 1 and gets incremented on redeployments. Each deployment creates a config version of the underlying function. GCF may keep historical configs for old versions. This field can be specified to fetch the historical configs. Leave it blank or set to 0 to get the latest version of the function.",
            "type": "integer"
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "type": "function",
      "name": "ListFunctionsRequest",
      "description": "Request for the ``ListFunctions`` method.\n\nAttributes:\n    parent (str):\n        The project and location from which the function should be\n        listed, specified in the format ``projects/*/locations/*``\n        If you want to list functions in all locations, use \"-\" in\n        place of a location. When listing functions in all\n        locations, if one or more location(s) are unreachable, the\n        response will contain functions from all reachable locations\n        along with the names of any unreachable locations.\n    page_size (int):\n        Maximum number of functions to return per\n        call.\n    page_token (str):\n        The value returned by the last ``ListFunctionsResponse``;\n        indicates that this is a continuation of a prior\n        ``ListFunctions`` call, and that the system should return\n        the next page of data.",
      "parameters": {
        "type": "object",
        "properties": {
          "parent": {
            "description": "The project and location from which the function should be listed, specified in the format ``projects/*/locations/*`` If you want to list functions in all locations, use \"-\" in place of a location. When listing functions in all locations, if one or more location(s) are unreachable, the response will contain functions from all reachable locations along with the names of any unreachable locations.",
            "type": "string"
          },
          "page_size": {
            "description": "Maximum number of functions to return per call.",
            "type": "integer"
          },
          "page_token": {
            "description": "The value returned by the last ``ListFunctionsResponse``; indicates that this is a continuation of a prior ``ListFunctions`` call, and that the system should return the next page of data.",
            "type": "string"
          }
        }
      }
    },
    {
      "type": "function",
      "name": "DeleteFunctionRequest",
      "description": "Request for the ``DeleteFunction`` method.\n\nAttributes:\n    name (str):\n        Required. The name of the function which\n        should be deleted.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Required. The name of the function which should be deleted.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "type": "function",
      "name": "CallFunctionRequest",
      "description": "Request for the ``CallFunction`` method.\n\nAttributes:\n    name (str):\n        Required. The name of the function to be\n        called.\n    data (str):\n        Required. Input to be passed to the function.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Required. The name of the function to be called.",
            "type": "string"
          },
          "data": {
            "description": "Required. Input to be passed to the function.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "data"
        ]
      }
    },
    {
      "type": "function",
      "name": "GenerateUploadUrlRequest",
      "description": "Request of ``GenerateSourceUploadUrl`` method.\n\nAttributes:\n    parent (str):\n        The project and location in which the Google Cloud Storage\n        signed URL should be generated, specified in the format\n        ``projects/*/locations/*``.\n    kms_key_name (str):\n        Resource name of a KMS crypto key (managed by the user) used\n        to encrypt/decrypt function source code objects in\n        intermediate Cloud Storage buckets. When you generate an\n        upload url and upload your source code, it gets copied to an\n        intermediate Cloud Storage bucket. The source code is then\n        copied to a versioned directory in the sources bucket in the\n        consumer project during the function deployment.\n\n        It must match the pattern\n        ``projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}``.\n\n        The Google Cloud Functions service account\n        (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com)\n        must be granted the role 'Cloud K",
      "parameters": {
        "type": "object",
        "properties": {
          "parent": {
            "description": "The project and location in which the Google Cloud Storage signed URL should be generated, specified in the format ``projects/*/locations/*``.",
            "type": "string"
          },
          "kms_key_name": {
            "description": "Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function source code objects in intermediate Cloud Storage buckets. When you generate an upload url and upload your source code, it gets copied to an intermediate Cloud Storage bucket. The source code is then copied to a versioned directory in the sources bucket in the consumer project during the function deployment.  It must match the pattern ``projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}``.  The Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). GCF will delegate access to the Google Storage service account in the internal project.",
            "type": "string"
          }
        }
      }
    },
    {
      "type": "function",
      "name": "GenerateDownloadUrlRequest",
      "description": "Request of ``GenerateDownloadUrl`` method.\n\nAttributes:\n    name (str):\n        The name of function for which source code\n        Google Cloud Storage signed URL should be\n        generated.\n    version_id (int):\n        The optional version of function. If not set,\n        default, current version is used.",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of function for which source code Google Cloud Storage signed URL should be generated.",
            "type": "string"
          },
          "version_id": {
            "description": "The optional version of function. If not set, default, current version is used.",
            "type": "integer"
          }
        }
      }
    }
  ]
}