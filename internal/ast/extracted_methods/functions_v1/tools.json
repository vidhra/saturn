{
  "CloudFunctionsService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_functions",
          "description": "Returns a list of functions that belong to the\nrequested project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import functions_v1\n\n    async def sample_list_functions():\n        # Create a client\n        client = functions_v1.CloudFunctionsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = functions_v1.ListFunctionsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_functions(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.fu",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "functions.ListFunctionsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_function",
          "description": "Returns a function with the given name from the\nrequested project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import functions_v1\n\n    async def sample_get_function():\n        # Create a client\n        client = functions_v1.CloudFunctionsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = functions_v1.GetFunctionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_function(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.functions_v1.types.G",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the function which details should be obtained.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.functions_v1.types.CloudFunction: Describes a Cloud Function that contains user computation executed in response to an event. It encapsulate function and triggers configurations."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "functions.GetFunctionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_function",
          "description": "Creates a new function. If a function with the given name\nalready exists in the specified project, the long running\noperation will return ``ALREADY_EXISTS`` error.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import functions_v1\n\n    async def sample_create_function():\n        # Create a client\n        client = functions_v1.CloudFunctionsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        function = functions_v1.CloudFunction()\n        function.source_archive_url = \"source_archive_url_value\"\n\n        request = functions_v1.CreateFunctionRequest(\n            location=\"location_value\"",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "location": {
                "type": "str",
                "description": "Required. The project and location in which the function should be created, specified in the format ``projects/*/locations/*``  This corresponds to the ``location`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "function": {
                "type": "google.cloud.functions_v1.types.CloudFunction",
                "description": "Required. Function to be created. This corresponds to the ``function`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.functions_v1.types.CloudFunction` Describes a Cloud Function that contains user computation executed in response to an event. It encapsulate function and triggers configurations."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "location",
              "function",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "functions.CreateFunctionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_function",
          "description": "Updates existing function.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import functions_v1\n\n    async def sample_update_function():\n        # Create a client\n        client = functions_v1.CloudFunctionsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        function = functions_v1.CloudFunction()\n        function.source_archive_url = \"source_archive_url_value\"\n\n        request = functions_v1.UpdateFunctionRequest(\n            function=function,\n        )\n\n        # Make the request\n        operation = client.update_function(request=request)\n\n        print(\"Waiting for operation to comp",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "function": {
                "type": "google.cloud.functions_v1.types.CloudFunction",
                "description": "Required. New version of the function.  This corresponds to the ``function`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.functions_v1.types.CloudFunction` Describes a Cloud Function that contains user computation executed in response to an event. It encapsulate function and triggers configurations."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "function",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "functions.UpdateFunctionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_function",
          "description": "Deletes a function with the given name from the\nspecified project. If the given function is used by some\ntrigger, the trigger will be updated to remove this\nfunction.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import functions_v1\n\n    async def sample_delete_function():\n        # Create a client\n        client = functions_v1.CloudFunctionsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = functions_v1.DeleteFunctionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_function(request=request)\n\n        print(\"Wai",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the function which should be deleted.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "functions.DeleteFunctionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "call_function",
          "description": "Synchronously invokes a deployed Cloud Function. To be used for\ntesting purposes as very limited traffic is allowed. For more\ninformation on the actual limits, refer to `Rate\nLimits <https://cloud.google.com/functions/quotas#rate_limits>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import functions_v1\n\n    async def sample_call_function():\n        # Create a client\n        client = functions_v1.CloudFunctionsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = functions_v1.CallFunctionRequest(\n            name=\"name_value\",\n            data=\"data_value\",\n        )\n\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the function to be called.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "data": {
                "type": "str",
                "description": "Required. Input to be passed to the function.  This corresponds to the ``data`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.functions_v1.types.CallFunctionResponse: Response of CallFunction method."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "data",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "functions.CallFunctionRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "generate_upload_url",
          "description": "Returns a signed URL for uploading a function source code. For\nmore information about the signed URL usage see:\nhttps://cloud.google.com/storage/docs/access-control/signed-urls.\nOnce the function source code upload is complete, the used\nsigned URL should be provided in CreateFunction or\nUpdateFunction request as a reference to the function source\ncode.\n\nWhen uploading source code to the generated signed URL, please\nfollow these restrictions:\n\n-  Source file type should be a zip file.\n-  Source file size should not exceed 100MB limit.\n-  No credentials should be attached - the signed URLs provide\n   access to the target bucket using internal service identity;\n   if credentials were attached, the identity from the\n   credentials would be used, but that identity does not have\n   permissions to upload files to the URL.\n\nWhen making a HTTP PUT request, these two headers need to be\nspecified:\n\n-  ``content-type: application/zip``\n-  ``x-goog-content-length-range: 0,104857600``\n\nAnd this header SHOULD NOT be specifi",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "functions.GenerateUploadUrlRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "generate_download_url",
          "description": "Returns a signed URL for downloading deployed\nfunction source code. The URL is only valid for a\nlimited period and should be used within minutes after\ngeneration.\nFor more information about the signed URL usage see:\n\nhttps://cloud.google.com/storage/docs/access-control/signed-urls\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import functions_v1\n\n    async def sample_generate_download_url():\n        # Create a client\n        client = functions_v1.CloudFunctionsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = functions_v1.GenerateDownloadUrlRequest(\n        )\n\n        # M",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "functions.GenerateDownloadUrlRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "set_iam_policy",
          "description": "Sets the IAM access control policy on the specified\nfunction. Replaces any existing policy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import functions_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_set_iam_policy():\n        # Create a client\n        client = functions_v1.CloudFunctionsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_policy_pb2.SetIamPolicyRequest(\n            resource=\"resource_value\",\n        )\n\n        # Make the request\n        response = await client.set_iam_policy(request=request)\n\n        # Handle the ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "iam_policy_pb2.SetIamPolicyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_iam_policy",
          "description": "Gets the IAM access control policy for a function.\nReturns an empty policy if the function exists and does\nnot have a policy set.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import functions_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_get_iam_policy():\n        # Create a client\n        client = functions_v1.CloudFunctionsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_policy_pb2.GetIamPolicyRequest(\n            resource=\"resource_value\",\n        )\n\n        # Make the request\n        response = await client.get_iam_policy(r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "iam_policy_pb2.GetIamPolicyRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "test_iam_permissions",
          "description": "Tests the specified permissions against the IAM access control\npolicy for a function. If the function does not exist, this will\nreturn an empty set of permissions, not a NOT_FOUND error.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import functions_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_test_iam_permissions():\n        # Create a client\n        client = functions_v1.CloudFunctionsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_policy_pb2.TestIamPermissionsRequest(\n            resource=\"resource_value\",\n            permi",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "iam_policy_pb2.TestIamPermissionsRequest"
          ]
        }
      }
    ]
  }
}