{
  "ServiceUsage": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "enable_service",
          "description": "Enable a service so that it can be used with a\nproject.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import service_usage_v1\n\n    async def sample_enable_service():\n        # Create a client\n        client = service_usage_v1.ServiceUsageAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_usage_v1.EnableServiceRequest(\n        )\n\n        # Make the request\n        operation = client.enable_service(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArg",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "disable_service",
          "description": "Disable a service so that it can no longer be used with a\nproject. This prevents unintended usage that may cause\nunexpected billing charges or security leaks.\n\nIt is not valid to call the disable method on a service that is\nnot currently enabled. Callers will receive a\n``FAILED_PRECONDITION`` status if the target service is not\ncurrently enabled.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import service_usage_v1\n\n    async def sample_disable_service():\n        # Create a client\n        client = service_usage_v1.ServiceUsageAsyncClient()\n\n        # Initialize request argument(s)\n        request = ser",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_service",
          "description": "Returns the service configuration and enabled state\nfor a given service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import service_usage_v1\n\n    async def sample_get_service():\n        # Create a client\n        client = service_usage_v1.ServiceUsageAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_usage_v1.GetServiceRequest(\n        )\n\n        # Make the request\n        response = await client.get_service(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.service_usage_v1.types.GetServiceRequest, dic",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_services",
          "description": "List all services available to the specified project, and the\ncurrent state of those services with respect to the project. The\nlist includes all public services, all services for which the\ncalling user has the ``servicemanagement.services.bind``\npermission, and all services that have already been enabled on\nthe project. The list can be filtered to only include services\nin a specific state, for example to only include services\nenabled on the project.\n\nWARNING: If you need to query enabled services frequently or\nacross an organization, you should use `Cloud Asset Inventory\nAPI <https://cloud.google.com/asset-inventory/docs/apis>`__,\nwhich provides higher throughput and richer filtering\ncapability.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_enable_services",
          "description": "Enable multiple services on a project. The operation is atomic:\nif enabling any service fails, then the entire batch fails, and\nno state changes occur. To enable a single service, use the\n``EnableService`` method instead.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import service_usage_v1\n\n    async def sample_batch_enable_services():\n        # Create a client\n        client = service_usage_v1.ServiceUsageAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_usage_v1.BatchEnableServicesRequest(\n        )\n\n        # Make the request\n        operation = client.batch_enable_s",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_get_services",
          "description": "Returns the service configurations and enabled states\nfor a given list of services.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import service_usage_v1\n\n    async def sample_batch_get_services():\n        # Create a client\n        client = service_usage_v1.ServiceUsageAsyncClient()\n\n        # Initialize request argument(s)\n        request = service_usage_v1.BatchGetServicesRequest(\n        )\n\n        # Make the request\n        response = await client.batch_get_services(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.service_usage_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  }
}