{
  "MapsPlatformDatasets": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_dataset",
          "description": "Creates a new dataset for the specified project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import mapsplatformdatasets_v1\n\n    async def sample_create_dataset():\n        # Create a client\n        client = mapsplatformdatasets_v1.MapsPlatformDatasetsAsyncClient()\n\n        # Initialize request argument(s)\n        request = mapsplatformdatasets_v1.CreateDatasetRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_dataset(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.map",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent project that will own the dataset. Format: projects/{project}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "dataset": {
                "type": "google.maps.mapsplatformdatasets_v1.types.Dataset",
                "description": "Required. The dataset version to create.  This corresponds to the ``dataset`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.maps.mapsplatformdatasets_v1.types.Dataset: A representation of a dataset resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "dataset",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "maps_platform_datasets.CreateDatasetRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_dataset_metadata",
          "description": "Updates the metadata for the dataset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import mapsplatformdatasets_v1\n\n    async def sample_update_dataset_metadata():\n        # Create a client\n        client = mapsplatformdatasets_v1.MapsPlatformDatasetsAsyncClient()\n\n        # Initialize request argument(s)\n        request = mapsplatformdatasets_v1.UpdateDatasetMetadataRequest(\n        )\n\n        # Make the request\n        response = await client.update_dataset_metadata(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.maps.mapsplatformdatase",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "dataset": {
                "type": "google.maps.mapsplatformdatasets_v1.types.Dataset",
                "description": "Required. Resource name of the dataset to update. Format: projects/{project}/datasets/{dataset_id}  This corresponds to the ``dataset`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated.  The value \"*\" is used for full replacement (default).  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.maps.mapsplatformdatasets_v1.types.Dataset: A representation of a dataset resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "dataset",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "maps_platform_datasets.UpdateDatasetMetadataRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_dataset",
          "description": "Gets the dataset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import mapsplatformdatasets_v1\n\n    async def sample_get_dataset():\n        # Create a client\n        client = mapsplatformdatasets_v1.MapsPlatformDatasetsAsyncClient()\n\n        # Initialize request argument(s)\n        request = mapsplatformdatasets_v1.GetDatasetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_dataset(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.maps.mapsplatformdatasets_v1.types.GetDatasetRe",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Resource name. Format: projects/{project}/datasets/{dataset_id}  Can also fetch some special versions by appending \"@\" and a tag. Format: projects/{project}/datasets/{dataset_id}@{tag}  Tag \"active\": The info of the latest completed version will be included, and NOT_FOUND if the dataset does not have one.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.maps.mapsplatformdatasets_v1.types.Dataset: A representation of a dataset resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "maps_platform_datasets.GetDatasetRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "fetch_dataset_errors",
          "description": "Gets all the errors of a dataset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import mapsplatformdatasets_v1\n\n    async def sample_fetch_dataset_errors():\n        # Create a client\n        client = mapsplatformdatasets_v1.MapsPlatformDatasetsAsyncClient()\n\n        # Initialize request argument(s)\n        request = mapsplatformdatasets_v1.FetchDatasetErrorsRequest(\n            dataset=\"dataset_value\",\n        )\n\n        # Make the request\n        page_result = client.fetch_dataset_errors(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(respons",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "dataset": {
                "type": "str",
                "description": "Required. The name of the dataset to list all the errors for. Format: projects/{project}/datasets/{dataset_id}  This corresponds to the ``dataset`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.maps.mapsplatformdatasets_v1.services.maps_platform_datasets.pagers.FetchDatasetErrorsAsyncPager: Response object of FetchDatasetErrors. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "dataset",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "maps_platform_datasets.FetchDatasetErrorsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_datasets",
          "description": "Lists all the datasets for the specified project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import mapsplatformdatasets_v1\n\n    async def sample_list_datasets():\n        # Create a client\n        client = mapsplatformdatasets_v1.MapsPlatformDatasetsAsyncClient()\n\n        # Initialize request argument(s)\n        request = mapsplatformdatasets_v1.ListDatasetsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_datasets(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nAr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the project to list all the datasets for. Format: projects/{project}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.maps.mapsplatformdatasets_v1.services.maps_platform_datasets.pagers.ListDatasetsAsyncPager: Response object of ListDatasets.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "maps_platform_datasets.ListDatasetsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_dataset",
          "description": "Deletes the specified dataset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import mapsplatformdatasets_v1\n\n    async def sample_delete_dataset():\n        # Create a client\n        client = mapsplatformdatasets_v1.MapsPlatformDatasetsAsyncClient()\n\n        # Initialize request argument(s)\n        request = mapsplatformdatasets_v1.DeleteDatasetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_dataset(request=request)\n\nArgs:\n    request (Optional[Union[google.maps.mapsplatformdatasets_v1.types.DeleteDatasetRequest, dict]]):\n        The request objec",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the dataset to delete. Format: projects/{project}/datasets/{dataset_id}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "maps_platform_datasets.DeleteDatasetRequest"
          ]
        }
      }
    ]
  }
}