{
  "Grafeas": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "get_occurrence",
          "description": "Gets the specified occurrence.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_get_occurrence():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.GetOccurrenceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_occurrence(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[grafeas.grafeas_v1.types.GetOccurrenceRequest, dict]]):\n        The request object. Requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The name of the occurrence in the form of ``projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: grafeas.grafeas_v1.types.Occurrence: An instance of an analysis type that has been found on a resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.GetOccurrenceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_occurrences",
          "description": "Lists occurrences for the specified project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_list_occurrences():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.ListOccurrencesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_occurrences(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[grafeas.grafeas_v1.t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The name of the project to list occurrences for in the form of ``projects/[PROJECT_ID]``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "filter": {
                "type": "str",
                "description": "The filter expression. This corresponds to the ``filter`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: grafeas.grafeas_v1.services.grafeas.pagers.ListOccurrencesAsyncPager: Response for listing occurrences.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "filter",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.ListOccurrencesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_occurrence",
          "description": "Deletes the specified occurrence. For example, use\nthis method to delete an occurrence when the occurrence\nis no longer applicable for the given resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_delete_occurrence():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.DeleteOccurrenceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_occurrence(request=request)\n\nArgs:\n    request (Optional[Union[grafeas.grafeas_v1.ty",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The name of the occurrence in the form of ``projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.DeleteOccurrenceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_occurrence",
          "description": "Creates a new occurrence.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_create_occurrence():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.CreateOccurrenceRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_occurrence(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[grafeas.grafeas_v1.types.CreateOccurrenceRequest, dict]]):\n        The request o",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The name of the project in the form of ``projects/[PROJECT_ID]``, under which the occurrence is to be created.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "occurrence": {
                "type": "grafeas.grafeas_v1.types.Occurrence",
                "description": "The occurrence to create. This corresponds to the ``occurrence`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: grafeas.grafeas_v1.types.Occurrence: An instance of an analysis type that has been found on a resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "occurrence",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.CreateOccurrenceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_create_occurrences",
          "description": "Creates new occurrences in batch.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_batch_create_occurrences():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.BatchCreateOccurrencesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.batch_create_occurrences(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[grafeas.grafeas_v1.types.BatchCreateOccurrencesReque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The name of the project in the form of ``projects/[PROJECT_ID]``, under which the occurrences are to be created.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "occurrences": {
                "type": "MutableSequence[grafeas.grafeas_v1.types.Occurrence]",
                "description": "The occurrences to create. Max allowed length is 1000.  This corresponds to the ``occurrences`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: grafeas.grafeas_v1.types.BatchCreateOccurrencesResponse: Response for creating occurrences in batch."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "occurrences",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.BatchCreateOccurrencesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_occurrence",
          "description": "Updates the specified occurrence.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_update_occurrence():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.UpdateOccurrenceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.update_occurrence(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[grafeas.grafeas_v1.types.UpdateOccurrenceRequest, dict]]):\n        The reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The name of the occurrence in the form of ``projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "occurrence": {
                "type": "grafeas.grafeas_v1.types.Occurrence",
                "description": "The updated occurrence. This corresponds to the ``occurrence`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The fields to update. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: grafeas.grafeas_v1.types.Occurrence: An instance of an analysis type that has been found on a resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "occurrence",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.UpdateOccurrenceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_occurrence_note",
          "description": "Gets the note attached to the specified occurrence.\nConsumer projects can use this method to get a note that\nbelongs to a provider project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_get_occurrence_note():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.GetOccurrenceNoteRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_occurrence_note(request=request)\n\n        # Handle the response\n        print(response)\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The name of the occurrence in the form of ``projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: grafeas.grafeas_v1.types.Note: A type of analysis that can be done for a resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.GetOccurrenceNoteRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_note",
          "description": "Gets the specified note.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_get_note():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.GetNoteRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_note(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[grafeas.grafeas_v1.types.GetNoteRequest, dict]]):\n        The request object. Request to get a note.\n    name (:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The name of the note in the form of ``projects/[PROVIDER_ID]/notes/[NOTE_ID]``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: grafeas.grafeas_v1.types.Note: A type of analysis that can be done for a resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.GetNoteRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_notes",
          "description": "Lists notes for the specified project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_list_notes():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.ListNotesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_notes(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[grafeas.grafeas_v1.types.ListNotesRequest, d",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The name of the project to list notes for in the form of ``projects/[PROJECT_ID]``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "filter": {
                "type": "str",
                "description": "The filter expression. This corresponds to the ``filter`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: grafeas.grafeas_v1.services.grafeas.pagers.ListNotesAsyncPager: Response for listing notes.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "filter",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.ListNotesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_note",
          "description": "Deletes the specified note.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_delete_note():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.DeleteNoteRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_note(request=request)\n\nArgs:\n    request (Optional[Union[grafeas.grafeas_v1.types.DeleteNoteRequest, dict]]):\n        The request object. Request to delete a note.\n    name (:class:`str`):\n        The name of the note in th",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The name of the note in the form of ``projects/[PROVIDER_ID]/notes/[NOTE_ID]``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.DeleteNoteRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_note",
          "description": "Creates a new note.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_create_note():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.CreateNoteRequest(\n            parent=\"parent_value\",\n            note_id=\"note_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_note(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[grafeas.grafeas_v1.types.CreateNoteRequest, dict]]):\n        The re",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The name of the project in the form of ``projects/[PROJECT_ID]``, under which the note is to be created.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "note_id": {
                "type": "str",
                "description": "The ID to use for this note. This corresponds to the ``note_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "note": {
                "type": "grafeas.grafeas_v1.types.Note",
                "description": "The note to create. This corresponds to the ``note`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: grafeas.grafeas_v1.types.Note: A type of analysis that can be done for a resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "note_id",
              "note",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.CreateNoteRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_create_notes",
          "description": "Creates new notes in batch.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_batch_create_notes():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.BatchCreateNotesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.batch_create_notes(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[grafeas.grafeas_v1.types.BatchCreateNotesRequest, dict]]):\n        The reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The name of the project in the form of ``projects/[PROJECT_ID]``, under which the notes are to be created.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "notes": {
                "type": "MutableMapping[str, grafeas.grafeas_v1.types.Note]",
                "description": "The notes to create. Max allowed length is 1000.  This corresponds to the ``notes`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: grafeas.grafeas_v1.types.BatchCreateNotesResponse: Response for creating notes in batch."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "notes",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.BatchCreateNotesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_note",
          "description": "Updates the specified note.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_update_note():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.UpdateNoteRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.update_note(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[grafeas.grafeas_v1.types.UpdateNoteRequest, dict]]):\n        The request object. Request to update a",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The name of the note in the form of ``projects/[PROVIDER_ID]/notes/[NOTE_ID]``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "note": {
                "type": "grafeas.grafeas_v1.types.Note",
                "description": "The updated note. This corresponds to the ``note`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The fields to update. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: grafeas.grafeas_v1.types.Note: A type of analysis that can be done for a resource."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "note",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.UpdateNoteRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_note_occurrences",
          "description": "Lists occurrences referencing the specified note.\nProvider projects can use this method to get all\noccurrences across consumer projects referencing the\nspecified note.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from grafeas import grafeas_v1\n\n    async def sample_list_note_occurrences():\n        # Create a client\n        client = grafeas_v1.GrafeasAsyncClient()\n\n        # Initialize request argument(s)\n        request = grafeas_v1.ListNoteOccurrencesRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        page_result = client.list_note_occurrences(request=request)\n\n        # Handle the re",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "The name of the note to list occurrences for in the form of ``projects/[PROVIDER_ID]/notes/[NOTE_ID]``.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "filter": {
                "type": "str",
                "description": "The filter expression. This corresponds to the ``filter`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: grafeas.grafeas_v1.services.grafeas.pagers.ListNoteOccurrencesAsyncPager: Response for listing occurrences for a note. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "filter",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "grafeas.ListNoteOccurrencesRequest"
          ]
        }
      }
    ]
  }
}