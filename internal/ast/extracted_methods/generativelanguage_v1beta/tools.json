{
  "CacheService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_cached_contents",
          "description": "Lists CachedContents.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_list_cached_contents():\n        # Create a client\n        client = generativelanguage_v1beta.CacheServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.ListCachedContentsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_cached_contents(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.ai.gener",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.services.cache_service.pagers.ListCachedContentsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_cached_content",
          "description": "Creates CachedContent resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_create_cached_content():\n        # Create a client\n        client = generativelanguage_v1beta.CacheServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.CreateCachedContentRequest(\n        )\n\n        # Make the request\n        response = await client.create_cached_content(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.Crea",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "cached_content": {
                "type": "google.ai.generativelanguage_v1beta.types.CachedContent",
                "description": "Required. The cached content to create.  This corresponds to the ``cached_content`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.CachedContent: Content that has been preprocessed and can be used in subsequent request to GenerativeService.  Cached content can be only used with model it was created for."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "cached_content",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.CachedContent"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_cached_content",
          "description": "Reads CachedContent resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_get_cached_content():\n        # Create a client\n        client = generativelanguage_v1beta.CacheServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.GetCachedContentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_cached_content(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativelangua",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name referring to the content cache entry. Format: ``cachedContents/{id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.CachedContent: Content that has been preprocessed and can be used in subsequent request to GenerativeService.  Cached content can be only used with model it was created for."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.CachedContent"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_cached_content",
          "description": "Updates CachedContent resource (only expiration is\nupdatable).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_update_cached_content():\n        # Create a client\n        client = generativelanguage_v1beta.CacheServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.UpdateCachedContentRequest(\n        )\n\n        # Make the request\n        response = await client.update_cached_content(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.gener",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "cached_content": {
                "type": "google.ai.generativelanguage_v1beta.types.CachedContent",
                "description": "Required. The content cache entry to update  This corresponds to the ``cached_content`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to update. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.CachedContent: Content that has been preprocessed and can be used in subsequent request to GenerativeService.  Cached content can be only used with model it was created for."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "cached_content",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.CachedContent"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_cached_content",
          "description": "Deletes CachedContent resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_delete_cached_content():\n        # Create a client\n        client = generativelanguage_v1beta.CacheServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.DeleteCachedContentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_cached_content(request=request)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.DeleteCachedContentRequest, dict]]):\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name referring to the content cache entry Format: ``cachedContents/{id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      }
    ]
  },
  "DiscussService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "generate_message",
          "description": "Generates a response from the model given an input\n``MessagePrompt``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_generate_message():\n        # Create a client\n        client = generativelanguage_v1beta.DiscussServiceAsyncClient()\n\n        # Initialize request argument(s)\n        prompt = generativelanguage_v1beta.MessagePrompt()\n        prompt.messages.content = \"content_value\"\n\n        request = generativelanguage_v1beta.GenerateMessageRequest(\n            model=\"model_value\",\n            prompt=prompt,\n        )\n\n        # Make the request\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The name of the model to use.  Format: ``name=models/{model}``.  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "prompt": {
                "type": "google.ai.generativelanguage_v1beta.types.MessagePrompt",
                "description": "Required. The structured textual input given to the model as a prompt. Given a prompt, the model will return what it predicts is the next message in the discussion.  This corresponds to the ``prompt`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "temperature": {
                "type": "float",
                "description": "Optional. Controls the randomness of the output.  Values can range over ``[0.0,1.0]``, inclusive. A value closer to ``1.0`` will produce responses that are more varied, while a value closer to ``0.0`` will typically result in less surprising responses from the model.  This corresponds to the ``temperature`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "candidate_count": {
                "type": "int",
                "description": "Optional. The number of generated response messages to return.  This value must be between ``[1, 8]``, inclusive. If unset, this will default to ``1``.  This corresponds to the ``candidate_count`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "top_p": {
                "type": "float",
                "description": "Optional. The maximum cumulative probability of tokens to consider when sampling.  The model uses combined Top-k and nucleus sampling.  Nucleus sampling considers the smallest set of tokens whose probability sum is at least ``top_p``.  This corresponds to the ``top_p`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "top_k": {
                "type": "int",
                "description": "Optional. The maximum number of tokens to consider when sampling.  The model uses combined Top-k and nucleus sampling.  Top-k sampling considers the set of ``top_k`` most probable tokens.  This corresponds to the ``top_k`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.GenerateMessageResponse: The response from the model.  This includes candidate messages and conversation history in the form of chronologically-ordered messages."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "prompt",
              "temperature",
              "candidate_count",
              "top_p",
              "top_k",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.GenerateMessageResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "count_message_tokens",
          "description": "Runs a model's tokenizer on a string and returns the\ntoken count.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_count_message_tokens():\n        # Create a client\n        client = generativelanguage_v1beta.DiscussServiceAsyncClient()\n\n        # Initialize request argument(s)\n        prompt = generativelanguage_v1beta.MessagePrompt()\n        prompt.messages.content = \"content_value\"\n\n        request = generativelanguage_v1beta.CountMessageTokensRequest(\n            model=\"model_value\",\n            prompt=prompt,\n        )\n\n        # Make the request\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The model's resource name. This serves as an ID for the Model to use.  This name should match a model name returned by the ``ListModels`` method.  Format: ``models/{model}``  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "prompt": {
                "type": "google.ai.generativelanguage_v1beta.types.MessagePrompt",
                "description": "Required. The prompt, whose token count is to be returned.  This corresponds to the ``prompt`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.CountMessageTokensResponse: A response from CountMessageTokens.  It returns the model's token_count for the prompt."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "prompt",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.CountMessageTokensResponse"
          ]
        }
      }
    ]
  },
  "FileService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_file",
          "description": "Creates a ``File``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_create_file():\n        # Create a client\n        client = generativelanguage_v1beta.FileServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.CreateFileRequest(\n        )\n\n        # Make the request\n        response = await client.create_file(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.CreateFileRequest, dict]]):\n        The reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.CreateFileResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_files",
          "description": "Lists the metadata for ``File``\\ s owned by the requesting\nproject.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_list_files():\n        # Create a client\n        client = generativelanguage_v1beta.FileServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.ListFilesRequest(\n        )\n\n        # Make the request\n        page_result = client.list_files(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.services.file_service.pagers.ListFilesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_file",
          "description": "Gets the metadata for the given ``File``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_get_file():\n        # Create a client\n        client = generativelanguage_v1beta.FileServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.GetFileRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_file(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.Ge",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the ``File`` to get. Example: ``files/abc-123``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.File: A file uploaded to the API."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.File"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_file",
          "description": "Deletes the ``File``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_delete_file():\n        # Create a client\n        client = generativelanguage_v1beta.FileServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.DeleteFileRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_file(request=request)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.DeleteFileRequest, dict]]):\n        The request object. Request for ``DeleteFil",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the ``File`` to delete. Example: ``files/abc-123``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      }
    ]
  },
  "GenerativeService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "generate_content",
          "description": "Generates a model response given an input\n``GenerateContentRequest``. Refer to the `text generation\nguide <https://ai.google.dev/gemini-api/docs/text-generation>`__\nfor detailed usage information. Input capabilities differ\nbetween models, including tuned models. Refer to the `model\nguide <https://ai.google.dev/gemini-api/docs/models/gemini>`__\nand `tuning\nguide <https://ai.google.dev/gemini-api/docs/model-tuning>`__\nfor details.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_generate_content():\n        # Create a client\n        client = generativelangu",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The name of the ``Model`` to use for generating the completion.  Format: ``name=models/{model}``.  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "contents": {
                "type": "MutableSequence[google.ai.generativelanguage_v1beta.types.Content]",
                "description": "Required. The content of the current conversation with the model.  For single-turn queries, this is a single instance. For multi-turn queries like `chat <https://ai.google.dev/gemini-api/docs/text-generation#chat>`__, this is a repeated field that contains the conversation history and the latest request.  This corresponds to the ``contents`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.GenerateContentResponse: Response from the model supporting multiple candidate responses.  Safety ratings and content filtering are reported for both prompt in GenerateContentResponse.prompt_feedback and for each candidate in finish_reason and in safety_ratings. The API: - Returns either all requested candidates or none of them - Returns no candidates at all only if there was something wrong with the prompt (check prompt_feedback) - Reports feedback on each candidate in finish_reason and safety_ratings."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "contents",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.GenerateContentResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "generate_answer",
          "description": "Generates a grounded answer from the model given an input\n``GenerateAnswerRequest``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_generate_answer():\n        # Create a client\n        client = generativelanguage_v1beta.GenerativeServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.GenerateAnswerRequest(\n            model=\"model_value\",\n            answer_style=\"VERBOSE\",\n        )\n\n        # Make the request\n        response = await client.generate_answer(request=request)\n\n        # Handle the resp",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The name of the ``Model`` to use for generating the grounded response.  Format: ``model=models/{model}``.  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "contents": {
                "type": "MutableSequence[google.ai.generativelanguage_v1beta.types.Content]",
                "description": "Required. The content of the current conversation with the ``Model``. For single-turn queries, this is a single question to answer. For multi-turn queries, this is a repeated field that contains conversation history and the last ``Content`` in the list containing the question.  Note: ``GenerateAnswer`` only supports queries in English.  This corresponds to the ``contents`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "safety_settings": {
                "type": "MutableSequence[google.ai.generativelanguage_v1beta.types.SafetySetting]",
                "description": "Optional. A list of unique ``SafetySetting`` instances for blocking unsafe content.  This will be enforced on the ``GenerateAnswerRequest.contents`` and ``GenerateAnswerResponse.candidate``. There should not be more than one setting for each ``SafetyCategory`` type. The API will block any contents and responses that fail to meet the thresholds set by these settings. This list overrides the default settings for each ``SafetyCategory`` specified in the safety_settings. If there is no ``SafetySetting`` for a given ``SafetyCategory`` provided in the list, the API will use the default safety setting for that category. Harm categories HARM_CATEGORY_HATE_SPEECH, HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT, HARM_CATEGORY_HARASSMENT are supported. Refer to the `guide <https://ai.google.dev/gemini-api/docs/safety-settings>`__ for detailed information on available safety settings. Also refer to the `Safety guidance <https://ai.google.dev/gemini-api/docs/safety-guidance>`__ to learn how to incorporate safety considerations in your AI applications.  This corresponds to the ``safety_settings`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "answer_style": {
                "type": "google.ai.generativelanguage_v1beta.types.GenerateAnswerRequest.AnswerStyle",
                "description": "Required. Style in which answers should be returned.  This corresponds to the ``answer_style`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.GenerateAnswerResponse: Response from the model for a grounded answer."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "contents",
              "safety_settings",
              "answer_style",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.GenerateAnswerResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "stream_generate_content",
          "description": "Generates a `streamed\nresponse <https://ai.google.dev/gemini-api/docs/text-generation?lang=python#generate-a-text-stream>`__\nfrom the model given an input ``GenerateContentRequest``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_stream_generate_content():\n        # Create a client\n        client = generativelanguage_v1beta.GenerativeServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.GenerateContentRequest(\n            model=\"model_value\",\n        )\n\n        # Make the request\n        stream = awa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The name of the ``Model`` to use for generating the completion.  Format: ``name=models/{model}``.  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "contents": {
                "type": "MutableSequence[google.ai.generativelanguage_v1beta.types.Content]",
                "description": "Required. The content of the current conversation with the model.  For single-turn queries, this is a single instance. For multi-turn queries like `chat <https://ai.google.dev/gemini-api/docs/text-generation#chat>`__, this is a repeated field that contains the conversation history and the latest request.  This corresponds to the ``contents`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: AsyncIterable[google.ai.generativelanguage_v1beta.types.GenerateContentResponse]: Response from the model supporting multiple candidate responses.  Safety ratings and content filtering are reported for both prompt in GenerateContentResponse.prompt_feedback and for each candidate in finish_reason and in safety_ratings. The API: - Returns either all requested candidates or none of them - Returns no candidates at all only if there was something wrong with the prompt (check prompt_feedback) - Reports feedback on each candidate in finish_reason and safety_ratings."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "contents",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "embed_content",
          "description": "Generates a text embedding vector from the input ``Content``\nusing the specified `Gemini Embedding\nmodel <https://ai.google.dev/gemini-api/docs/models/gemini#text-embedding>`__.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_embed_content():\n        # Create a client\n        client = generativelanguage_v1beta.GenerativeServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.EmbedContentRequest(\n            model=\"model_value\",\n        )\n\n        # Make the request\n        response = await client.embed_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The model's resource name. This serves as an ID for the Model to use.  This name should match a model name returned by the ``ListModels`` method.  Format: ``models/{model}``  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "content": {
                "type": "google.ai.generativelanguage_v1beta.types.Content",
                "description": "Required. The content to embed. Only the ``parts.text`` fields will be counted.  This corresponds to the ``content`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.EmbedContentResponse: The response to an EmbedContentRequest."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "content",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.EmbedContentResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_embed_contents",
          "description": "Generates multiple embedding vectors from the input ``Content``\nwhich consists of a batch of strings represented as\n``EmbedContentRequest`` objects.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_batch_embed_contents():\n        # Create a client\n        client = generativelanguage_v1beta.GenerativeServiceAsyncClient()\n\n        # Initialize request argument(s)\n        requests = generativelanguage_v1beta.EmbedContentRequest()\n        requests.model = \"model_value\"\n\n        request = generativelanguage_v1beta.BatchEmbedContentsRequest(\n            model=",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The model's resource name. This serves as an ID for the Model to use.  This name should match a model name returned by the ``ListModels`` method.  Format: ``models/{model}``  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "requests": {
                "type": "MutableSequence[google.ai.generativelanguage_v1beta.types.EmbedContentRequest]",
                "description": "Required. Embed requests for the batch. The model in each of these requests must match the model specified ``BatchEmbedContentsRequest.model``.  This corresponds to the ``requests`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.BatchEmbedContentsResponse: The response to a BatchEmbedContentsRequest."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.BatchEmbedContentsResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "count_tokens",
          "description": "Runs a model's tokenizer on input ``Content`` and returns the\ntoken count. Refer to the `tokens\nguide <https://ai.google.dev/gemini-api/docs/tokens>`__ to learn\nmore about tokens.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_count_tokens():\n        # Create a client\n        client = generativelanguage_v1beta.GenerativeServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.CountTokensRequest(\n            model=\"model_value\",\n        )\n\n        # Make the request\n        response = await client.count_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The model's resource name. This serves as an ID for the Model to use.  This name should match a model name returned by the ``ListModels`` method.  Format: ``models/{model}``  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "contents": {
                "type": "MutableSequence[google.ai.generativelanguage_v1beta.types.Content]",
                "description": "Optional. The input given to the model as a prompt. This field is ignored when ``generate_content_request`` is set.  This corresponds to the ``contents`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.CountTokensResponse: A response from CountTokens.  It returns the model's token_count for the prompt."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "contents",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.CountTokensResponse"
          ]
        }
      }
    ]
  },
  "ModelService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "get_model",
          "description": "Gets information about a specific ``Model`` such as its version\nnumber, token limits,\n`parameters <https://ai.google.dev/gemini-api/docs/models/generative-models#model-parameters>`__\nand other metadata. Refer to the `Gemini models\nguide <https://ai.google.dev/gemini-api/docs/models/gemini>`__\nfor detailed model information.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_get_model():\n        # Create a client\n        client = generativelanguage_v1beta.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguag",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the model.  This name should match a model name returned by the ``ListModels`` method.  Format: ``models/{model}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Model: Information about a Generative Language Model."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Model"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_models",
          "description": "Lists the\n```Model``\\ s <https://ai.google.dev/gemini-api/docs/models/gemini>`__\navailable through the Gemini API.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_list_models():\n        # Create a client\n        client = generativelanguage_v1beta.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.ListModelsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_models(request=request)\n\n        # Handle the response\n        async for response in page_result:\n           ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "page_size": {
                "type": "int",
                "description": "The maximum number of ``Models`` to return (per page).  If unspecified, 50 models will be returned per page. This method returns at most 1000 models per page, even if you pass a larger page_size.  This corresponds to the ``page_size`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "page_token": {
                "type": "str",
                "description": "A page token, received from a previous ``ListModels`` call.  Provide the ``page_token`` returned by one request as an argument to the next request to retrieve the next page.  When paginating, all other parameters provided to ``ListModels`` must match the call that provided the page token.  This corresponds to the ``page_token`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.services.model_service.pagers.ListModelsAsyncPager: Response from ListModel containing a paginated list of Models.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "page_size",
              "page_token",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.services.model_service.pagers.ListModelsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_tuned_model",
          "description": "Gets information about a specific TunedModel.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_get_tuned_model():\n        # Create a client\n        client = generativelanguage_v1beta.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.GetTunedModelRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_tuned_model(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the model.  Format: ``tunedModels/my-model-id``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.TunedModel: A fine-tuned model created using ModelService.CreateTunedModel."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.TunedModel"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_tuned_models",
          "description": "Lists created tuned models.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_list_tuned_models():\n        # Create a client\n        client = generativelanguage_v1beta.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.ListTunedModelsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_tuned_models(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generati",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "page_size": {
                "type": "int",
                "description": "Optional. The maximum number of ``TunedModels`` to return (per page). The service may return fewer tuned models.  If unspecified, at most 10 tuned models will be returned. This method returns at most 1000 models per page, even if you pass a larger page_size.  This corresponds to the ``page_size`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "page_token": {
                "type": "str",
                "description": "Optional. A page token, received from a previous ``ListTunedModels`` call.  Provide the ``page_token`` returned by one request as an argument to the next request to retrieve the next page.  When paginating, all other parameters provided to ``ListTunedModels`` must match the call that provided the page token.  This corresponds to the ``page_token`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.services.model_service.pagers.ListTunedModelsAsyncPager: Response from ListTunedModels containing a paginated list of Models.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "page_size",
              "page_token",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.services.model_service.pagers.ListTunedModelsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_tuned_model",
          "description": "Creates a tuned model. Check intermediate tuning progress (if\nany) through the [google.longrunning.Operations] service.\n\nAccess status and results through the Operations service.\nExample: GET /v1/tunedModels/az2mb0bpw6i/operations/000-111-222\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_create_tuned_model():\n        # Create a client\n        client = generativelanguage_v1beta.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.CreateTunedModelRequest(\n        )\n\n        # Make the request\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "tuned_model": {
                "type": "google.ai.generativelanguage_v1beta.types.TunedModel",
                "description": "Required. The tuned model to create. This corresponds to the ``tuned_model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "tuned_model_id": {
                "type": "str",
                "description": "Optional. The unique id for the tuned model if specified. This value should be up to 40 characters, the first character must be a letter, the last could be a letter or a number. The id must match the regular expression: ``[a-z]([a-z0-9-]{0,38}[a-z0-9])?``.  This corresponds to the ``tuned_model_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.ai.generativelanguage_v1beta.types.TunedModel` A fine-tuned model created using ModelService.CreateTunedModel."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "tuned_model",
              "tuned_model_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_tuned_model",
          "description": "Updates a tuned model.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_update_tuned_model():\n        # Create a client\n        client = generativelanguage_v1beta.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.UpdateTunedModelRequest(\n        )\n\n        # Make the request\n        response = await client.update_tuned_model(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.UpdateTunedModelReques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "tuned_model": {
                "type": "google.ai.generativelanguage_v1beta.types.TunedModel",
                "description": "Required. The tuned model to update. This corresponds to the ``tuned_model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. The list of fields to update.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.TunedModel: A fine-tuned model created using ModelService.CreateTunedModel."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "tuned_model",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.TunedModel"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_tuned_model",
          "description": "Deletes a tuned model.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_delete_tuned_model():\n        # Create a client\n        client = generativelanguage_v1beta.ModelServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.DeleteTunedModelRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_tuned_model(request=request)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.DeleteTunedModelRequest, dict]]):\n        The request obj",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the model. Format: ``tunedModels/my-model-id``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      }
    ]
  },
  "PermissionService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_permission",
          "description": "Create a permission to a specific resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_create_permission():\n        # Create a client\n        client = generativelanguage_v1beta.PermissionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.CreatePermissionRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_permission(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[googl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource of the ``Permission``. Formats: ``tunedModels/{tuned_model}`` ``corpora/{corpus}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "permission": {
                "type": "google.ai.generativelanguage_v1beta.types.Permission",
                "description": "Required. The permission to create. This corresponds to the ``permission`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Permission: Permission resource grants user, group or the rest of the world access to the PaLM API resource (e.g. a tuned model, corpus).  A role is a collection of permitted operations that allows users to perform specific actions on PaLM API resources. To make them available to users, groups, or service accounts, you assign roles. When you assign a role, you grant permissions that the role contains.  There are three concentric roles. Each role is a superset of the previous role's permitted operations:  - reader can use the resource (e.g. tuned model, corpus) for inference - writer has reader's permissions and additionally can edit and share - owner has writer's permissions and additionally can delete"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "permission",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Permission"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_permission",
          "description": "Gets information about a specific Permission.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_get_permission():\n        # Create a client\n        client = generativelanguage_v1beta.PermissionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.GetPermissionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_permission(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.genera",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the permission.  Formats: ``tunedModels/{tuned_model}/permissions/{permission}`` ``corpora/{corpus}/permissions/{permission}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Permission: Permission resource grants user, group or the rest of the world access to the PaLM API resource (e.g. a tuned model, corpus).  A role is a collection of permitted operations that allows users to perform specific actions on PaLM API resources. To make them available to users, groups, or service accounts, you assign roles. When you assign a role, you grant permissions that the role contains.  There are three concentric roles. Each role is a superset of the previous role's permitted operations:  - reader can use the resource (e.g. tuned model, corpus) for inference - writer has reader's permissions and additionally can edit and share - owner has writer's permissions and additionally can delete"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Permission"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_permissions",
          "description": "Lists permissions for the specific resource.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_list_permissions():\n        # Create a client\n        client = generativelanguage_v1beta.PermissionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.ListPermissionsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_permissions(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource of the permissions. Formats: ``tunedModels/{tuned_model}`` ``corpora/{corpus}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.services.permission_service.pagers.ListPermissionsAsyncPager: Response from ListPermissions containing a paginated list of permissions.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.services.permission_service.pagers.ListPermissionsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_permission",
          "description": "Updates the permission.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_update_permission():\n        # Create a client\n        client = generativelanguage_v1beta.PermissionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.UpdatePermissionRequest(\n        )\n\n        # Make the request\n        response = await client.update_permission(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.UpdatePermissionRe",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "permission": {
                "type": "google.ai.generativelanguage_v1beta.types.Permission",
                "description": "Required. The permission to update.  The permission's ``name`` field is used to identify the permission to update.  This corresponds to the ``permission`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The list of fields to update. Accepted ones:  -  role (``Permission.role`` field)  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Permission: Permission resource grants user, group or the rest of the world access to the PaLM API resource (e.g. a tuned model, corpus).  A role is a collection of permitted operations that allows users to perform specific actions on PaLM API resources. To make them available to users, groups, or service accounts, you assign roles. When you assign a role, you grant permissions that the role contains.  There are three concentric roles. Each role is a superset of the previous role's permitted operations:  - reader can use the resource (e.g. tuned model, corpus) for inference - writer has reader's permissions and additionally can edit and share - owner has writer's permissions and additionally can delete"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "permission",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Permission"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_permission",
          "description": "Deletes the permission.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_delete_permission():\n        # Create a client\n        client = generativelanguage_v1beta.PermissionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.DeletePermissionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_permission(request=request)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.DeletePermissionRequest, dict]]):\n        The request",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the permission. Formats: ``tunedModels/{tuned_model}/permissions/{permission}`` ``corpora/{corpus}/permissions/{permission}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "transfer_ownership",
          "description": "Transfers ownership of the tuned model.\nThis is the only way to change ownership of the tuned\nmodel. The current owner will be downgraded to writer\nrole.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_transfer_ownership():\n        # Create a client\n        client = generativelanguage_v1beta.PermissionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.TransferOwnershipRequest(\n            name=\"name_value\",\n            email_address=\"email_address_value\",\n        )\n\n        # Make the request\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.TransferOwnershipResponse"
          ]
        }
      }
    ]
  },
  "PredictionService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "predict",
          "description": "Performs a prediction request.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_predict():\n        # Create a client\n        client = generativelanguage_v1beta.PredictionServiceAsyncClient()\n\n        # Initialize request argument(s)\n        instances = generativelanguage_v1beta.Value()\n        instances.null_value = \"NULL_VALUE\"\n\n        request = generativelanguage_v1beta.PredictRequest(\n            model=\"model_value\",\n            instances=instances,\n        )\n\n        # Make the request\n        response = await client.predict(request=request)\n\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The name of the model for prediction. Format: ``name=models/{model}``.  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "instances": {
                "type": "MutableSequence[google.protobuf.struct_pb2.Value]",
                "description": "Required. The instances that are the input to the prediction call.  This corresponds to the ``instances`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.PredictResponse: Response message for [PredictionService.Predict]."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "instances",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.PredictResponse"
          ]
        }
      }
    ]
  },
  "RetrieverService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_corpus",
          "description": "Creates an empty ``Corpus``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_create_corpus():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.CreateCorpusRequest(\n        )\n\n        # Make the request\n        response = await client.create_corpus(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.CreateCorpusRequest, dict]",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "corpus": {
                "type": "google.ai.generativelanguage_v1beta.types.Corpus",
                "description": "Required. The ``Corpus`` to create. This corresponds to the ``corpus`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Corpus: A Corpus is a collection of Documents. A project can create up to 5 corpora."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "corpus",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Corpus"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_corpus",
          "description": "Gets information about a specific ``Corpus``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_get_corpus():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.GetCorpusRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_corpus(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the ``Corpus``. Example: ``corpora/my-corpus-123``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Corpus: A Corpus is a collection of Documents. A project can create up to 5 corpora."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Corpus"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_corpus",
          "description": "Updates a ``Corpus``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_update_corpus():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.UpdateCorpusRequest(\n        )\n\n        # Make the request\n        response = await client.update_corpus(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.UpdateCorpusRequest, dict]]):\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "corpus": {
                "type": "google.ai.generativelanguage_v1beta.types.Corpus",
                "description": "Required. The ``Corpus`` to update. This corresponds to the ``corpus`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The list of fields to update. Currently, this only supports updating ``display_name``.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Corpus: A Corpus is a collection of Documents. A project can create up to 5 corpora."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "corpus",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Corpus"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_corpus",
          "description": "Deletes a ``Corpus``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_delete_corpus():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.DeleteCorpusRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_corpus(request=request)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.DeleteCorpusRequest, dict]]):\n        The request object. Request to",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the ``Corpus``. Example: ``corpora/my-corpus-123``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_corpora",
          "description": "Lists all ``Corpora`` owned by the user.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_list_corpora():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.ListCorporaRequest(\n        )\n\n        # Make the request\n        page_result = client.list_corpora(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.ai.gener",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.services.retriever_service.pagers.ListCorporaAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "query_corpus",
          "description": "Performs semantic search over a ``Corpus``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_query_corpus():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.QueryCorpusRequest(\n            name=\"name_value\",\n            query=\"query_value\",\n        )\n\n        # Make the request\n        response = await client.query_corpus(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optiona",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.QueryCorpusResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_document",
          "description": "Creates an empty ``Document``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_create_document():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.CreateDocumentRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_document(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativelangu",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the ``Corpus`` where this ``Document`` will be created. Example: ``corpora/my-corpus-123``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "document": {
                "type": "google.ai.generativelanguage_v1beta.types.Document",
                "description": "Required. The ``Document`` to create. This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Document: A Document is a collection of Chunks. A Corpus can have a maximum of 10,000 Documents."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "document",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Document"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_document",
          "description": "Gets information about a specific ``Document``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_get_document():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.GetDocumentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_document(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativel",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the ``Document`` to retrieve. Example: ``corpora/my-corpus-123/documents/the-doc-abc``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Document: A Document is a collection of Chunks. A Corpus can have a maximum of 10,000 Documents."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Document"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_document",
          "description": "Updates a ``Document``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_update_document():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.UpdateDocumentRequest(\n        )\n\n        # Make the request\n        response = await client.update_document(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.UpdateDocumentRequest, di",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "document": {
                "type": "google.ai.generativelanguage_v1beta.types.Document",
                "description": "Required. The ``Document`` to update. This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The list of fields to update. Currently, this only supports updating ``display_name`` and ``custom_metadata``.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Document: A Document is a collection of Chunks. A Corpus can have a maximum of 10,000 Documents."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "document",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Document"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_document",
          "description": "Deletes a ``Document``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_delete_document():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.DeleteDocumentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_document(request=request)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.DeleteDocumentRequest, dict]]):\n        The request object. ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the ``Document`` to delete. Example: ``corpora/my-corpus-123/documents/the-doc-abc``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_documents",
          "description": "Lists all ``Document``\\ s in a ``Corpus``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_list_documents():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.ListDocumentsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_documents(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the ``Corpus`` containing ``Document``\\ s. Example: ``corpora/my-corpus-123``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.services.retriever_service.pagers.ListDocumentsAsyncPager: Response from ListDocuments containing a paginated list of Documents. The Documents are sorted by ascending document.create_time.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.services.retriever_service.pagers.ListDocumentsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "query_document",
          "description": "Performs semantic search over a ``Document``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_query_document():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.QueryDocumentRequest(\n            name=\"name_value\",\n            query=\"query_value\",\n        )\n\n        # Make the request\n        response = await client.query_document(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.QueryDocumentResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_chunk",
          "description": "Creates a ``Chunk``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_create_chunk():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        chunk = generativelanguage_v1beta.Chunk()\n        chunk.data.string_value = \"string_value_value\"\n\n        request = generativelanguage_v1beta.CreateChunkRequest(\n            parent=\"parent_value\",\n            chunk=chunk,\n        )\n\n        # Make the request\n        response = await client.create_chunk(request=request)\n\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the ``Document`` where this ``Chunk`` will be created. Example: ``corpora/my-corpus-123/documents/the-doc-abc``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "chunk": {
                "type": "google.ai.generativelanguage_v1beta.types.Chunk",
                "description": "Required. The ``Chunk`` to create. This corresponds to the ``chunk`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Chunk: A Chunk is a subpart of a Document that is treated as an independent unit for the purposes of vector representation and storage. A Corpus can have a maximum of 1 million Chunks."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "chunk",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Chunk"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_create_chunks",
          "description": "Batch create ``Chunk``\\ s.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_batch_create_chunks():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        requests = generativelanguage_v1beta.CreateChunkRequest()\n        requests.parent = \"parent_value\"\n        requests.chunk.data.string_value = \"string_value_value\"\n\n        request = generativelanguage_v1beta.BatchCreateChunksRequest(\n            requests=requests,\n        )\n\n        # Make the request\n        r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.BatchCreateChunksResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_chunk",
          "description": "Gets information about a specific ``Chunk``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_get_chunk():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.GetChunkRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_chunk(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1be",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the ``Chunk`` to retrieve. Example: ``corpora/my-corpus-123/documents/the-doc-abc/chunks/some-chunk``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Chunk: A Chunk is a subpart of a Document that is treated as an independent unit for the purposes of vector representation and storage. A Corpus can have a maximum of 1 million Chunks."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Chunk"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_chunk",
          "description": "Updates a ``Chunk``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_update_chunk():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        chunk = generativelanguage_v1beta.Chunk()\n        chunk.data.string_value = \"string_value_value\"\n\n        request = generativelanguage_v1beta.UpdateChunkRequest(\n            chunk=chunk,\n        )\n\n        # Make the request\n        response = await client.update_chunk(request=request)\n\n        # Handle the response\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "chunk": {
                "type": "google.ai.generativelanguage_v1beta.types.Chunk",
                "description": "Required. The ``Chunk`` to update. This corresponds to the ``chunk`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. The list of fields to update. Currently, this only supports updating ``custom_metadata`` and ``data``.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.Chunk: A Chunk is a subpart of a Document that is treated as an independent unit for the purposes of vector representation and storage. A Corpus can have a maximum of 1 million Chunks."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "chunk",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.Chunk"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_update_chunks",
          "description": "Batch update ``Chunk``\\ s.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_batch_update_chunks():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        requests = generativelanguage_v1beta.UpdateChunkRequest()\n        requests.chunk.data.string_value = \"string_value_value\"\n\n        request = generativelanguage_v1beta.BatchUpdateChunksRequest(\n            requests=requests,\n        )\n\n        # Make the request\n        response = await client.batch_update_chunk",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.BatchUpdateChunksResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_chunk",
          "description": "Deletes a ``Chunk``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_delete_chunk():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.DeleteChunkRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_chunk(request=request)\n\nArgs:\n    request (Optional[Union[google.ai.generativelanguage_v1beta.types.DeleteChunkRequest, dict]]):\n        The request object. Request to dele",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the ``Chunk`` to delete. Example: ``corpora/my-corpus-123/documents/the-doc-abc/chunks/some-chunk``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_delete_chunks",
          "description": "Batch delete ``Chunk``\\ s.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_batch_delete_chunks():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        requests = generativelanguage_v1beta.DeleteChunkRequest()\n        requests.name = \"name_value\"\n\n        request = generativelanguage_v1beta.BatchDeleteChunksRequest(\n            requests=requests,\n        )\n\n        # Make the request\n        await client.batch_delete_chunks(request=request)\n\nArgs:\n    request ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_chunks",
          "description": "Lists all ``Chunk``\\ s in a ``Document``.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_list_chunks():\n        # Create a client\n        client = generativelanguage_v1beta.RetrieverServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.ListChunksRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_chunks(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the ``Document`` containing ``Chunk``\\ s. Example: ``corpora/my-corpus-123/documents/the-doc-abc``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.services.retriever_service.pagers.ListChunksAsyncPager: Response from ListChunks containing a paginated list of Chunks. The Chunks are sorted by ascending chunk.create_time.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.services.retriever_service.pagers.ListChunksAsyncPager"
          ]
        }
      }
    ]
  },
  "TextService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "generate_text",
          "description": "Generates a response from the model given an input\nmessage.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_generate_text():\n        # Create a client\n        client = generativelanguage_v1beta.TextServiceAsyncClient()\n\n        # Initialize request argument(s)\n        prompt = generativelanguage_v1beta.TextPrompt()\n        prompt.text = \"text_value\"\n\n        request = generativelanguage_v1beta.GenerateTextRequest(\n            model=\"model_value\",\n            prompt=prompt,\n        )\n\n        # Make the request\n        response = await client.generate_te",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The name of the ``Model`` or ``TunedModel`` to use for generating the completion. Examples: models/text-bison-001 tunedModels/sentence-translator-u3b7m  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "prompt": {
                "type": "google.ai.generativelanguage_v1beta.types.TextPrompt",
                "description": "Required. The free-form input text given to the model as a prompt. Given a prompt, the model will generate a TextCompletion response it predicts as the completion of the input text.  This corresponds to the ``prompt`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "temperature": {
                "type": "float",
                "description": "Optional. Controls the randomness of the output. Note: The default value varies by model, see the ``Model.temperature`` attribute of the ``Model`` returned the ``getModel`` function.  Values can range from [0.0,1.0], inclusive. A value closer to 1.0 will produce responses that are more varied and creative, while a value closer to 0.0 will typically result in more straightforward responses from the model.  This corresponds to the ``temperature`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "candidate_count": {
                "type": "int",
                "description": "Optional. Number of generated responses to return.  This value must be between [1, 8], inclusive. If unset, this will default to 1.  This corresponds to the ``candidate_count`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "max_output_tokens": {
                "type": "int",
                "description": "Optional. The maximum number of tokens to include in a candidate.  If unset, this will default to output_token_limit specified in the ``Model`` specification.  This corresponds to the ``max_output_tokens`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "top_p": {
                "type": "float",
                "description": "Optional. The maximum cumulative probability of tokens to consider when sampling.  The model uses combined Top-k and nucleus sampling.  Tokens are sorted based on their assigned probabilities so that only the most likely tokens are considered. Top-k sampling directly limits the maximum number of tokens to consider, while Nucleus sampling limits number of tokens based on the cumulative probability.  Note: The default value varies by model, see the ``Model.top_p`` attribute of the ``Model`` returned the ``getModel`` function.  This corresponds to the ``top_p`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "top_k": {
                "type": "int",
                "description": "Optional. The maximum number of tokens to consider when sampling.  The model uses combined Top-k and nucleus sampling.  Top-k sampling considers the set of ``top_k`` most probable tokens. Defaults to 40.  Note: The default value varies by model, see the ``Model.top_k`` attribute of the ``Model`` returned the ``getModel`` function.  This corresponds to the ``top_k`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.GenerateTextResponse: The response from the model, including candidate completions."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "prompt",
              "temperature",
              "candidate_count",
              "max_output_tokens",
              "top_p",
              "top_k",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.GenerateTextResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "embed_text",
          "description": "Generates an embedding from the model given an input\nmessage.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_embed_text():\n        # Create a client\n        client = generativelanguage_v1beta.TextServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.EmbedTextRequest(\n            model=\"model_value\",\n        )\n\n        # Make the request\n        response = await client.embed_text(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.ai.genera",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The model name to use with the format model=models/{model}.  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "text": {
                "type": "str",
                "description": "Optional. The free-form input text that the model will turn into an embedding.  This corresponds to the ``text`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.EmbedTextResponse: The response to a EmbedTextRequest."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "text",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.EmbedTextResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_embed_text",
          "description": "Generates multiple embeddings from the model given\ninput text in a synchronous call.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_batch_embed_text():\n        # Create a client\n        client = generativelanguage_v1beta.TextServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = generativelanguage_v1beta.BatchEmbedTextRequest(\n            model=\"model_value\",\n        )\n\n        # Make the request\n        response = await client.batch_embed_text(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The name of the ``Model`` to use for generating the embedding. Examples: models/embedding-gecko-001  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "texts": {
                "type": "MutableSequence[str]",
                "description": "Optional. The free-form input texts that the model will turn into an embedding. The current limit is 100 texts, over which an error will be thrown.  This corresponds to the ``texts`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.BatchEmbedTextResponse: The response to a EmbedTextRequest."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "texts",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.BatchEmbedTextResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "count_text_tokens",
          "description": "Runs a model's tokenizer on a text and returns the\ntoken count.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.ai import generativelanguage_v1beta\n\n    async def sample_count_text_tokens():\n        # Create a client\n        client = generativelanguage_v1beta.TextServiceAsyncClient()\n\n        # Initialize request argument(s)\n        prompt = generativelanguage_v1beta.TextPrompt()\n        prompt.text = \"text_value\"\n\n        request = generativelanguage_v1beta.CountTextTokensRequest(\n            model=\"model_value\",\n            prompt=prompt,\n        )\n\n        # Make the request\n        response = await client.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "model": {
                "type": "str",
                "description": "Required. The model's resource name. This serves as an ID for the Model to use.  This name should match a model name returned by the ``ListModels`` method.  Format: ``models/{model}``  This corresponds to the ``model`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "prompt": {
                "type": "google.ai.generativelanguage_v1beta.types.TextPrompt",
                "description": "Required. The free-form input text given to the model as a prompt.  This corresponds to the ``prompt`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.ai.generativelanguage_v1beta.types.CountTextTokensResponse: A response from CountTextTokens.  It returns the model's token_count for the prompt."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "model",
              "prompt",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.ai.generativelanguage_v1beta.types.CountTextTokensResponse"
          ]
        }
      }
    ]
  }
}