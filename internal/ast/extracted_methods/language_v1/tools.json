{
  "LanguageService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "analyze_sentiment",
          "description": "Analyzes the sentiment of the provided text.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import language_v1\n\n    async def sample_analyze_sentiment():\n        # Create a client\n        client = language_v1.LanguageServiceAsyncClient()\n\n        # Initialize request argument(s)\n        document = language_v1.Document()\n        document.content = \"content_value\"\n\n        request = language_v1.AnalyzeSentimentRequest(\n            document=document,\n        )\n\n        # Make the request\n        response = await client.analyze_sentiment(request=request)\n\n        # Handle the response\n        print(response",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "document": {
                "type": "google.cloud.language_v1.types.Document",
                "description": "Required. Input document. This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "encoding_type": {
                "type": "google.cloud.language_v1.types.EncodingType",
                "description": "The encoding type used by the API to calculate sentence offsets.  This corresponds to the ``encoding_type`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.language_v1.types.AnalyzeSentimentResponse: The sentiment analysis response message."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "document",
              "encoding_type",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "analyze_entities",
          "description": "Finds named entities (currently proper names and\ncommon nouns) in the text along with entity types,\nsalience, mentions for each entity, and other\nproperties.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import language_v1\n\n    async def sample_analyze_entities():\n        # Create a client\n        client = language_v1.LanguageServiceAsyncClient()\n\n        # Initialize request argument(s)\n        document = language_v1.Document()\n        document.content = \"content_value\"\n\n        request = language_v1.AnalyzeEntitiesRequest(\n            document=document,\n        )\n\n        # Make the request\n        r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "document": {
                "type": "google.cloud.language_v1.types.Document",
                "description": "Required. Input document. This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "encoding_type": {
                "type": "google.cloud.language_v1.types.EncodingType",
                "description": "The encoding type used by the API to calculate offsets.  This corresponds to the ``encoding_type`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.language_v1.types.AnalyzeEntitiesResponse: The entity analysis response message."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "document",
              "encoding_type",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "analyze_entity_sentiment",
          "description": "Finds entities, similar to\n[AnalyzeEntities][google.cloud.language.v1.LanguageService.AnalyzeEntities]\nin the text and analyzes sentiment associated with each entity\nand its mentions.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import language_v1\n\n    async def sample_analyze_entity_sentiment():\n        # Create a client\n        client = language_v1.LanguageServiceAsyncClient()\n\n        # Initialize request argument(s)\n        document = language_v1.Document()\n        document.content = \"content_value\"\n\n        request = language_v1.AnalyzeEntitySentimentRequest(\n            document=document,\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "document": {
                "type": "google.cloud.language_v1.types.Document",
                "description": "Required. Input document. This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "encoding_type": {
                "type": "google.cloud.language_v1.types.EncodingType",
                "description": "The encoding type used by the API to calculate offsets.  This corresponds to the ``encoding_type`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.language_v1.types.AnalyzeEntitySentimentResponse: The entity-level sentiment analysis response message."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "document",
              "encoding_type",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "analyze_syntax",
          "description": "Analyzes the syntax of the text and provides sentence\nboundaries and tokenization along with part of speech\ntags, dependency trees, and other properties.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import language_v1\n\n    async def sample_analyze_syntax():\n        # Create a client\n        client = language_v1.LanguageServiceAsyncClient()\n\n        # Initialize request argument(s)\n        document = language_v1.Document()\n        document.content = \"content_value\"\n\n        request = language_v1.AnalyzeSyntaxRequest(\n            document=document,\n        )\n\n        # Make the request\n        response ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "document": {
                "type": "google.cloud.language_v1.types.Document",
                "description": "Required. Input document. This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "encoding_type": {
                "type": "google.cloud.language_v1.types.EncodingType",
                "description": "The encoding type used by the API to calculate offsets.  This corresponds to the ``encoding_type`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.language_v1.types.AnalyzeSyntaxResponse: The syntax analysis response message."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "document",
              "encoding_type",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "classify_text",
          "description": "Classifies a document into categories.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import language_v1\n\n    async def sample_classify_text():\n        # Create a client\n        client = language_v1.LanguageServiceAsyncClient()\n\n        # Initialize request argument(s)\n        document = language_v1.Document()\n        document.content = \"content_value\"\n\n        request = language_v1.ClassifyTextRequest(\n            document=document,\n        )\n\n        # Make the request\n        response = await client.classify_text(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "document": {
                "type": "google.cloud.language_v1.types.Document",
                "description": "Required. Input document. This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.language_v1.types.ClassifyTextResponse: The document classification response message."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "document",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "moderate_text",
          "description": "Moderates a document for harmful and sensitive\ncategories.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import language_v1\n\n    async def sample_moderate_text():\n        # Create a client\n        client = language_v1.LanguageServiceAsyncClient()\n\n        # Initialize request argument(s)\n        document = language_v1.Document()\n        document.content = \"content_value\"\n\n        request = language_v1.ModerateTextRequest(\n            document=document,\n        )\n\n        # Make the request\n        response = await client.moderate_text(request=request)\n\n        # Handle the response\n        print(respon",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "document": {
                "type": "google.cloud.language_v1.types.Document",
                "description": "Required. Input document. This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.language_v1.types.ModerateTextResponse: The document moderation response message."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "document",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "annotate_text",
          "description": "A convenience method that provides all the features\nthat analyzeSentiment, analyzeEntities, and\nanalyzeSyntax provide in one call.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import language_v1\n\n    async def sample_annotate_text():\n        # Create a client\n        client = language_v1.LanguageServiceAsyncClient()\n\n        # Initialize request argument(s)\n        document = language_v1.Document()\n        document.content = \"content_value\"\n\n        request = language_v1.AnnotateTextRequest(\n            document=document,\n        )\n\n        # Make the request\n        response = await client.annotate_t",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "document": {
                "type": "google.cloud.language_v1.types.Document",
                "description": "Required. Input document. This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "features": {
                "type": "google.cloud.language_v1.types.AnnotateTextRequest.Features",
                "description": "Required. The enabled features. This corresponds to the ``features`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "encoding_type": {
                "type": "google.cloud.language_v1.types.EncodingType",
                "description": "The encoding type used by the API to calculate offsets.  This corresponds to the ``encoding_type`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.language_v1.types.AnnotateTextResponse: The text annotations response message."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "document",
              "features",
              "encoding_type",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  }
}