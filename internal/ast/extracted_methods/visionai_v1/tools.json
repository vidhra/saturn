{
  "AppPlatform": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_applications",
          "description": "Lists Applications in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_applications():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListApplicationsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_applications(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Unio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListApplicationsRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.app_platform.pagers.ListApplicationsAsyncPager: Message for response to listing Applications. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.app_platform.pagers.ListApplicationsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_application",
          "description": "Gets details of a single Application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_application():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetApplicationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_application(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetApplicationRequest, dict]]):\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Application: Message describing Application object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Application"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_application",
          "description": "Creates a new Application in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_application():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        application = visionai_v1.Application()\n        application.display_name = \"display_name_value\"\n\n        request = visionai_v1.CreateApplicationRequest(\n            parent=\"parent_value\",\n            application_id=\"application_id_value\",\n            application=application,\n        )\n\n        # Make the reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "application": {
                "type": "google.cloud.visionai_v1.types.Application",
                "description": "Required. The resource being created. This corresponds to the ``application`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Application` Message describing Application object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "application",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_application",
          "description": "Updates the parameters of a single Application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_application():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        application = visionai_v1.Application()\n        application.display_name = \"display_name_value\"\n\n        request = visionai_v1.UpdateApplicationRequest(\n            application=application,\n        )\n\n        # Make the request\n        operation = client.update_application(request=request)\n\n        print(\"Waiting for ope",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "application": {
                "type": "google.cloud.visionai_v1.types.Application",
                "description": "Required. The resource being updated. This corresponds to the ``application`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Field mask is used to specify the fields to be overwritten in the Application resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Application` Message describing Application object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "application",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_application",
          "description": "Deletes a single Application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_application():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteApplicationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_application(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nAr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "deploy_application",
          "description": "Deploys a single Application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_deploy_application():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeployApplicationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.deploy_application(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nAr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.DeployApplicationResponse` RPC Request Messages. Message for DeployApplication Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "undeploy_application",
          "description": "Undeploys a single Application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_undeploy_application():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UndeployApplicationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.undeploy_application(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(respo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.UndeployApplicationResponse` Message for UndeployApplication Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "add_application_stream_input",
          "description": "Adds target stream input to the Application.\nIf the Application is deployed, the corresponding new\nApplication instance will be created. If the stream has\nalready been in the Application, the RPC will fail.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_add_application_stream_input():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.AddApplicationStreamInputRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.a",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.AddApplicationStreamInputResponse` Message for AddApplicationStreamInput Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "remove_application_stream_input",
          "description": "Remove target stream input to the Application, if the\nApplication is deployed, the corresponding instance\nbased will be deleted. If the stream is not in the\nApplication, the RPC will fail.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_remove_application_stream_input():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.RemoveApplicationStreamInputRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.remove_applic",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.RemoveApplicationStreamInputResponse` Message for RemoveApplicationStreamInput Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_application_stream_input",
          "description": "Update target stream input to the Application, if the\nApplication is deployed, the corresponding instance based will\nbe deployed. For CreateOrUpdate behavior, set allow_missing to\ntrue.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_application_stream_input():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UpdateApplicationStreamInputRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.update_applicati",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.UpdateApplicationStreamInputResponse` Message for AddApplicationStreamInput Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_instances",
          "description": "Lists Instances in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_instances():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListInstancesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_instances(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.clo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListInstancesRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.app_platform.pagers.ListInstancesAsyncPager: Message for response to listing Instances. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.app_platform.pagers.ListInstancesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_instance",
          "description": "Gets details of a single Instance.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_instance():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetInstanceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_instance(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetInstanceRequest, dict]]):\n        The reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Instance: Message describing Instance object Next ID: 12"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Instance"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_application_instances",
          "description": "Adds target stream input to the Application.\nIf the Application is deployed, the corresponding new\nApplication instance will be created. If the stream has\nalready been in the Application, the RPC will fail.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_application_instances():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        application_instances = visionai_v1.ApplicationInstance()\n        application_instances.instance_id = \"instance_id_value\"\n        application_instances.i",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.CreateApplicationInstancesResponse` Message for CreateApplicationInstance Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_application_instances",
          "description": "Remove target stream input to the Application, if the\nApplication is deployed, the corresponding instance\nbased will be deleted. If the stream is not in the\nApplication, the RPC will fail.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_application_instances():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteApplicationInstancesRequest(\n            name=\"name_value\",\n            instance_ids=['instance_ids_value1', 'instance_ids_value2'],\n        )\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Instance` Message describing Instance object Next ID: 12"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_application_instances",
          "description": "Adds target stream input to the Application.\nIf the Application is deployed, the corresponding new\nApplication instance will be created. If the stream has\nalready been in the Application, the RPC will fail.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_application_instances():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UpdateApplicationInstancesRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "application_instances": {
                "type": "MutableSequence[google.cloud.visionai_v1.types.UpdateApplicationInstancesRequest.UpdateApplicationInstance]",
                "description": "This corresponds to the ``application_instances`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.UpdateApplicationInstancesResponse` Message for UpdateApplicationInstances Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "application_instances",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_drafts",
          "description": "Lists Drafts in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_drafts():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListDraftsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_drafts(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListDraftsRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.app_platform.pagers.ListDraftsAsyncPager: Message for response to listing Drafts. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.app_platform.pagers.ListDraftsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_draft",
          "description": "Gets details of a single Draft.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_draft():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetDraftRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_draft(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetDraftRequest, dict]]):\n        The request object. Messa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Draft: Message describing Draft object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Draft"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_draft",
          "description": "Creates a new Draft in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_draft():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        draft = visionai_v1.Draft()\n        draft.display_name = \"display_name_value\"\n\n        request = visionai_v1.CreateDraftRequest(\n            parent=\"parent_value\",\n            draft_id=\"draft_id_value\",\n            draft=draft,\n        )\n\n        # Make the request\n        operation = client.create_draft(request=request)\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "draft": {
                "type": "google.cloud.visionai_v1.types.Draft",
                "description": "Required. The resource being created. This corresponds to the ``draft`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "draft_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``draft_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Draft` Message describing Draft object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "draft",
              "draft_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_draft",
          "description": "Updates the parameters of a single Draft.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_draft():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        draft = visionai_v1.Draft()\n        draft.display_name = \"display_name_value\"\n\n        request = visionai_v1.UpdateDraftRequest(\n            draft=draft,\n        )\n\n        # Make the request\n        operation = client.update_draft(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await ope",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "draft": {
                "type": "google.cloud.visionai_v1.types.Draft",
                "description": "Required. The resource being updated. This corresponds to the ``draft`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Field mask is used to specify the fields to be overwritten in the Draft resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Draft` Message describing Draft object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "draft",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_draft",
          "description": "Deletes a single Draft.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_draft():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteDraftRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_draft(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optiona",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_processors",
          "description": "Lists Processors in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_processors():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListProcessorsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_processors(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListProcessorsRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.app_platform.pagers.ListProcessorsAsyncPager: Message for response to listing Processors. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.app_platform.pagers.ListProcessorsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_prebuilt_processors",
          "description": "ListPrebuiltProcessors is a custom pass-through verb\nthat Lists Prebuilt Processors.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_prebuilt_processors():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListPrebuiltProcessorsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.list_prebuilt_processors(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Opti",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent path. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.ListPrebuiltProcessorsResponse: Response Message for listing Prebuilt Processors."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.ListPrebuiltProcessorsResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_processor",
          "description": "Gets details of a single Processor.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_processor():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetProcessorRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_processor(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetProcessorRequest, dict]]):\n        The r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Processor: Message describing Processor object. Next ID: 19"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Processor"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_processor",
          "description": "Creates a new Processor in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_processor():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        processor = visionai_v1.Processor()\n        processor.display_name = \"display_name_value\"\n\n        request = visionai_v1.CreateProcessorRequest(\n            parent=\"parent_value\",\n            processor_id=\"processor_id_value\",\n            processor=processor,\n        )\n\n        # Make the request\n        operation",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "processor": {
                "type": "google.cloud.visionai_v1.types.Processor",
                "description": "Required. The resource being created. This corresponds to the ``processor`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "processor_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``processor_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Processor` Message describing Processor object. Next ID: 19"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "processor",
              "processor_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_processor",
          "description": "Updates the parameters of a single Processor.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_processor():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        processor = visionai_v1.Processor()\n        processor.display_name = \"display_name_value\"\n\n        request = visionai_v1.UpdateProcessorRequest(\n            processor=processor,\n        )\n\n        # Make the request\n        operation = client.update_processor(request=request)\n\n        print(\"Waiting for operation to complete",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "processor": {
                "type": "google.cloud.visionai_v1.types.Processor",
                "description": "Required. The resource being updated. This corresponds to the ``processor`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Field mask is used to specify the fields to be overwritten in the Processor resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Processor` Message describing Processor object. Next ID: 19"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "processor",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_processor",
          "description": "Deletes a single Processor.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_processor():\n        # Create a client\n        client = visionai_v1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteProcessorRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_processor(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      }
    ]
  },
  "HealthCheckService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "health_check",
          "description": "HealthCheck method checks the health status of the\ncluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_health_check():\n        # Create a client\n        client = visionai_v1.HealthCheckServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.HealthCheckRequest(\n        )\n\n        # Make the request\n        response = await client.health_check(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.HealthCheckRequest, dict]]):\n        The reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.HealthCheckResponse"
          ]
        }
      }
    ]
  },
  "LiveVideoAnalytics": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_public_operators",
          "description": "ListPublicOperators returns all the operators in\npublic registry.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_public_operators():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListPublicOperatorsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_public_operators(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListPublicOperatorsRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.live_video_analytics.pagers.ListPublicOperatorsAsyncPager: Response message of ListPublicOperators API. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.live_video_analytics.pagers.ListPublicOperatorsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "resolve_operator_info",
          "description": "ResolveOperatorInfo returns the operator information\nbased on the request.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_resolve_operator_info():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        queries = visionai_v1.OperatorQuery()\n        queries.operator = \"operator_value\"\n\n        request = visionai_v1.ResolveOperatorInfoRequest(\n            parent=\"parent_value\",\n            queries=queries,\n        )\n\n        # Make the request\n        response = await client.resolve_op",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ResolveOperatorInfoRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "queries": {
                "type": "MutableSequence[google.cloud.visionai_v1.types.OperatorQuery]",
                "description": "Required. The operator queries. This corresponds to the ``queries`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.ResolveOperatorInfoResponse: Response message of ResolveOperatorInfo API."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "queries",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.ResolveOperatorInfoResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_operators",
          "description": "Lists Operators in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_operators():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListOperatorsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_operators(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[goo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListOperatorsRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.live_video_analytics.pagers.ListOperatorsAsyncPager: Message for response to listing Operators. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.live_video_analytics.pagers.ListOperatorsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_operator",
          "description": "Gets details of a single Operator.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_operator():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetOperatorRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_operator(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetOperatorRequest, dict]]):\n        The",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Operator: Message describing the Operator object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Operator"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_operator",
          "description": "Creates a new Operator in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_operator():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.CreateOperatorRequest(\n            parent=\"parent_value\",\n            operator_id=\"operator_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_operator(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await opera",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "operator": {
                "type": "google.cloud.visionai_v1.types.Operator",
                "description": "Required. The resource being created. This corresponds to the ``operator`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "operator_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``operator_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Operator` Message describing the Operator object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "operator",
              "operator_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_operator",
          "description": "Updates the parameters of a single Operator.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_operator():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UpdateOperatorRequest(\n        )\n\n        # Make the request\n        operation = client.update_operator(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (O",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "operator": {
                "type": "google.cloud.visionai_v1.types.Operator",
                "description": "Required. The resource being updated This corresponds to the ``operator`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Operator resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Operator` Message describing the Operator object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "operator",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_operator",
          "description": "Deletes a single Operator.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_operator():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteOperatorRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_operator(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_analyses",
          "description": "Lists Analyses in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_analyses():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListAnalysesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_analyses(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListAnalysesRequest  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.live_video_analytics.pagers.ListAnalysesAsyncPager: Message for response to listing Analyses Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.live_video_analytics.pagers.ListAnalysesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_analysis",
          "description": "Gets details of a single Analysis.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_analysis():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetAnalysisRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_analysis(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetAnalysisRequest, dict]]):\n        The",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Analysis: Message describing the Analysis object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Analysis"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_analysis",
          "description": "Creates a new Analysis in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_analysis():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.CreateAnalysisRequest(\n            parent=\"parent_value\",\n            analysis_id=\"analysis_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_analysis(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await opera",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "analysis": {
                "type": "google.cloud.visionai_v1.types.Analysis",
                "description": "Required. The resource being created. This corresponds to the ``analysis`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "analysis_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``analysis_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Analysis` Message describing the Analysis object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "analysis",
              "analysis_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_analysis",
          "description": "Updates the parameters of a single Analysis.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_analysis():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UpdateAnalysisRequest(\n        )\n\n        # Make the request\n        operation = client.update_analysis(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (O",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "analysis": {
                "type": "google.cloud.visionai_v1.types.Analysis",
                "description": "Required. The resource being updated. This corresponds to the ``analysis`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Analysis resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Analysis` Message describing the Analysis object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "analysis",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_analysis",
          "description": "Deletes a single Analysis.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_analysis():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteAnalysisRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_analysis(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_processes",
          "description": "Lists Processes in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_processes():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListProcessesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_processes(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[goo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListProcessesRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.live_video_analytics.pagers.ListProcessesAsyncPager: Message for response to listing Processes. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.live_video_analytics.pagers.ListProcessesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_process",
          "description": "Gets details of a single Process.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_process():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetProcessRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_process(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetProcessRequest, dict]]):\n        The requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Process: Message describing the Process object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Process"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_process",
          "description": "Creates a new Process in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_process():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        process = visionai_v1.Process()\n        process.analysis = \"analysis_value\"\n\n        request = visionai_v1.CreateProcessRequest(\n            parent=\"parent_value\",\n            process_id=\"process_id_value\",\n            process=process,\n        )\n\n        # Make the request\n        operation = client.create_proc",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "process": {
                "type": "google.cloud.visionai_v1.types.Process",
                "description": "Required. The resource being created. This corresponds to the ``process`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "process_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``process_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Process` Message describing the Process object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "process",
              "process_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_process",
          "description": "Updates the parameters of a single Process.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_process():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        process = visionai_v1.Process()\n        process.analysis = \"analysis_value\"\n\n        request = visionai_v1.UpdateProcessRequest(\n            process=process,\n        )\n\n        # Make the request\n        operation = client.update_process(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        resp",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "process": {
                "type": "google.cloud.visionai_v1.types.Process",
                "description": "Required. The resource being updated. This corresponds to the ``process`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Process resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Process` Message describing the Process object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "process",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_process",
          "description": "Deletes a single Process.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_process():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteProcessRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_process(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "batch_run_process",
          "description": "Run all of the processes to \"completion\". Max time\nfor each process is the LRO time limit.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_batch_run_process():\n        # Create a client\n        client = visionai_v1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        requests = visionai_v1.CreateProcessRequest()\n        requests.parent = \"parent_value\"\n        requests.process_id = \"process_id_value\"\n        requests.process.analysis = \"analysis_value\"\n\n        request = visionai_v1.BatchRunProcessRequest(\n            parent=\"parent_va",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource shared by all processes being created.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "requests": {
                "type": "MutableSequence[google.cloud.visionai_v1.types.CreateProcessRequest]",
                "description": "Required. The create process requests.  This corresponds to the ``requests`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.BatchRunProcessResponse` Response message for running the processes in a batch."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      }
    ]
  },
  "StreamingService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "send_packets",
          "description": "Send packets to the series.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_send_packets():\n        # Create a client\n        client = visionai_v1.StreamingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.SendPacketsRequest(\n        )\n\n        # This method expects an iterator which contains\n        # 'visionai_v1.SendPacketsRequest' objects\n        # Here we create a generator that yields a single `request` for\n        # demonstrative purposes.\n        requests = [request]\n\n        def request_generator():\n            f",
          "parameters": {
            "type": "object",
            "properties": {
              "requests": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "receive_packets",
          "description": "Receive packets from the series.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_receive_packets():\n        # Create a client\n        client = visionai_v1.StreamingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ReceivePacketsRequest(\n        )\n\n        # This method expects an iterator which contains\n        # 'visionai_v1.ReceivePacketsRequest' objects\n        # Here we create a generator that yields a single `request` for\n        # demonstrative purposes.\n        requests = [request]\n\n        def request_generator():",
          "parameters": {
            "type": "object",
            "properties": {
              "requests": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "receive_events",
          "description": "Receive events given the stream name.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_receive_events():\n        # Create a client\n        client = visionai_v1.StreamingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ReceiveEventsRequest(\n        )\n\n        # This method expects an iterator which contains\n        # 'visionai_v1.ReceiveEventsRequest' objects\n        # Here we create a generator that yields a single `request` for\n        # demonstrative purposes.\n        requests = [request]\n\n        def request_generator(",
          "parameters": {
            "type": "object",
            "properties": {
              "requests": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "acquire_lease",
          "description": "AcquireLease acquires a lease.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_acquire_lease():\n        # Create a client\n        client = visionai_v1.StreamingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.AcquireLeaseRequest(\n        )\n\n        # Make the request\n        response = await client.acquire_lease(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.AcquireLeaseRequest, dict]]):\n        The request object. Request message ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Lease"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "renew_lease",
          "description": "RenewLease renews a lease.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_renew_lease():\n        # Create a client\n        client = visionai_v1.StreamingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.RenewLeaseRequest(\n        )\n\n        # Make the request\n        response = await client.renew_lease(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.RenewLeaseRequest, dict]]):\n        The request object. Request message for renewing",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Lease"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "release_lease",
          "description": "RleaseLease releases a lease.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_release_lease():\n        # Create a client\n        client = visionai_v1.StreamingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ReleaseLeaseRequest(\n        )\n\n        # Make the request\n        response = await client.release_lease(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.ReleaseLeaseRequest, dict]]):\n        The request object. Request message f",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.ReleaseLeaseResponse"
          ]
        }
      }
    ]
  },
  "StreamsService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_clusters",
          "description": "Lists Clusters in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_clusters():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListClustersRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_clusters(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.clou",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListClustersRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.streams_service.pagers.ListClustersAsyncPager: Message for response to listing Clusters. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.streams_service.pagers.ListClustersAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_cluster",
          "description": "Gets details of a single Cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_cluster():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetClusterRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_cluster(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetClusterRequest, dict]]):\n        The request ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Cluster: Message describing the Cluster object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Cluster"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_cluster",
          "description": "Creates a new Cluster in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_cluster():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.CreateClusterRequest(\n            parent=\"parent_value\",\n            cluster_id=\"cluster_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_cluster(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).resu",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "cluster": {
                "type": "google.cloud.visionai_v1.types.Cluster",
                "description": "Required. The resource being created. This corresponds to the ``cluster`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "cluster_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``cluster_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Cluster` Message describing the Cluster object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "cluster",
              "cluster_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_cluster",
          "description": "Updates the parameters of a single Cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_cluster():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UpdateClusterRequest(\n        )\n\n        # Make the request\n        operation = client.update_cluster(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "cluster": {
                "type": "google.cloud.visionai_v1.types.Cluster",
                "description": "Required. The resource being updated This corresponds to the ``cluster`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Cluster resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Cluster` Message describing the Cluster object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "cluster",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_cluster",
          "description": "Deletes a single Cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_cluster():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteClusterRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_cluster(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_streams",
          "description": "Lists Streams in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_streams():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListStreamsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_streams(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.vi",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListStreamsRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.streams_service.pagers.ListStreamsAsyncPager: Message for response to listing Streams. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.streams_service.pagers.ListStreamsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_stream",
          "description": "Gets details of a single Stream.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_stream():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetStreamRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_stream(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetStreamRequest, dict]]):\n        The request objec",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Stream: Message describing the Stream object. The Stream and the Event resources are many to many; i.e., each Stream resource can associate to many Event resources and each Event resource can associate to many Stream resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Stream"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_stream",
          "description": "Creates a new Stream in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_stream():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.CreateStreamRequest(\n            parent=\"parent_value\",\n            stream_id=\"stream_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_stream(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "stream": {
                "type": "google.cloud.visionai_v1.types.Stream",
                "description": "Required. The resource being created. This corresponds to the ``stream`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "stream_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``stream_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Stream` Message describing the Stream object. The Stream and the Event resources are many to many; i.e., each Stream resource can associate to many Event resources and each Event resource can associate to many Stream resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "stream",
              "stream_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_stream",
          "description": "Updates the parameters of a single Stream.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_stream():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UpdateStreamRequest(\n        )\n\n        # Make the request\n        operation = client.update_stream(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Unio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "stream": {
                "type": "google.cloud.visionai_v1.types.Stream",
                "description": "Required. The resource being updated. This corresponds to the ``stream`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Stream resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Stream` Message describing the Stream object. The Stream and the Event resources are many to many; i.e., each Stream resource can associate to many Event resources and each Event resource can associate to many Stream resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "stream",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_stream",
          "description": "Deletes a single Stream.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_stream():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteStreamRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_stream(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_stream_thumbnail",
          "description": "Gets the thumbnail (image snapshot) of a single\nStream.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_stream_thumbnail():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetStreamThumbnailRequest(\n            stream=\"stream_value\",\n            gcs_object_name=\"gcs_object_name_value\",\n        )\n\n        # Make the request\n        operation = client.get_stream_thumbnail(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        respo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "stream": {
                "type": "str",
                "description": "Required. The name of the stream for to get the thumbnail from.  This corresponds to the ``stream`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "gcs_object_name": {
                "type": "str",
                "description": "Required. The name of the GCS object to store the thumbnail image.  This corresponds to the ``gcs_object_name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.GetStreamThumbnailResponse` Message for the response of GetStreamThumbnail. The empty response message indicates the thumbnail image has been uploaded to GCS successfully."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "stream",
              "gcs_object_name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "generate_stream_hls_token",
          "description": "Generate the JWT auth token required to get the\nstream HLS contents.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_generate_stream_hls_token():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GenerateStreamHlsTokenRequest(\n            stream=\"stream_value\",\n        )\n\n        # Make the request\n        response = await client.generate_stream_hls_token(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "stream": {
                "type": "str",
                "description": "Required. The name of the stream. This corresponds to the ``stream`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.GenerateStreamHlsTokenResponse: Response message for GenerateStreamHlsToken."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "stream",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.GenerateStreamHlsTokenResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_events",
          "description": "Lists Events in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_events():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListEventsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_events(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.vision",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListEventsRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.streams_service.pagers.ListEventsAsyncPager: Message for response to listing Events. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.streams_service.pagers.ListEventsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_event",
          "description": "Gets details of a single Event.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_event():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetEventRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_event(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetEventRequest, dict]]):\n        The request object. Me",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Event: Message describing the Event object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Event"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_event",
          "description": "Creates a new Event in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_event():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.CreateEventRequest(\n            parent=\"parent_value\",\n            event_id=\"event_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_event(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "event": {
                "type": "google.cloud.visionai_v1.types.Event",
                "description": "Required. The resource being created. This corresponds to the ``event`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "event_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``event_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Event` Message describing the Event object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "event",
              "event_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_event",
          "description": "Updates the parameters of a single Event.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_event():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UpdateEventRequest(\n        )\n\n        # Make the request\n        operation = client.update_event(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[go",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "event": {
                "type": "google.cloud.visionai_v1.types.Event",
                "description": "Required. The resource being updated. This corresponds to the ``event`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Event resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Event` Message describing the Event object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "event",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_event",
          "description": "Deletes a single Event.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_event():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteEventRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_event(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Opti",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_series",
          "description": "Lists Series in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_series():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListSeriesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_series(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.vision",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListSeriesRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.streams_service.pagers.ListSeriesAsyncPager: Message for response to listing Series. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.streams_service.pagers.ListSeriesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_series",
          "description": "Gets details of a single Series.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_series():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetSeriesRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_series(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetSeriesRequest, dict]]):\n        The request objec",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Series: Message describing the Series object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Series"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_series",
          "description": "Creates a new Series in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_series():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        series = visionai_v1.Series()\n        series.stream = \"stream_value\"\n        series.event = \"event_value\"\n\n        request = visionai_v1.CreateSeriesRequest(\n            parent=\"parent_value\",\n            series_id=\"series_id_value\",\n            series=series,\n        )\n\n        # Make the request\n        operation =",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "series": {
                "type": "google.cloud.visionai_v1.types.Series",
                "description": "Required. The resource being created. This corresponds to the ``series`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "series_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``series_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Series` Message describing the Series object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "series",
              "series_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_series",
          "description": "Updates the parameters of a single Event.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_series():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        series = visionai_v1.Series()\n        series.stream = \"stream_value\"\n        series.event = \"event_value\"\n\n        request = visionai_v1.UpdateSeriesRequest(\n            series=series,\n        )\n\n        # Make the request\n        operation = client.update_series(request=request)\n\n        print(\"Waiting for operation to complete",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "series": {
                "type": "google.cloud.visionai_v1.types.Series",
                "description": "Required. The resource being updated This corresponds to the ``series`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Series resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Series` Message describing the Series object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "series",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_series",
          "description": "Deletes a single Series.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_series():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteSeriesRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_series(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "materialize_channel",
          "description": "Materialize a channel.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_materialize_channel():\n        # Create a client\n        client = visionai_v1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        channel = visionai_v1.Channel()\n        channel.stream = \"stream_value\"\n        channel.event = \"event_value\"\n\n        request = visionai_v1.MaterializeChannelRequest(\n            parent=\"parent_value\",\n            channel_id=\"channel_id_value\",\n            channel=channel,\n        )\n\n        # Make the request\n        operation = client.mat",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "channel": {
                "type": "google.cloud.visionai_v1.types.Channel",
                "description": "Required. The resource being created. This corresponds to the ``channel`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "channel_id": {
                "type": "str",
                "description": "Required. Id of the channel. This corresponds to the ``channel_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Channel` Message describing the Channel object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "channel",
              "channel_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      }
    ]
  },
  "Warehouse": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_asset",
          "description": "Creates an asset inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_asset():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.CreateAssetRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_asset(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.CreateAssetRequest, dict]]):\n        The request",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this asset will be created. Format: ``projects/{project_number}/locations/{location_id}/corpora/{corpus_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "asset": {
                "type": "google.cloud.visionai_v1.types.Asset",
                "description": "Required. The asset to create. This corresponds to the ``asset`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "asset_id": {
                "type": "str",
                "description": "Optional. The ID to use for the asset, which will become the final component of the asset's resource name if user choose to specify. Otherwise, asset id will be generated by system.  This value should be up to 63 characters, and valid characters are /[a-z][0-9]-/. The first character must be a letter, the last could be a letter or a number.  This corresponds to the ``asset_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Asset: An asset is a resource in corpus. It represents a media object inside corpus, contains metadata and another resource annotation. Different feature could be applied to the asset to generate annotations. User could specified annotation related to the target asset."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "asset",
              "asset_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Asset"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_asset",
          "description": "Updates an asset inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_asset():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UpdateAssetRequest(\n        )\n\n        # Make the request\n        response = await client.update_asset(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.UpdateAssetRequest, dict]]):\n        The request object. Request message for Update",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "asset": {
                "type": "google.cloud.visionai_v1.types.Asset",
                "description": "Required. The asset to update.  The asset's ``name`` field is used to identify the asset to be updated. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}``  This corresponds to the ``asset`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Asset: An asset is a resource in corpus. It represents a media object inside corpus, contains metadata and another resource annotation. Different feature could be applied to the asset to generate annotations. User could specified annotation related to the target asset."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "asset",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Asset"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_asset",
          "description": "Reads an asset inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_asset():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetAssetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_asset(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetAssetRequest, dict]]):\n        The request object. Request m",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the asset to retrieve. Format: projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Asset: An asset is a resource in corpus. It represents a media object inside corpus, contains metadata and another resource annotation. Different feature could be applied to the asset to generate annotations. User could specified annotation related to the target asset."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Asset"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_assets",
          "description": "Lists an list of assets inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_assets():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListAssetsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_assets(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of assets. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.warehouse.pagers.ListAssetsAsyncPager: Response message for ListAssets.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.ListAssetsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_asset",
          "description": "Deletes asset inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_asset():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteAssetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_asset(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Opti",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the asset to delete. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "upload_asset",
          "description": "Upload asset by specifing the asset Cloud Storage\nuri. For video warehouse, it requires users who call\nthis API have read access to the cloud storage file.\nOnce it is uploaded, it can be retrieved by\nGenerateRetrievalUrl API which by default, only can\nretrieve cloud storage files from the same project of\nthe warehouse. To allow retrieval cloud storage files\nthat are in a separate project, it requires to find the\nvision ai service account (Go to IAM, check checkbox to\nshow \"Include Google-provided role grants\", search for\n\"Cloud Vision AI Service Agent\") and grant the read\naccess of the cloud storage files to that service\naccount.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.d",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "generate_retrieval_url",
          "description": "Generates a signed url for downloading the asset.\nFor video warehouse, please see comment of UploadAsset\nabout how to allow retrieval of cloud storage files in a\ndifferent project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_generate_retrieval_url():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GenerateRetrievalUrlRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.generate_retrieval_url(request=requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.GenerateRetrievalUrlResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "analyze_asset",
          "description": "Analyze asset to power search capability.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_analyze_asset():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.AnalyzeAssetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.analyze_asset(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "index_asset",
          "description": "Index one asset for search. Supported corpus type:\nCorpus.Type.VIDEO_ON_DEMAND\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_index_asset():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.IndexAssetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.index_asset(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "remove_index_asset",
          "description": "Remove one asset's index data for search. Supported corpus type:\nCorpus.Type.VIDEO_ON_DEMAND\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_remove_index_asset():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.RemoveIndexAssetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.remove_index_asset(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result(",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "view_indexed_assets",
          "description": "Lists assets inside an index.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_view_indexed_assets():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ViewIndexedAssetsRequest(\n            index=\"index_value\",\n        )\n\n        # Make the request\n        page_result = client.view_indexed_assets(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.vision",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "index": {
                "type": "str",
                "description": "Required. The index that owns this collection of assets. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/indexes/{index}``  This corresponds to the ``index`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.warehouse.pagers.ViewIndexedAssetsAsyncPager: Response message for ViewIndexedAssets. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "index",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.ViewIndexedAssetsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_index",
          "description": "Creates an Index under the corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_index():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        index = visionai_v1.Index()\n        index.entire_corpus = True\n\n        request = visionai_v1.CreateIndexRequest(\n            parent=\"parent_value\",\n            index=index,\n        )\n\n        # Make the request\n        operation = client.create_index(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response =",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for the parent. The resource name of the Corpus under which this index is created. Format: ``projects/{project_number}/locations/{location_id}/corpora/{corpus_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "index": {
                "type": "google.cloud.visionai_v1.types.Index",
                "description": "Required. The index being created. This corresponds to the ``index`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "index_id": {
                "type": "str",
                "description": "Optional. The ID for the index. This will become the final resource name for the index. If the user does not specify this value, it will be generated by system.  This value should be up to 63 characters, and valid characters are /[a-z][0-9]-/. The first character must be a letter, the last could be a letter or a number.  This corresponds to the ``index_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Index` An Index is a resource in Corpus. It contains an indexed version of the assets and annotations. When deployed to an endpoint, it will allow users to search the Index."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "index",
              "index_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_index",
          "description": "Updates an Index under the corpus. Users can perform a\nmetadata-only update or trigger a full index rebuild with\ndifferent update_mask values.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_index():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        index = visionai_v1.Index()\n        index.entire_corpus = True\n\n        request = visionai_v1.UpdateIndexRequest(\n            index=index,\n        )\n\n        # Make the request\n        operation = client.update_index(request=request)\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "index": {
                "type": "google.cloud.visionai_v1.types.Index",
                "description": "Required. The resource being updated. This corresponds to the ``index`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Index resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field of the resource will be overwritten if it is in the mask. Empty field mask is not allowed. If the mask is \"*\", it triggers a full update of the index, and also a whole rebuild of index data.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Index` An Index is a resource in Corpus. It contains an indexed version of the assets and annotations. When deployed to an endpoint, it will allow users to search the Index."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "index",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_index",
          "description": "Gets the details of a single Index under a Corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_index():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetIndexRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_index(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetIndexRequest, dict]]):\n        The requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the Index resource. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/indexes/{index}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Index: An Index is a resource in Corpus. It contains an indexed version of the assets and annotations. When deployed to an endpoint, it will allow users to search the Index."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Index"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_indexes",
          "description": "List all Indexes in a given Corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_indexes():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListIndexesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_indexes(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent corpus that owns this collection of indexes. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.warehouse.pagers.ListIndexesAsyncPager: Response message for ListIndexes.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.ListIndexesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_index",
          "description": "Delete a single Index. In order to delete an index,\nthe caller must make sure that it is not deployed to any\nindex endpoint.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_index():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteIndexRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_index(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await ope",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the index to delete. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/indexes/{index}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_corpus",
          "description": "Creates a corpus inside a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_corpus():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        corpus = visionai_v1.Corpus()\n        corpus.display_name = \"display_name_value\"\n\n        request = visionai_v1.CreateCorpusRequest(\n            parent=\"parent_value\",\n            corpus=corpus,\n        )\n\n        # Make the request\n        operation = client.create_corpus(request=request)\n\n        print(\"Waiting for operation to complete..",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Form: ``projects/{project_number}/locations/{location_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "corpus": {
                "type": "google.cloud.visionai_v1.types.Corpus",
                "description": "Required. The corpus to be created. This corresponds to the ``corpus`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Corpus` Corpus is a set of media contents for management. Within a corpus, media shares the same data schema. Search is also restricted within a single corpus."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "corpus",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_corpus",
          "description": "Gets corpus details inside a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_corpus():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetCorpusRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_corpus(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetCorpusRequest, dict]]):\n        The request objec",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the corpus to retrieve.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Corpus: Corpus is a set of media contents for management. Within a corpus, media shares the same data schema. Search is also restricted within a single corpus."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Corpus"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_corpus",
          "description": "Updates a corpus in a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_corpus():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        corpus = visionai_v1.Corpus()\n        corpus.display_name = \"display_name_value\"\n\n        request = visionai_v1.UpdateCorpusRequest(\n            corpus=corpus,\n        )\n\n        # Make the request\n        response = await client.update_corpus(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[U",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "corpus": {
                "type": "google.cloud.visionai_v1.types.Corpus",
                "description": "Required. The corpus which replaces the resource on the server.  This corresponds to the ``corpus`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Corpus: Corpus is a set of media contents for management. Within a corpus, media shares the same data schema. Search is also restricted within a single corpus."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "corpus",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Corpus"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_corpora",
          "description": "Lists all corpora in a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_corpora():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListCorporaRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_corpora(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.List",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the project from which to list corpora.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.warehouse.pagers.ListCorporaAsyncPager: Response message for ListCorpora.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.ListCorporaAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_corpus",
          "description": "Deletes a corpus only if its empty.\nReturns empty response.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_corpus():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteCorpusRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_corpus(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.DeleteCorpusRequest, dict]]):\n        The request object. Request message for DeleteCor",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the corpus to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "analyze_corpus",
          "description": "Analyzes a corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_analyze_corpus():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.AnalyzeCorpusRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.analyze_corpus(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_data_schema",
          "description": "Creates data schema inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_data_schema():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        data_schema = visionai_v1.DataSchema()\n        data_schema.key = \"key_value\"\n\n        request = visionai_v1.CreateDataSchemaRequest(\n            parent=\"parent_value\",\n            data_schema=data_schema,\n        )\n\n        # Make the request\n        response = await client.create_data_schema(request=request)\n\n        # Handle the resp",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this data schema will be created. Format: ``projects/{project_number}/locations/{location_id}/corpora/{corpus_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "data_schema": {
                "type": "google.cloud.visionai_v1.types.DataSchema",
                "description": "Required. The data schema to create. This corresponds to the ``data_schema`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.DataSchema: Data schema indicates how the user specified annotation is interpreted in the system."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "data_schema",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.DataSchema"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_data_schema",
          "description": "Updates data schema inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_data_schema():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        data_schema = visionai_v1.DataSchema()\n        data_schema.key = \"key_value\"\n\n        request = visionai_v1.UpdateDataSchemaRequest(\n            data_schema=data_schema,\n        )\n\n        # Make the request\n        response = await client.update_data_schema(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "data_schema": {
                "type": "google.cloud.visionai_v1.types.DataSchema",
                "description": "Required. The data schema's ``name`` field is used to identify the data schema to be updated. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/dataSchemas/{data_schema}``  This corresponds to the ``data_schema`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.DataSchema: Data schema indicates how the user specified annotation is interpreted in the system."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "data_schema",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.DataSchema"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_data_schema",
          "description": "Gets data schema inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_data_schema():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetDataSchemaRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_data_schema(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetDataSchemaRequest, dict]]):\n        The r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the data schema to retrieve. Format: ``projects/{project_number}/locations/{location_id}/corpora/{corpus_id}/dataSchemas/{data_schema_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.DataSchema: Data schema indicates how the user specified annotation is interpreted in the system."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.DataSchema"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_data_schema",
          "description": "Deletes data schema inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_data_schema():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteDataSchemaRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_data_schema(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.DeleteDataSchemaRequest, dict]]):\n        The request object. Request message for DeleteDataSchema",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the data schema to delete. Format: ``projects/{project_number}/locations/{location_id}/corpora/{corpus_id}/dataSchemas/{data_schema_id}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_data_schemas",
          "description": "Lists a list of data schemas inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_data_schemas():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListDataSchemasRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_data_schemas(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of data schemas. Format: ``projects/{project_number}/locations/{location_id}/corpora/{corpus_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.warehouse.pagers.ListDataSchemasAsyncPager: Response message for ListDataSchemas.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.ListDataSchemasAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_annotation",
          "description": "Creates annotation inside asset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_annotation():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.CreateAnnotationRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_annotation(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.CreateAnnotationRequest, dict]])",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this annotation will be created. Format: ``projects/{project_number}/locations/{location_id}/corpora/{corpus_id}/assets/{asset_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "annotation": {
                "type": "google.cloud.visionai_v1.types.Annotation",
                "description": "Required. The annotation to create. This corresponds to the ``annotation`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "annotation_id": {
                "type": "str",
                "description": "Optional. The ID to use for the annotation, which will become the final component of the annotation's resource name if user choose to specify. Otherwise, annotation id will be generated by system.  This value should be up to 63 characters, and valid characters are /[a-z][0-9]-/. The first character must be a letter, the last could be a letter or a number.  This corresponds to the ``annotation_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Annotation: An annotation is a resource in asset. It represents a key-value mapping of content in asset."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "annotation",
              "annotation_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Annotation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_annotation",
          "description": "Reads annotation inside asset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_annotation():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetAnnotationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_annotation(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetAnnotationRequest, dict]]):\n        The requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the annotation to retrieve. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Annotation: An annotation is a resource in asset. It represents a key-value mapping of content in asset."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Annotation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_annotations",
          "description": "Lists a list of annotations inside asset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_annotations():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListAnnotationsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_annotations(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.ListAnnotationsRe",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The parent, which owns this collection of annotations. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.warehouse.pagers.ListAnnotationsAsyncPager: Request message for ListAnnotations API. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.ListAnnotationsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_annotation",
          "description": "Updates annotation inside asset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_annotation():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UpdateAnnotationRequest(\n        )\n\n        # Make the request\n        response = await client.update_annotation(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.UpdateAnnotationRequest, dict]]):\n        The request object. Reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "annotation": {
                "type": "google.cloud.visionai_v1.types.Annotation",
                "description": "Required. The annotation to update. The annotation's ``name`` field is used to identify the annotation to be updated. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}``  This corresponds to the ``annotation`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Annotation: An annotation is a resource in asset. It represents a key-value mapping of content in asset."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "annotation",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Annotation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_annotation",
          "description": "Deletes annotation inside asset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_annotation():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteAnnotationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_annotation(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.DeleteAnnotationRequest, dict]]):\n        The request object. Request message for DeleteAnnotation\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the annotation to delete. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "ingest_asset",
          "description": "Ingests data for the asset. It is not allowed to\ningest a data chunk which is already expired according\nto TTL. This method is only available via the gRPC API\n(not HTTP since bi-directional streaming is not\nsupported via HTTP).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_ingest_asset():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        config = visionai_v1.Config()\n        config.asset = \"asset_value\"\n\n        request = visionai_v1.IngestAssetRequest(\n            config=config,\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "requests": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "clip_asset",
          "description": "Supported by STREAM_VIDEO corpus type. Generates clips for\ndownloading. The api takes in a time range, and generates a clip\nof the first content available after start_time and before\nend_time, which may overflow beyond these bounds. Returned clips\nare truncated if the total size of the clips are larger than\n100MB.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_clip_asset():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ClipAssetRequest(\n            name=\"name_v",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.ClipAssetResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "generate_hls_uri",
          "description": "Generates a uri for an HLS manifest. The api takes in\na collection of time ranges, and generates a URI for an\nHLS manifest that covers all the requested time ranges.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_generate_hls_uri():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GenerateHlsUriRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.generate_hls_uri(request=request)\n\n        # Handle the respon",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.GenerateHlsUriResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "import_assets",
          "description": "Imports assets (images plus annotations) from a meta\nfile on cloud storage. Each row in the meta file is\ncorresponding to an image (specified by a cloud storage\nuri) and its annotations.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_import_assets():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ImportAssetsRequest(\n            assets_gcs_uri=\"assets_gcs_uri_value\",\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        operation = cli",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_search_config",
          "description": "Creates a search configuration inside a corpus.\n\nPlease follow the rules below to create a valid\nCreateSearchConfigRequest. --- General Rules ---\n\n1. Request.search_config_id must not be associated with an\n   existing SearchConfig.\n2. Request must contain at least one non-empty\n   search_criteria_property or facet_property.\n3. mapped_fields must not be empty, and must map to existing UGA\n   keys.\n4. All mapped_fields must be of the same type.\n5. All mapped_fields must share the same granularity.\n6. All mapped_fields must share the same semantic SearchConfig\n   match options. For property-specific rules, please reference\n   the comments for FacetProperty and SearchCriteriaProperty.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this search configuration will be created. Format: ``projects/{project_number}/locations/{location_id}/corpora/{corpus_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "search_config": {
                "type": "google.cloud.visionai_v1.types.SearchConfig",
                "description": "Required. The search config to create.  This corresponds to the ``search_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "search_config_id": {
                "type": "str",
                "description": "Required. ID to use for the new search config. Will become the final component of the SearchConfig's resource name. This value should be up to 63 characters, and valid characters are /[a-z][0-9]-_/. The first character must be a letter, the last could be a letter or a number.  This corresponds to the ``search_config_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.SearchConfig: SearchConfig stores different properties that will affect search behaviors and search results."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "search_config",
              "search_config_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.SearchConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_search_config",
          "description": "Updates a search configuration inside a corpus.\n\nPlease follow the rules below to create a valid\nUpdateSearchConfigRequest. --- General Rules ---\n\n1. Request.search_configuration.name must already exist.\n2. Request must contain at least one non-empty\n   search_criteria_property or facet_property.\n3. mapped_fields must not be empty, and must map to existing UGA\n   keys.\n4. All mapped_fields must be of the same type.\n5. All mapped_fields must share the same granularity.\n6. All mapped_fields must share the same semantic SearchConfig\n   match options. For property-specific rules, please reference\n   the comments for FacetProperty and SearchCriteriaProperty.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "search_config": {
                "type": "google.cloud.visionai_v1.types.SearchConfig",
                "description": "Required. The search configuration to update.  The search configuration's ``name`` field is used to identify the resource to be updated. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}``  This corresponds to the ``search_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. If left unset, all field paths will be updated/overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.SearchConfig: SearchConfig stores different properties that will affect search behaviors and search results."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "search_config",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.SearchConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_search_config",
          "description": "Gets a search configuration inside a corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_search_config():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetSearchConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_search_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetSearchConfigRequest, d",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the search configuration to retrieve. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.SearchConfig: SearchConfig stores different properties that will affect search behaviors and search results."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.SearchConfig"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_search_config",
          "description": "Deletes a search configuration inside a corpus.\n\nFor a DeleteSearchConfigRequest to be valid,\nRequest.search_configuration.name must already exist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_search_config():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteSearchConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_search_config(request=request)\n\nArgs:\n    request (Optional[Union[google.clo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the search configuration to delete. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_search_configs",
          "description": "Lists all search configurations inside a corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_search_configs():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListSearchConfigsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_search_configs(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Unio",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of search configurations. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.warehouse.pagers.ListSearchConfigsAsyncPager: Response message for ListSearchConfigs. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.ListSearchConfigsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_search_hypernym",
          "description": "Creates a SearchHypernym inside a corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_search_hypernym():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.CreateSearchHypernymRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_search_hypernym(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.CreateSea",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this SearchHypernym will be created. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "search_hypernym": {
                "type": "google.cloud.visionai_v1.types.SearchHypernym",
                "description": "Required. The SearchHypernym to create.  This corresponds to the ``search_hypernym`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "search_hypernym_id": {
                "type": "str",
                "description": "Optional. The search hypernym id. If omitted, a random UUID will be generated.  This corresponds to the ``search_hypernym_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.SearchHypernym: Search resource: SearchHypernym. For example, { hypernym: \"vehicle\" hyponyms: [\"sedan\", \"truck\"] } This means in SMART_SEARCH mode, searching for \"vehicle\" will also return results with \"sedan\" or \"truck\" as annotations."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "search_hypernym",
              "search_hypernym_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.SearchHypernym"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_search_hypernym",
          "description": "Updates a SearchHypernym inside a corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_search_hypernym():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UpdateSearchHypernymRequest(\n        )\n\n        # Make the request\n        response = await client.update_search_hypernym(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.UpdateSearchHypernymRequest, dict]]):\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "search_hypernym": {
                "type": "google.cloud.visionai_v1.types.SearchHypernym",
                "description": "Required. The SearchHypernym to update. The search hypernym's ``name`` field is used to identify the search hypernym to be updated. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/searchHypernyms/{search_hypernym}``  This corresponds to the ``search_hypernym`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. If left unset, all field paths will be updated/overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.SearchHypernym: Search resource: SearchHypernym. For example, { hypernym: \"vehicle\" hyponyms: [\"sedan\", \"truck\"] } This means in SMART_SEARCH mode, searching for \"vehicle\" will also return results with \"sedan\" or \"truck\" as annotations."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "search_hypernym",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.SearchHypernym"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_search_hypernym",
          "description": "Gets a SearchHypernym inside a corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_search_hypernym():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetSearchHypernymRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_search_hypernym(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetSearchHypernymRequest,",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the SearchHypernym to retrieve. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/searchHypernyms/{search_hypernym}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.SearchHypernym: Search resource: SearchHypernym. For example, { hypernym: \"vehicle\" hyponyms: [\"sedan\", \"truck\"] } This means in SMART_SEARCH mode, searching for \"vehicle\" will also return results with \"sedan\" or \"truck\" as annotations."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.SearchHypernym"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_search_hypernym",
          "description": "Deletes a SearchHypernym inside a corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_search_hypernym():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteSearchHypernymRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_search_hypernym(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.DeleteSearchHypernymRequest, dict]]):\n        The request object. Request messa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the SearchHypernym to delete. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/searchHypernyms/{search_hypernym}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_search_hypernyms",
          "description": "Lists SearchHypernyms inside a corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_search_hypernyms():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListSearchHypernymsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_search_hypernyms(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[go",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of SearchHypernyms. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.warehouse.pagers.ListSearchHypernymsAsyncPager: Response message for listing SearchHypernyms. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.ListSearchHypernymsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "search_assets",
          "description": "Search media asset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_search_assets():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.SearchAssetsRequest(\n            corpus=\"corpus_value\",\n        )\n\n        # Make the request\n        page_result = client.search_assets(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.SearchAssetsR",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.SearchAssetsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "search_index_endpoint",
          "description": "Search a deployed index endpoint (IMAGE corpus type\nonly).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_search_index_endpoint():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        image_query = visionai_v1.ImageQuery()\n        image_query.input_image = b'input_image_blob'\n\n        request = visionai_v1.SearchIndexEndpointRequest(\n            image_query=image_query,\n            index_endpoint=\"index_endpoint_value\",\n        )\n\n        # Make the request\n        page_result = client.sea",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.SearchIndexEndpointAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_index_endpoint",
          "description": "Creates an IndexEndpoint.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_index_endpoint():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.CreateIndexEndpointRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        operation = client.create_index_endpoint(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(respons",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Format: ``projects/{project}/locations/{location}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "index_endpoint": {
                "type": "google.cloud.visionai_v1.types.IndexEndpoint",
                "description": "Required. The resource being created. This corresponds to the ``index_endpoint`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "index_endpoint_id": {
                "type": "str",
                "description": "Optional. The ID to use for the IndexEndpoint, which will become the final component of the IndexEndpoint's resource name if the user specifies it. Otherwise, IndexEndpoint id will be autogenerated.  This value should be up to 63 characters, and valid characters are a-z, 0-9 and dash (-). The first character must be a letter, the last must be a letter or a number.  This corresponds to the ``index_endpoint_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.IndexEndpoint` Message representing IndexEndpoint resource. Indexes are deployed into it."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "index_endpoint",
              "index_endpoint_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_index_endpoint",
          "description": "Gets an IndexEndpoint.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_index_endpoint():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetIndexEndpointRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_index_endpoint(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetIndexEndpointRequest, dict]]):\n        Th",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the IndexEndpoint resource.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.IndexEndpoint: Message representing IndexEndpoint resource. Indexes are deployed into it."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.IndexEndpoint"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_index_endpoints",
          "description": "Lists all IndexEndpoints in a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_index_endpoints():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListIndexEndpointsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_index_endpoints(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[googl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Format: ``projects/{project}/locations/{location}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.warehouse.pagers.ListIndexEndpointsAsyncPager: Response message for ListIndexEndpoints. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.ListIndexEndpointsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_index_endpoint",
          "description": "Updates an IndexEndpoint.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_index_endpoint():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UpdateIndexEndpointRequest(\n        )\n\n        # Make the request\n        operation = client.update_index_endpoint(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Uni",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "index_endpoint": {
                "type": "google.cloud.visionai_v1.types.IndexEndpoint",
                "description": "Required. The resource being updated. This corresponds to the ``index_endpoint`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the IndexEndpoint resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field of the resource will be overwritten if it is in the mask. Empty field mask is not allowed. If the mask is \"*\", then this is a full replacement of the resource.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.IndexEndpoint` Message representing IndexEndpoint resource. Indexes are deployed into it."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "index_endpoint",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_index_endpoint",
          "description": "Deletes an IndexEndpoint.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_index_endpoint():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteIndexEndpointRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_index_endpoint(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "deploy_index",
          "description": "Deploys an Index to IndexEndpoint.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_deploy_index():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        deployed_index = visionai_v1.DeployedIndex()\n        deployed_index.index = \"index_value\"\n\n        request = visionai_v1.DeployIndexRequest(\n            index_endpoint=\"index_endpoint_value\",\n            deployed_index=deployed_index,\n        )\n\n        # Make the request\n        operation = client.deploy_index(request=request)\n\n        prin",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "undeploy_index",
          "description": "Undeploys an Index from IndexEndpoint.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_undeploy_index():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UndeployIndexRequest(\n            index_endpoint=\"index_endpoint_value\",\n        )\n\n        # Make the request\n        operation = client.undeploy_index(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        prin",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_collection",
          "description": "Creates a collection.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_create_collection():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.CreateCollectionRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        operation = client.create_collection(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this collection will be created. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "collection": {
                "type": "google.cloud.visionai_v1.types.Collection",
                "description": "Required. The collection resource to be created.  This corresponds to the ``collection`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "collection_id": {
                "type": "str",
                "description": "Optional. The ID to use for the collection, which will become the final component of the resource name if user choose to specify. Otherwise, collection id will be generated by system.  This value should be up to 55 characters, and valid characters are /[a-z][0-9]-/. The first character must be a letter, the last could be a letter or a number.  This corresponds to the ``collection_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1.types.Collection` A collection is a resource in a corpus. It serves as a container of references to original resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "collection",
              "collection_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_collection",
          "description": "Deletes a collection.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_delete_collection():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.DeleteCollectionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_collection(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the collection to delete. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/collections/{collection}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_collection",
          "description": "Gets a collection.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_get_collection():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.GetCollectionRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_collection(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.GetCollectionRequest, dict]]):\n        The request object. ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the collection to retrieve. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/collections/{collection}``  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Collection: A collection is a resource in a corpus. It serves as a container of references to original resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Collection"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_collection",
          "description": "Updates a collection.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_update_collection():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.UpdateCollectionRequest(\n        )\n\n        # Make the request\n        response = await client.update_collection(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1.types.UpdateCollectionRequest, dict]]):\n        The request object. Request message ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "collection": {
                "type": "google.cloud.visionai_v1.types.Collection",
                "description": "Required. The collection to update.  The collection's ``name`` field is used to identify the collection to be updated. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/collections/{collection}``  This corresponds to the ``collection`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated.  -  Unset ``update_mask`` or set ``update_mask`` to be a single \"*\" only will update all updatable fields with the value provided in ``collection``. -  To update ``display_name`` value to empty string, set it in the ``collection`` to empty string, and set ``update_mask`` with \"display_name\". Same applies to other updatable string fields in the ``collection``.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.Collection: A collection is a resource in a corpus. It serves as a container of references to original resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "collection",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.Collection"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_collections",
          "description": "Lists collections inside a corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_list_collections():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ListCollectionsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_collections(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visiona",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent corpus. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.warehouse.pagers.ListCollectionsAsyncPager: Response message for ListCollections.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.ListCollectionsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "add_collection_item",
          "description": "Adds an item into a Collection.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_add_collection_item():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        item = visionai_v1.CollectionItem()\n        item.collection = \"collection_value\"\n        item.type_ = \"ASSET\"\n        item.item_resource = \"item_resource_value\"\n\n        request = visionai_v1.AddCollectionItemRequest(\n            item=item,\n        )\n\n        # Make the request\n        response = await client.add_collection_item(request=",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "item": {
                "type": "google.cloud.visionai_v1.types.CollectionItem",
                "description": "Required. The item to be added. This corresponds to the ``item`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.AddCollectionItemResponse: Response message for AddCollectionItem."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "item",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.AddCollectionItemResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "remove_collection_item",
          "description": "Removes an item from a collection.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_remove_collection_item():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        item = visionai_v1.CollectionItem()\n        item.collection = \"collection_value\"\n        item.type_ = \"ASSET\"\n        item.item_resource = \"item_resource_value\"\n\n        request = visionai_v1.RemoveCollectionItemRequest(\n            item=item,\n        )\n\n        # Make the request\n        response = await client.remove_collection_i",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "item": {
                "type": "google.cloud.visionai_v1.types.CollectionItem",
                "description": "Required. The item to be removed. This corresponds to the ``item`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.types.RemoveCollectionItemResponse: Request message for RemoveCollectionItem."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "item",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.types.RemoveCollectionItemResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "view_collection_items",
          "description": "View items inside a collection.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1\n\n    async def sample_view_collection_items():\n        # Create a client\n        client = visionai_v1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1.ViewCollectionItemsRequest(\n            collection=\"collection_value\",\n        )\n\n        # Make the request\n        page_result = client.view_collection_items(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[g",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "collection": {
                "type": "str",
                "description": "Required. The collection to view. Format: ``projects/{project_number}/locations/{location}/corpora/{corpus}/collections/{collection}``  This corresponds to the ``collection`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1.services.warehouse.pagers.ViewCollectionItemsAsyncPager: Response message for ViewCollectionItems. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "collection",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.visionai_v1.services.warehouse.pagers.ViewCollectionItemsAsyncPager"
          ]
        }
      }
    ]
  }
}