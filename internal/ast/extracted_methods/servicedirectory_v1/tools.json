{
  "LookupService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "resolve_service",
          "description": "Returns a [service][google.cloud.servicedirectory.v1.Service]\nand its associated endpoints. Resolving a service is not\nconsidered an active developer method.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_resolve_service():\n        # Create a client\n        client = servicedirectory_v1.LookupServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.ResolveServiceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.resolve_service(request=request)\n\n        #",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.types.ResolveServiceResponse"
          ]
        }
      }
    ]
  },
  "RegistrationService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_namespace",
          "description": "Creates a namespace, and returns the new namespace.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_create_namespace():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.CreateNamespaceRequest(\n            parent=\"parent_value\",\n            namespace_id=\"namespace_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_namespace(request=request)\n\n        # Handle the response\n        print(response)\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the project and location the namespace will be created in.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "namespace": {
                "type": "google.cloud.servicedirectory_v1.types.Namespace",
                "description": "Required. A namespace with initial fields set.  This corresponds to the ``namespace`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "namespace_id": {
                "type": "str",
                "description": "Required. The Resource ID must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression ``[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?`` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.  This corresponds to the ``namespace_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.servicedirectory_v1.types.Namespace: A container for [services][google.cloud.servicedirectory.v1.Service]. Namespaces allow administrators to group services together and define permissions for a collection of services."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "namespace",
              "namespace_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.types.Namespace"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_namespaces",
          "description": "Lists all namespaces.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_list_namespaces():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.ListNamespacesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_namespaces(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[go",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the project and location whose namespaces you'd like to list.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.servicedirectory_v1.services.registration_service.pagers.ListNamespacesAsyncPager: The response message for [RegistrationService.ListNamespaces][google.cloud.servicedirectory.v1.RegistrationService.ListNamespaces].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.services.registration_service.pagers.ListNamespacesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_namespace",
          "description": "Gets a namespace.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_get_namespace():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.GetNamespaceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_namespace(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.servicedirectory_v1.types.GetNamespaceRequest, ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the namespace to retrieve.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.servicedirectory_v1.types.Namespace: A container for [services][google.cloud.servicedirectory.v1.Service]. Namespaces allow administrators to group services together and define permissions for a collection of services."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.types.Namespace"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_namespace",
          "description": "Updates a namespace.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_update_namespace():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.UpdateNamespaceRequest(\n        )\n\n        # Make the request\n        response = await client.update_namespace(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.servicedirectory_v1.types.UpdateNamespaceRequest, dict]]):\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "namespace": {
                "type": "google.cloud.servicedirectory_v1.types.Namespace",
                "description": "Required. The updated namespace. This corresponds to the ``namespace`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. List of fields to be updated in this request.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.servicedirectory_v1.types.Namespace: A container for [services][google.cloud.servicedirectory.v1.Service]. Namespaces allow administrators to group services together and define permissions for a collection of services."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "namespace",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.types.Namespace"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_namespace",
          "description": "Deletes a namespace. This also deletes all services\nand endpoints in the namespace.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_delete_namespace():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.DeleteNamespaceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_namespace(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.servicedirectory_v1.types.DeleteNamesp",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the namespace to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_service",
          "description": "Creates a service, and returns the new service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_create_service():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.CreateServiceRequest(\n            parent=\"parent_value\",\n            service_id=\"service_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_service(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the namespace this service will belong to.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "service": {
                "type": "google.cloud.servicedirectory_v1.types.Service",
                "description": "Required. A service  with initial fields set.  This corresponds to the ``service`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "service_id": {
                "type": "str",
                "description": "Required. The Resource ID must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression ``[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?`` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.  This corresponds to the ``service_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.servicedirectory_v1.types.Service: An individual service. A service contains a name and optional metadata. A service must exist before [endpoints][google.cloud.servicedirectory.v1.Endpoint] can be added to it."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "service",
              "service_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.types.Service"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_services",
          "description": "Lists all services belonging to a namespace.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_list_services():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.ListServicesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_services(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the namespace whose services you'd like to list.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.servicedirectory_v1.services.registration_service.pagers.ListServicesAsyncPager: The response message for [RegistrationService.ListServices][google.cloud.servicedirectory.v1.RegistrationService.ListServices].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.services.registration_service.pagers.ListServicesAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_service",
          "description": "Gets a service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_get_service():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.GetServiceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_service(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.servicedirectory_v1.types.GetServiceRequest, dict]]):\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the service to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.servicedirectory_v1.types.Service: An individual service. A service contains a name and optional metadata. A service must exist before [endpoints][google.cloud.servicedirectory.v1.Endpoint] can be added to it."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.types.Service"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_service",
          "description": "Updates a service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_update_service():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.UpdateServiceRequest(\n        )\n\n        # Make the request\n        response = await client.update_service(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.servicedirectory_v1.types.UpdateServiceRequest, dict]]):\n        The reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "service": {
                "type": "google.cloud.servicedirectory_v1.types.Service",
                "description": "Required. The updated service. This corresponds to the ``service`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. List of fields to be updated in this request.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.servicedirectory_v1.types.Service: An individual service. A service contains a name and optional metadata. A service must exist before [endpoints][google.cloud.servicedirectory.v1.Endpoint] can be added to it."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "service",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.types.Service"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_service",
          "description": "Deletes a service. This also deletes all endpoints\nassociated with the service.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_delete_service():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.DeleteServiceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_service(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.servicedirectory_v1.types.DeleteServiceRequest, ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the service to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_endpoint",
          "description": "Creates an endpoint, and returns the new endpoint.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_create_endpoint():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.CreateEndpointRequest(\n            parent=\"parent_value\",\n            endpoint_id=\"endpoint_id_value\",\n        )\n\n        # Make the request\n        response = await client.create_endpoint(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the service that this endpoint provides.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "endpoint": {
                "type": "google.cloud.servicedirectory_v1.types.Endpoint",
                "description": "Required. A endpoint with initial fields set.  This corresponds to the ``endpoint`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "endpoint_id": {
                "type": "str",
                "description": "Required. The Resource ID must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression ``[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?`` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.  This corresponds to the ``endpoint_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.servicedirectory_v1.types.Endpoint: An individual endpoint that provides a [service][google.cloud.servicedirectory.v1.Service]. The service must already exist to create an endpoint."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "endpoint",
              "endpoint_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.types.Endpoint"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_endpoints",
          "description": "Lists all endpoints.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_list_endpoints():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.ListEndpointsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_endpoints(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the service whose endpoints you'd like to list.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.servicedirectory_v1.services.registration_service.pagers.ListEndpointsAsyncPager: The response message for [RegistrationService.ListEndpoints][google.cloud.servicedirectory.v1.RegistrationService.ListEndpoints].  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.services.registration_service.pagers.ListEndpointsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_endpoint",
          "description": "Gets an endpoint.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_get_endpoint():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.GetEndpointRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_endpoint(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.servicedirectory_v1.types.GetEndpointRequest, dict",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the endpoint to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.servicedirectory_v1.types.Endpoint: An individual endpoint that provides a [service][google.cloud.servicedirectory.v1.Service]. The service must already exist to create an endpoint."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.types.Endpoint"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_endpoint",
          "description": "Updates an endpoint.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_update_endpoint():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.UpdateEndpointRequest(\n        )\n\n        # Make the request\n        response = await client.update_endpoint(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.servicedirectory_v1.types.UpdateEndpointRequest, dict]]):\n        The",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "endpoint": {
                "type": "google.cloud.servicedirectory_v1.types.Endpoint",
                "description": "Required. The updated endpoint. This corresponds to the ``endpoint`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. List of fields to be updated in this request.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.servicedirectory_v1.types.Endpoint: An individual endpoint that provides a [service][google.cloud.servicedirectory.v1.Service]. The service must already exist to create an endpoint."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "endpoint",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.servicedirectory_v1.types.Endpoint"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_endpoint",
          "description": "Deletes an endpoint.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n\n    async def sample_delete_endpoint():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = servicedirectory_v1.DeleteEndpointRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_endpoint(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.servicedirectory_v1.types.DeleteEndpointRequest, dict]]):\n        The request object. The request messag",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the endpoint to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_iam_policy",
          "description": "Gets the IAM Policy for a resource (namespace or\nservice only).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_get_iam_policy():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_policy_pb2.GetIamPolicyRequest(\n            resource=\"resource_value\",\n        )\n\n        # Make the request\n        response = await client.get_iam_policy(request=request)\n\n        # Handle the response\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "GetIamPolicyRequest"
          ],
          "response_types": [
            "google.iam.v1.policy_pb2.Policy"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "set_iam_policy",
          "description": "Sets the IAM Policy for a resource (namespace or\nservice only).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_set_iam_policy():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_policy_pb2.SetIamPolicyRequest(\n            resource=\"resource_value\",\n        )\n\n        # Make the request\n        response = await client.set_iam_policy(request=request)\n\n        # Handle the response\n       ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "SetIamPolicyRequest"
          ],
          "response_types": [
            "google.iam.v1.policy_pb2.Policy"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "test_iam_permissions",
          "description": "Tests IAM permissions for a resource (namespace or\nservice only).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import servicedirectory_v1\n    from google.iam.v1 import iam_policy_pb2  # type: ignore\n\n    async def sample_test_iam_permissions():\n        # Create a client\n        client = servicedirectory_v1.RegistrationServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = iam_policy_pb2.TestIamPermissionsRequest(\n            resource=\"resource_value\",\n            permissions=['permissions_value1', 'permissions_value2'],\n        )\n\n        # Make the request\n        response =",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "TestIamPermissionsRequest"
          ],
          "response_types": [
            "google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse"
          ]
        }
      }
    ]
  }
}