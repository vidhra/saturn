{
  "VpcAccessService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_connector",
          "description": "Creates a Serverless VPC Access connector, returns an\noperation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import vpcaccess_v1\n\n    async def sample_create_connector():\n        # Create a client\n        client = vpcaccess_v1.VpcAccessServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = vpcaccess_v1.CreateConnectorRequest(\n            parent=\"parent_value\",\n            connector_id=\"connector_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_connector(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The project and location in which the configuration should be created, specified in the format ``projects/*/locations/*``.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "connector_id": {
                "type": "str",
                "description": "Required. The ID to use for this connector.  This corresponds to the ``connector_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "connector": {
                "type": "google.cloud.vpcaccess_v1.types.Connector",
                "description": "Required. Resource to create. This corresponds to the ``connector`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.vpcaccess_v1.types.Connector` Definition of a Serverless VPC Access connector."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "connector_id",
              "connector",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_connector",
          "description": "Gets a Serverless VPC Access connector. Returns NOT_FOUND if the\nresource does not exist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import vpcaccess_v1\n\n    async def sample_get_connector():\n        # Create a client\n        client = vpcaccess_v1.VpcAccessServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = vpcaccess_v1.GetConnectorRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_connector(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of a Serverless VPC Access connector to get.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.vpcaccess_v1.types.Connector: Definition of a Serverless VPC Access connector."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.vpcaccess_v1.types.Connector"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_connectors",
          "description": "Lists Serverless VPC Access connectors.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import vpcaccess_v1\n\n    async def sample_list_connectors():\n        # Create a client\n        client = vpcaccess_v1.VpcAccessServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = vpcaccess_v1.ListConnectorsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_connectors(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.c",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The project and location from which the routes should be listed.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.vpcaccess_v1.services.vpc_access_service.pagers.ListConnectorsAsyncPager: Response for listing Serverless VPC Access connectors. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.cloud.vpcaccess_v1.services.vpc_access_service.pagers.ListConnectorsAsyncPager"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_connector",
          "description": "Deletes a Serverless VPC Access connector. Returns NOT_FOUND if\nthe resource does not exist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import vpcaccess_v1\n\n    async def sample_delete_connector():\n        # Create a client\n        client = vpcaccess_v1.VpcAccessServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = vpcaccess_v1.DeleteConnectorRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_connector(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).re",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of a Serverless VPC Access connector to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.api_core.operation_async.AsyncOperation"
          ]
        }
      }
    ]
  }
}