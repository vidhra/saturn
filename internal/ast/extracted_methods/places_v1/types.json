{
  "\\Users\\AMD\\vidhra\\internal\\ast\\google-cloud-python\\packages\\google-maps-places\\google\\maps\\places_v1\\types\\places_service.py": [
    {
      "type": "function",
      "name": "SearchNearbyRequest",
      "description": "Request proto for Search Nearby.\n\nAttributes:\n    language_code (str):\n        Place details will be displayed with the\n        preferred language if available. If the language\n        code is unspecified or unrecognized, place\n        details of any language may be returned, with a\n        preference for English if such details exist.\n\n        Current list of supported languages:\n\n        https://developers.google.com/maps/faq#languagesupport.\n    region_code (str):\n        The Unicode country/region code (CLDR) of the location where\n        the request is coming from. This parameter is used to\n        display the place details, like region-specific place name,\n        if available. The parameter can affect results based on\n        applicable law.\n\n        For more information, see\n        https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html.\n\n        Note that 3-digit region codes are not currently supported.\n    included_types (MutableSequence[str]):\n        Included ",
      "parameters": {
        "type": "object",
        "properties": {
          "language_code": {
            "description": "Place details will be displayed with the preferred language if available. If the language code is unspecified or unrecognized, place details of any language may be returned, with a preference for English if such details exist.  Current list of supported languages:  https://developers.google.com/maps/faq#languagesupport.",
            "type": "string"
          },
          "region_code": {
            "description": "The Unicode country/region code (CLDR) of the location where the request is coming from. This parameter is used to display the place details, like region-specific place name, if available. The parameter can affect results based on applicable law.  For more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html.  Note that 3-digit region codes are not currently supported.",
            "type": "string"
          },
          "included_types": {
            "description": "Included Place type (eg, \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types.  Up to 50 types from `Table A <https://developers.google.com/maps/documentation/places/web-service/place-types#table-a>`__ may be specified.  If there are any conflicting types, i.e. a type appears in both included_types and excluded_types, an INVALID_ARGUMENT error is returned.  If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excluded_types": {
            "description": "Excluded Place type (eg, \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types.  Up to 50 types from `Table A <https://developers.google.com/maps/documentation/places/web-service/place-types#table-a>`__ may be specified.  If the client provides both included_types (e.g. restaurant) and excluded_types (e.g. cafe), then the response should include places that are restaurant but not cafe. The response includes places that match at least one of the included_types and none of the excluded_types.  If there are any conflicting types, i.e. a type appears in both included_types and excluded_types, an INVALID_ARGUMENT error is returned.  If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "included_primary_types": {
            "description": "Included primary Place type (e.g. \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. A place can only have a single primary type from the supported types table associated with it.  Up to 50 types from `Table A <https://developers.google.com/maps/documentation/places/web-service/place-types#table-a>`__ may be specified.  If there are any conflicting primary types, i.e. a type appears in both included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error is returned.  If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excluded_primary_types": {
            "description": "Excluded primary Place type (e.g. \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types.  Up to 50 types from `Table A <https://developers.google.com/maps/documentation/places/web-service/place-types#table-a>`__ may be specified.  If there are any conflicting primary types, i.e. a type appears in both included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error is returned.  If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "max_result_count": {
            "description": "Maximum number of results to return. It must be between 1 and 20 (default), inclusively. If the number is unset, it falls back to the upper limit. If the number is set to negative or exceeds the upper limit, an INVALID_ARGUMENT error is returned.",
            "type": "integer"
          },
          "location_restriction": {
            "description": "Required. The region to search.",
            "type": "object",
            "properties": {
              "rectangle": {
                "type": "object",
                "properties": {
                  "low": {
                    "description": "Required. The low point of the viewport.",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  },
                  "high": {
                    "description": "Required. The high point of the viewport.",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  }
                },
                "required": [
                  "low",
                  "high"
                ]
              },
              "circle": {
                "type": "object",
                "properties": {
                  "center": {
                    "description": "Required. Center latitude and longitude.  The range of latitude must be within [-90.0, 90.0]. The range of the longitude must be within [-180.0, 180.0].",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  },
                  "radius": {
                    "description": "Required. Radius measured in meters. The radius must be within [0.0, 50000.0].",
                    "type": "number"
                  }
                },
                "required": [
                  "center",
                  "radius"
                ]
              }
            }
          },
          "rank_preference": {
            "description": "How results will be ranked in the response.\n\nValues:\n    RANK_PREFERENCE_UNSPECIFIED (0):\n        For a categorical query such as \"Restaurants\n        in New York City\", RELEVANCE is the default. For\n        non-categorical queries such as \"Mountain View,\n        CA\" we recommend that you leave rankPreference\n        unset.\n    DISTANCE (1):\n        Ranks results by distance.\n    RELEVANCE (2):\n        Ranks results by relevance. Sort order\n        determined by normal ranking stack.",
            "type": "enum",
            "name": "RankPreference",
            "values": {
              "RANK_PREFERENCE_UNSPECIFIED": {
                "value": 0
              },
              "DISTANCE": {
                "value": 1
              },
              "RELEVANCE": {
                "value": 2
              }
            }
          },
          "routing_parameters": {
            "description": "Optional. Parameters that affect the routing to the search results.",
            "type": "object",
            "properties": {
              "origin": {
                "description": "Optional. An explicit routing origin that overrides the origin defined in the polyline. By default, the polyline origin is used.",
                "type": "object",
                "reference": "google.type.latlng_pb2.LatLng"
              },
              "travel_mode": {
                "type": "enum",
                "name": "TravelMode",
                "description": "Travel modes which can be used by vehicles.\n\nThese should be a subset of the Google Maps Platform Routes\nPreferred API travel modes, see:\nhttps://developers.google.com/maps/documentation/routes_preferred/reference/rest/Shared.Types/RouteTravelMode.\n\nValues:\n    TRAVEL_MODE_UNSPECIFIED (0):\n        Unspecified travel mode, equivalent to ``DRIVING``.\n    DRIVING (1):\n        Travel mode corresponding to driving\n        directions (car, ...).\n    WALKING (2):\n        Travel mode corresponding to walking\n        directions.",
                "values": {
                  "TRAVEL_MODE_UNSPECIFIED": {
                    "value": 0
                  },
                  "DRIVING": {
                    "value": 1
                  },
                  "WALKING": {
                    "value": 2
                  }
                }
              },
              "route_modifiers": {
                "type": "object",
                "properties": {
                  "avoid_tolls": {
                    "description": "When set to true, avoids toll roads where reasonable, giving preference to routes not containing toll roads. Applies only to the ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                    "type": "boolean"
                  },
                  "avoid_highways": {
                    "description": "When set to true, avoids highways where reasonable, giving preference to routes not containing highways. Applies only to the ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                    "type": "boolean"
                  },
                  "avoid_ferries": {
                    "description": "When set to true, avoids ferries where reasonable, giving preference to routes not containing ferries. Applies only to the ``DRIVE`` and\\ ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                    "type": "boolean"
                  },
                  "avoid_indoor": {
                    "description": "When set to true, avoids navigating indoors where reasonable, giving preference to routes not containing indoor navigation. Applies only to the ``WALK`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                    "type": "boolean"
                  },
                  "vehicle_info": {
                    "type": "object",
                    "properties": {
                      "emission_type": {
                        "type": "enum",
                        "name": "VehicleEmissionType",
                        "description": "A set of values describing the vehicle's emission type. Applies only\nto the ``DRIVE``\n[``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].\n\nValues:\n    VEHICLE_EMISSION_TYPE_UNSPECIFIED (0):\n        No emission type specified. Default to ``GASOLINE``.\n    GASOLINE (1):\n        Gasoline/petrol fueled vehicle.\n    ELECTRIC (2):\n        Electricity powered vehicle.\n    HYBRID (3):\n        Hybrid fuel (such as gasoline + electric)\n        vehicle.\n    DIESEL (4):\n        Diesel fueled vehicle.",
                        "values": {
                          "VEHICLE_EMISSION_TYPE_UNSPECIFIED": {
                            "value": 0
                          },
                          "GASOLINE": {
                            "value": 1
                          },
                          "ELECTRIC": {
                            "value": 2
                          },
                          "HYBRID": {
                            "value": 3
                          },
                          "DIESEL": {
                            "value": 4
                          }
                        }
                      }
                    }
                  },
                  "toll_passes": {
                    "description": "Encapsulates information about toll passes. If toll passes are provided, the API tries to return the pass price. If toll passes are not provided, the API treats the toll pass as unknown and tries to return the cash price. Applies only to the ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                    "type": "array",
                    "items": {
                      "type": "enum",
                      "name": "TollPass",
                      "description": "List of toll passes around the world that we support.\n\nValues:\n    TOLL_PASS_UNSPECIFIED (0):\n        Not used. If this value is used, then the\n        request fails.\n    AU_ETOLL_TAG (82):\n        Sydney toll pass. See additional details at\n        https://www.myetoll.com.au.\n    AU_EWAY_TAG (83):\n        Sydney toll pass. See additional details at\n        https://www.tollpay.com.au.\n    AU_LINKT (2):\n        Australia-wide toll pass.\n        See additional details at\n        https://www.linkt.com.au/.\n    AR_TELEPASE (3):\n        Argentina toll pass. See additional details\n        at https://telepase.com.ar\n    BR_AUTO_EXPRESO (81):\n        Brazil toll pass. See additional details at\n        https://www.autoexpreso.com\n    BR_CONECTCAR (7):\n        Brazil toll pass. See additional details at\n        https://conectcar.com.\n    BR_MOVE_MAIS (8):\n        Brazil toll pass. See additional details at\n        https://movemais.com.\n    BR_PASSA_RAPIDO (88):\n        Brazil toll pass. See additional details at\n      ",
                      "values": {
                        "TOLL_PASS_UNSPECIFIED": {
                          "value": 0
                        },
                        "AU_ETOLL_TAG": {
                          "value": 82
                        },
                        "AU_EWAY_TAG": {
                          "value": 83
                        },
                        "AU_LINKT": {
                          "value": 2
                        },
                        "AR_TELEPASE": {
                          "value": 3
                        },
                        "BR_AUTO_EXPRESO": {
                          "value": 81
                        },
                        "BR_CONECTCAR": {
                          "value": 7
                        },
                        "BR_MOVE_MAIS": {
                          "value": 8
                        },
                        "BR_PASSA_RAPIDO": {
                          "value": 88
                        },
                        "BR_SEM_PARAR": {
                          "value": 9
                        },
                        "BR_TAGGY": {
                          "value": 10
                        },
                        "BR_VELOE": {
                          "value": 11
                        },
                        "CA_US_AKWASASNE_SEAWAY_CORPORATE_CARD": {
                          "value": 84
                        },
                        "CA_US_AKWASASNE_SEAWAY_TRANSIT_CARD": {
                          "value": 85
                        },
                        "CA_US_BLUE_WATER_EDGE_PASS": {
                          "value": 18
                        },
                        "CA_US_CONNEXION": {
                          "value": 19
                        },
                        "CA_US_NEXUS_CARD": {
                          "value": 20
                        },
                        "ID_E_TOLL": {
                          "value": 16
                        },
                        "IN_FASTAG": {
                          "value": 78
                        },
                        "IN_LOCAL_HP_PLATE_EXEMPT": {
                          "value": 79
                        },
                        "JP_ETC": {
                          "value": 98
                        },
                        "JP_ETC2": {
                          "value": 99
                        },
                        "MX_IAVE": {
                          "value": 90
                        },
                        "MX_PASE": {
                          "value": 91
                        },
                        "MX_QUICKPASS": {
                          "value": 93
                        },
                        "MX_SISTEMA_TELEPEAJE_CHIHUAHUA": {
                          "value": 89
                        },
                        "MX_TAG_IAVE": {
                          "value": 12
                        },
                        "MX_TAG_TELEVIA": {
                          "value": 13
                        },
                        "MX_TELEVIA": {
                          "value": 92
                        },
                        "MX_VIAPASS": {
                          "value": 14
                        },
                        "US_AL_FREEDOM_PASS": {
                          "value": 21
                        },
                        "US_AK_ANTON_ANDERSON_TUNNEL_BOOK_OF_10_TICKETS": {
                          "value": 22
                        },
                        "US_CA_FASTRAK": {
                          "value": 4
                        },
                        "US_CA_FASTRAK_CAV_STICKER": {
                          "value": 86
                        },
                        "US_CO_EXPRESSTOLL": {
                          "value": 23
                        },
                        "US_CO_GO_PASS": {
                          "value": 24
                        },
                        "US_DE_EZPASSDE": {
                          "value": 25
                        },
                        "US_FL_BOB_SIKES_TOLL_BRIDGE_PASS": {
                          "value": 65
                        },
                        "US_FL_DUNES_COMMUNITY_DEVELOPMENT_DISTRICT_EXPRESSCARD": {
                          "value": 66
                        },
                        "US_FL_EPASS": {
                          "value": 67
                        },
                        "US_FL_GIBA_TOLL_PASS": {
                          "value": 68
                        },
                        "US_FL_LEEWAY": {
                          "value": 69
                        },
                        "US_FL_SUNPASS": {
                          "value": 70
                        },
                        "US_FL_SUNPASS_PRO": {
                          "value": 71
                        },
                        "US_IL_EZPASSIL": {
                          "value": 73
                        },
                        "US_IL_IPASS": {
                          "value": 72
                        },
                        "US_IN_EZPASSIN": {
                          "value": 26
                        },
                        "US_KS_BESTPASS_HORIZON": {
                          "value": 27
                        },
                        "US_KS_KTAG": {
                          "value": 28
                        },
                        "US_KS_NATIONALPASS": {
                          "value": 29
                        },
                        "US_KS_PREPASS_ELITEPASS": {
                          "value": 30
                        },
                        "US_KY_RIVERLINK": {
                          "value": 31
                        },
                        "US_LA_GEAUXPASS": {
                          "value": 32
                        },
                        "US_LA_TOLL_TAG": {
                          "value": 33
                        },
                        "US_MA_EZPASSMA": {
                          "value": 6
                        },
                        "US_MD_EZPASSMD": {
                          "value": 34
                        },
                        "US_ME_EZPASSME": {
                          "value": 35
                        },
                        "US_MI_AMBASSADOR_BRIDGE_PREMIER_COMMUTER_CARD": {
                          "value": 36
                        },
                        "US_MI_BCPASS": {
                          "value": 94
                        },
                        "US_MI_GROSSE_ILE_TOLL_BRIDGE_PASS_TAG": {
                          "value": 37
                        },
                        "US_MI_IQ_PROX_CARD": {
                          "value": 38
                        },
                        "US_MI_IQ_TAG": {
                          "value": 95
                        },
                        "US_MI_MACKINAC_BRIDGE_MAC_PASS": {
                          "value": 39
                        },
                        "US_MI_NEXPRESS_TOLL": {
                          "value": 40
                        },
                        "US_MN_EZPASSMN": {
                          "value": 41
                        },
                        "US_NC_EZPASSNC": {
                          "value": 42
                        },
                        "US_NC_PEACH_PASS": {
                          "value": 87
                        },
                        "US_NC_QUICK_PASS": {
                          "value": 43
                        },
                        "US_NH_EZPASSNH": {
                          "value": 80
                        },
                        "US_NJ_DOWNBEACH_EXPRESS_PASS": {
                          "value": 75
                        },
                        "US_NJ_EZPASSNJ": {
                          "value": 74
                        },
                        "US_NY_EXPRESSPASS": {
                          "value": 76
                        },
                        "US_NY_EZPASSNY": {
                          "value": 77
                        },
                        "US_OH_EZPASSOH": {
                          "value": 44
                        },
                        "US_PA_EZPASSPA": {
                          "value": 45
                        },
                        "US_RI_EZPASSRI": {
                          "value": 46
                        },
                        "US_SC_PALPASS": {
                          "value": 47
                        },
                        "US_TX_AVI_TAG": {
                          "value": 97
                        },
                        "US_TX_BANCPASS": {
                          "value": 48
                        },
                        "US_TX_DEL_RIO_PASS": {
                          "value": 49
                        },
                        "US_TX_EFAST_PASS": {
                          "value": 50
                        },
                        "US_TX_EAGLE_PASS_EXPRESS_CARD": {
                          "value": 51
                        },
                        "US_TX_EPTOLL": {
                          "value": 52
                        },
                        "US_TX_EZ_CROSS": {
                          "value": 53
                        },
                        "US_TX_EZTAG": {
                          "value": 54
                        },
                        "US_TX_FUEGO_TAG": {
                          "value": 96
                        },
                        "US_TX_LAREDO_TRADE_TAG": {
                          "value": 55
                        },
                        "US_TX_PLUSPASS": {
                          "value": 56
                        },
                        "US_TX_TOLLTAG": {
                          "value": 57
                        },
                        "US_TX_TXTAG": {
                          "value": 58
                        },
                        "US_TX_XPRESS_CARD": {
                          "value": 59
                        },
                        "US_UT_ADAMS_AVE_PARKWAY_EXPRESSCARD": {
                          "value": 60
                        },
                        "US_VA_EZPASSVA": {
                          "value": 61
                        },
                        "US_WA_BREEZEBY": {
                          "value": 17
                        },
                        "US_WA_GOOD_TO_GO": {
                          "value": 1
                        },
                        "US_WV_EZPASSWV": {
                          "value": 62
                        },
                        "US_WV_MEMORIAL_BRIDGE_TICKETS": {
                          "value": 63
                        },
                        "US_WV_MOV_PASS": {
                          "value": 100
                        },
                        "US_WV_NEWELL_TOLL_BRIDGE_TICKET": {
                          "value": 64
                        }
                      }
                    }
                  }
                }
              },
              "routing_preference": {
                "type": "enum",
                "name": "RoutingPreference",
                "description": "A set of values that specify factors to take into\nconsideration when calculating the route.\n\nValues:\n    ROUTING_PREFERENCE_UNSPECIFIED (0):\n        No routing preference specified. Default to\n        ``TRAFFIC_UNAWARE``.\n    TRAFFIC_UNAWARE (1):\n        Computes routes without taking live traffic conditions into\n        consideration. Suitable when traffic conditions don't matter\n        or are not applicable. Using this value produces the lowest\n        latency. Note: For\n        [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode]\n        ``DRIVE`` and ``TWO_WHEELER``, the route and duration chosen\n        are based on road network and average time-independent\n        traffic conditions, not current road conditions.\n        Consequently, routes may include roads that are temporarily\n        closed. Results for a given request may vary over time due\n        to changes in the road network, updated average traffic\n        conditions, and the distributed nature of the service.\n        Results may also",
                "values": {
                  "ROUTING_PREFERENCE_UNSPECIFIED": {
                    "value": 0
                  },
                  "TRAFFIC_UNAWARE": {
                    "value": 1
                  },
                  "TRAFFIC_AWARE": {
                    "value": 2
                  },
                  "TRAFFIC_AWARE_OPTIMAL": {
                    "value": 3
                  }
                }
              }
            }
          }
        },
        "required": [
          "location_restriction"
        ]
      }
    },
    {
      "type": "function",
      "name": "SearchTextRequest",
      "description": "Request proto for SearchText.\n\nAttributes:\n    text_query (str):\n        Required. The text query for textual search.\n    language_code (str):\n        Place details will be displayed with the\n        preferred language if available. If the language\n        code is unspecified or unrecognized, place\n        details of any language may be returned, with a\n        preference for English if such details exist.\n\n        Current list of supported languages:\n\n        https://developers.google.com/maps/faq#languagesupport.\n    region_code (str):\n        The Unicode country/region code (CLDR) of the location where\n        the request is coming from. This parameter is used to\n        display the place details, like region-specific place name,\n        if available. The parameter can affect results based on\n        applicable law.\n\n        For more information, see\n        https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html.\n\n        Note that 3-digit region codes are not currently",
      "parameters": {
        "type": "object",
        "properties": {
          "text_query": {
            "description": "Required. The text query for textual search.",
            "type": "string"
          },
          "language_code": {
            "description": "Place details will be displayed with the preferred language if available. If the language code is unspecified or unrecognized, place details of any language may be returned, with a preference for English if such details exist.  Current list of supported languages:  https://developers.google.com/maps/faq#languagesupport.",
            "type": "string"
          },
          "region_code": {
            "description": "The Unicode country/region code (CLDR) of the location where the request is coming from. This parameter is used to display the place details, like region-specific place name, if available. The parameter can affect results based on applicable law.  For more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html.  Note that 3-digit region codes are not currently supported.",
            "type": "string"
          },
          "rank_preference": {
            "description": "How results will be ranked in the response.\n\nValues:\n    RANK_PREFERENCE_UNSPECIFIED (0):\n        For a categorical query such as \"Restaurants\n        in New York City\", RELEVANCE is the default. For\n        non-categorical queries such as \"Mountain View,\n        CA\" we recommend that you leave rankPreference\n        unset.\n    DISTANCE (1):\n        Ranks results by distance.\n    RELEVANCE (2):\n        Ranks results by relevance. Sort order\n        determined by normal ranking stack.",
            "type": "enum",
            "name": "RankPreference",
            "values": {
              "RANK_PREFERENCE_UNSPECIFIED": {
                "value": 0
              },
              "DISTANCE": {
                "value": 1
              },
              "RELEVANCE": {
                "value": 2
              }
            }
          },
          "included_type": {
            "description": "The requested place type. Full list of types supported: https://developers.google.com/maps/documentation/places/web-service/place-types. Only support one included type.",
            "type": "string"
          },
          "open_now": {
            "description": "Used to restrict the search to places that are currently open.  The default is false.",
            "type": "boolean"
          },
          "min_rating": {
            "description": "Filter out results whose average user rating is strictly less than this limit. A valid value must be a float between 0 and 5 (inclusively) at a 0.5 cadence i.e. [0, 0.5, 1.0, ... , 5.0] inclusively. The input rating will round up to the nearest 0.5(ceiling). For instance, a rating of 0.6 will eliminate all results with a less than 1.0 rating.",
            "type": "number"
          },
          "max_result_count": {
            "description": "Maximum number of results to return. It must be between 1 and 20, inclusively. The default is 20. If the number is unset, it falls back to the upper limit. If the number is set to negative or exceeds the upper limit, an INVALID_ARGUMENT error is returned.",
            "type": "integer"
          },
          "price_levels": {
            "description": "Used to restrict the search to places that are marked as certain price levels. Users can choose any combinations of price levels. Default to select all price levels.",
            "type": "array",
            "items": {
              "type": "enum",
              "name": "PriceLevel",
              "description": "Price level of the place.\n\nValues:\n    PRICE_LEVEL_UNSPECIFIED (0):\n        Place price level is unspecified or unknown.\n    PRICE_LEVEL_FREE (1):\n        Place provides free services.\n    PRICE_LEVEL_INEXPENSIVE (2):\n        Place provides inexpensive services.\n    PRICE_LEVEL_MODERATE (3):\n        Place provides moderately priced services.\n    PRICE_LEVEL_EXPENSIVE (4):\n        Place provides expensive services.\n    PRICE_LEVEL_VERY_EXPENSIVE (5):\n        Place provides very expensive services.",
              "values": {
                "PRICE_LEVEL_UNSPECIFIED": {
                  "value": 0
                },
                "PRICE_LEVEL_FREE": {
                  "value": 1
                },
                "PRICE_LEVEL_INEXPENSIVE": {
                  "value": 2
                },
                "PRICE_LEVEL_MODERATE": {
                  "value": 3
                },
                "PRICE_LEVEL_EXPENSIVE": {
                  "value": 4
                },
                "PRICE_LEVEL_VERY_EXPENSIVE": {
                  "value": 5
                }
              }
            }
          },
          "strict_type_filtering": {
            "description": "Used to set strict type filtering for included_type. If set to true, only results of the same type will be returned. Default to false.",
            "type": "boolean"
          },
          "location_bias": {
            "description": "The region to search. This location serves as a bias which means results around given location might be returned. Cannot be set along with location_restriction.",
            "type": "object",
            "properties": {
              "rectangle": {
                "type": "object",
                "properties": {
                  "low": {
                    "description": "Required. The low point of the viewport.",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  },
                  "high": {
                    "description": "Required. The high point of the viewport.",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  }
                },
                "required": [
                  "low",
                  "high"
                ]
              },
              "circle": {
                "type": "object",
                "properties": {
                  "center": {
                    "description": "Required. Center latitude and longitude.  The range of latitude must be within [-90.0, 90.0]. The range of the longitude must be within [-180.0, 180.0].",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  },
                  "radius": {
                    "description": "Required. Radius measured in meters. The radius must be within [0.0, 50000.0].",
                    "type": "number"
                  }
                },
                "required": [
                  "center",
                  "radius"
                ]
              }
            }
          },
          "location_restriction": {
            "description": "The region to search. This location serves as a restriction which means results outside given location will not be returned. Cannot be set along with location_bias.",
            "type": "object",
            "properties": {
              "rectangle": {
                "type": "object",
                "properties": {
                  "low": {
                    "description": "Required. The low point of the viewport.",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  },
                  "high": {
                    "description": "Required. The high point of the viewport.",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  }
                },
                "required": [
                  "low",
                  "high"
                ]
              },
              "circle": {
                "type": "object",
                "properties": {
                  "center": {
                    "description": "Required. Center latitude and longitude.  The range of latitude must be within [-90.0, 90.0]. The range of the longitude must be within [-180.0, 180.0].",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  },
                  "radius": {
                    "description": "Required. Radius measured in meters. The radius must be within [0.0, 50000.0].",
                    "type": "number"
                  }
                },
                "required": [
                  "center",
                  "radius"
                ]
              }
            }
          },
          "ev_options": {
            "description": "Optional. Set the searchable EV options of a place search request.",
            "type": "object",
            "properties": {
              "minimum_charging_rate_kw": {
                "description": "Optional. Minimum required charging rate in kilowatts. A place with a charging rate less than the specified rate is filtered out.",
                "type": "number"
              },
              "connector_types": {
                "description": "Optional. The list of preferred EV connector types. A place that does not support any of the listed connector types is filtered out.",
                "type": "array",
                "items": {
                  "type": "enum",
                  "name": "EVConnectorType",
                  "description": "See\nhttp://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6872107 for\nadditional information/context on EV charging connector types.\n\nValues:\n    EV_CONNECTOR_TYPE_UNSPECIFIED (0):\n        Unspecified connector.\n    EV_CONNECTOR_TYPE_OTHER (1):\n        Other connector types.\n    EV_CONNECTOR_TYPE_J1772 (2):\n        J1772 type 1 connector.\n    EV_CONNECTOR_TYPE_TYPE_2 (3):\n        IEC 62196 type 2 connector. Often referred to\n        as MENNEKES.\n    EV_CONNECTOR_TYPE_CHADEMO (4):\n        CHAdeMO type connector.\n    EV_CONNECTOR_TYPE_CCS_COMBO_1 (5):\n        Combined Charging System (AC and DC). Based\n        on SAE.  Type-1 J-1772 connector\n    EV_CONNECTOR_TYPE_CCS_COMBO_2 (6):\n        Combined Charging System (AC and DC). Based\n        on Type-2 Mennekes connector\n    EV_CONNECTOR_TYPE_TESLA (7):\n        The generic TESLA connector. This is NACS in\n        the North America but can be non-NACS in other\n        parts of the world (e.g. CCS Combo 2 (CCS2) or\n        GB/T). This value is less representative of a",
                  "values": {
                    "EV_CONNECTOR_TYPE_UNSPECIFIED": {
                      "value": 0
                    },
                    "EV_CONNECTOR_TYPE_OTHER": {
                      "value": 1
                    },
                    "EV_CONNECTOR_TYPE_J1772": {
                      "value": 2
                    },
                    "EV_CONNECTOR_TYPE_TYPE_2": {
                      "value": 3
                    },
                    "EV_CONNECTOR_TYPE_CHADEMO": {
                      "value": 4
                    },
                    "EV_CONNECTOR_TYPE_CCS_COMBO_1": {
                      "value": 5
                    },
                    "EV_CONNECTOR_TYPE_CCS_COMBO_2": {
                      "value": 6
                    },
                    "EV_CONNECTOR_TYPE_TESLA": {
                      "value": 7
                    },
                    "EV_CONNECTOR_TYPE_UNSPECIFIED_GB_T": {
                      "value": 8
                    },
                    "EV_CONNECTOR_TYPE_UNSPECIFIED_WALL_OUTLET": {
                      "value": 9
                    }
                  }
                }
              }
            }
          },
          "routing_parameters": {
            "description": "Optional. Additional parameters for routing to results.",
            "type": "object",
            "properties": {
              "origin": {
                "description": "Optional. An explicit routing origin that overrides the origin defined in the polyline. By default, the polyline origin is used.",
                "type": "object",
                "reference": "google.type.latlng_pb2.LatLng"
              },
              "travel_mode": {
                "type": "enum",
                "name": "TravelMode",
                "description": "Travel modes which can be used by vehicles.\n\nThese should be a subset of the Google Maps Platform Routes\nPreferred API travel modes, see:\nhttps://developers.google.com/maps/documentation/routes_preferred/reference/rest/Shared.Types/RouteTravelMode.\n\nValues:\n    TRAVEL_MODE_UNSPECIFIED (0):\n        Unspecified travel mode, equivalent to ``DRIVING``.\n    DRIVING (1):\n        Travel mode corresponding to driving\n        directions (car, ...).\n    WALKING (2):\n        Travel mode corresponding to walking\n        directions.",
                "values": {
                  "TRAVEL_MODE_UNSPECIFIED": {
                    "value": 0
                  },
                  "DRIVING": {
                    "value": 1
                  },
                  "WALKING": {
                    "value": 2
                  }
                }
              },
              "route_modifiers": {
                "type": "object",
                "properties": {
                  "avoid_tolls": {
                    "description": "When set to true, avoids toll roads where reasonable, giving preference to routes not containing toll roads. Applies only to the ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                    "type": "boolean"
                  },
                  "avoid_highways": {
                    "description": "When set to true, avoids highways where reasonable, giving preference to routes not containing highways. Applies only to the ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                    "type": "boolean"
                  },
                  "avoid_ferries": {
                    "description": "When set to true, avoids ferries where reasonable, giving preference to routes not containing ferries. Applies only to the ``DRIVE`` and\\ ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                    "type": "boolean"
                  },
                  "avoid_indoor": {
                    "description": "When set to true, avoids navigating indoors where reasonable, giving preference to routes not containing indoor navigation. Applies only to the ``WALK`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                    "type": "boolean"
                  },
                  "vehicle_info": {
                    "type": "object",
                    "properties": {
                      "emission_type": {
                        "type": "enum",
                        "name": "VehicleEmissionType",
                        "description": "A set of values describing the vehicle's emission type. Applies only\nto the ``DRIVE``\n[``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].\n\nValues:\n    VEHICLE_EMISSION_TYPE_UNSPECIFIED (0):\n        No emission type specified. Default to ``GASOLINE``.\n    GASOLINE (1):\n        Gasoline/petrol fueled vehicle.\n    ELECTRIC (2):\n        Electricity powered vehicle.\n    HYBRID (3):\n        Hybrid fuel (such as gasoline + electric)\n        vehicle.\n    DIESEL (4):\n        Diesel fueled vehicle.",
                        "values": {
                          "VEHICLE_EMISSION_TYPE_UNSPECIFIED": {
                            "value": 0
                          },
                          "GASOLINE": {
                            "value": 1
                          },
                          "ELECTRIC": {
                            "value": 2
                          },
                          "HYBRID": {
                            "value": 3
                          },
                          "DIESEL": {
                            "value": 4
                          }
                        }
                      }
                    }
                  },
                  "toll_passes": {
                    "description": "Encapsulates information about toll passes. If toll passes are provided, the API tries to return the pass price. If toll passes are not provided, the API treats the toll pass as unknown and tries to return the cash price. Applies only to the ``DRIVE`` and ``TWO_WHEELER`` [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode].",
                    "type": "array",
                    "items": {
                      "type": "enum",
                      "name": "TollPass",
                      "description": "List of toll passes around the world that we support.\n\nValues:\n    TOLL_PASS_UNSPECIFIED (0):\n        Not used. If this value is used, then the\n        request fails.\n    AU_ETOLL_TAG (82):\n        Sydney toll pass. See additional details at\n        https://www.myetoll.com.au.\n    AU_EWAY_TAG (83):\n        Sydney toll pass. See additional details at\n        https://www.tollpay.com.au.\n    AU_LINKT (2):\n        Australia-wide toll pass.\n        See additional details at\n        https://www.linkt.com.au/.\n    AR_TELEPASE (3):\n        Argentina toll pass. See additional details\n        at https://telepase.com.ar\n    BR_AUTO_EXPRESO (81):\n        Brazil toll pass. See additional details at\n        https://www.autoexpreso.com\n    BR_CONECTCAR (7):\n        Brazil toll pass. See additional details at\n        https://conectcar.com.\n    BR_MOVE_MAIS (8):\n        Brazil toll pass. See additional details at\n        https://movemais.com.\n    BR_PASSA_RAPIDO (88):\n        Brazil toll pass. See additional details at\n      ",
                      "values": {
                        "TOLL_PASS_UNSPECIFIED": {
                          "value": 0
                        },
                        "AU_ETOLL_TAG": {
                          "value": 82
                        },
                        "AU_EWAY_TAG": {
                          "value": 83
                        },
                        "AU_LINKT": {
                          "value": 2
                        },
                        "AR_TELEPASE": {
                          "value": 3
                        },
                        "BR_AUTO_EXPRESO": {
                          "value": 81
                        },
                        "BR_CONECTCAR": {
                          "value": 7
                        },
                        "BR_MOVE_MAIS": {
                          "value": 8
                        },
                        "BR_PASSA_RAPIDO": {
                          "value": 88
                        },
                        "BR_SEM_PARAR": {
                          "value": 9
                        },
                        "BR_TAGGY": {
                          "value": 10
                        },
                        "BR_VELOE": {
                          "value": 11
                        },
                        "CA_US_AKWASASNE_SEAWAY_CORPORATE_CARD": {
                          "value": 84
                        },
                        "CA_US_AKWASASNE_SEAWAY_TRANSIT_CARD": {
                          "value": 85
                        },
                        "CA_US_BLUE_WATER_EDGE_PASS": {
                          "value": 18
                        },
                        "CA_US_CONNEXION": {
                          "value": 19
                        },
                        "CA_US_NEXUS_CARD": {
                          "value": 20
                        },
                        "ID_E_TOLL": {
                          "value": 16
                        },
                        "IN_FASTAG": {
                          "value": 78
                        },
                        "IN_LOCAL_HP_PLATE_EXEMPT": {
                          "value": 79
                        },
                        "JP_ETC": {
                          "value": 98
                        },
                        "JP_ETC2": {
                          "value": 99
                        },
                        "MX_IAVE": {
                          "value": 90
                        },
                        "MX_PASE": {
                          "value": 91
                        },
                        "MX_QUICKPASS": {
                          "value": 93
                        },
                        "MX_SISTEMA_TELEPEAJE_CHIHUAHUA": {
                          "value": 89
                        },
                        "MX_TAG_IAVE": {
                          "value": 12
                        },
                        "MX_TAG_TELEVIA": {
                          "value": 13
                        },
                        "MX_TELEVIA": {
                          "value": 92
                        },
                        "MX_VIAPASS": {
                          "value": 14
                        },
                        "US_AL_FREEDOM_PASS": {
                          "value": 21
                        },
                        "US_AK_ANTON_ANDERSON_TUNNEL_BOOK_OF_10_TICKETS": {
                          "value": 22
                        },
                        "US_CA_FASTRAK": {
                          "value": 4
                        },
                        "US_CA_FASTRAK_CAV_STICKER": {
                          "value": 86
                        },
                        "US_CO_EXPRESSTOLL": {
                          "value": 23
                        },
                        "US_CO_GO_PASS": {
                          "value": 24
                        },
                        "US_DE_EZPASSDE": {
                          "value": 25
                        },
                        "US_FL_BOB_SIKES_TOLL_BRIDGE_PASS": {
                          "value": 65
                        },
                        "US_FL_DUNES_COMMUNITY_DEVELOPMENT_DISTRICT_EXPRESSCARD": {
                          "value": 66
                        },
                        "US_FL_EPASS": {
                          "value": 67
                        },
                        "US_FL_GIBA_TOLL_PASS": {
                          "value": 68
                        },
                        "US_FL_LEEWAY": {
                          "value": 69
                        },
                        "US_FL_SUNPASS": {
                          "value": 70
                        },
                        "US_FL_SUNPASS_PRO": {
                          "value": 71
                        },
                        "US_IL_EZPASSIL": {
                          "value": 73
                        },
                        "US_IL_IPASS": {
                          "value": 72
                        },
                        "US_IN_EZPASSIN": {
                          "value": 26
                        },
                        "US_KS_BESTPASS_HORIZON": {
                          "value": 27
                        },
                        "US_KS_KTAG": {
                          "value": 28
                        },
                        "US_KS_NATIONALPASS": {
                          "value": 29
                        },
                        "US_KS_PREPASS_ELITEPASS": {
                          "value": 30
                        },
                        "US_KY_RIVERLINK": {
                          "value": 31
                        },
                        "US_LA_GEAUXPASS": {
                          "value": 32
                        },
                        "US_LA_TOLL_TAG": {
                          "value": 33
                        },
                        "US_MA_EZPASSMA": {
                          "value": 6
                        },
                        "US_MD_EZPASSMD": {
                          "value": 34
                        },
                        "US_ME_EZPASSME": {
                          "value": 35
                        },
                        "US_MI_AMBASSADOR_BRIDGE_PREMIER_COMMUTER_CARD": {
                          "value": 36
                        },
                        "US_MI_BCPASS": {
                          "value": 94
                        },
                        "US_MI_GROSSE_ILE_TOLL_BRIDGE_PASS_TAG": {
                          "value": 37
                        },
                        "US_MI_IQ_PROX_CARD": {
                          "value": 38
                        },
                        "US_MI_IQ_TAG": {
                          "value": 95
                        },
                        "US_MI_MACKINAC_BRIDGE_MAC_PASS": {
                          "value": 39
                        },
                        "US_MI_NEXPRESS_TOLL": {
                          "value": 40
                        },
                        "US_MN_EZPASSMN": {
                          "value": 41
                        },
                        "US_NC_EZPASSNC": {
                          "value": 42
                        },
                        "US_NC_PEACH_PASS": {
                          "value": 87
                        },
                        "US_NC_QUICK_PASS": {
                          "value": 43
                        },
                        "US_NH_EZPASSNH": {
                          "value": 80
                        },
                        "US_NJ_DOWNBEACH_EXPRESS_PASS": {
                          "value": 75
                        },
                        "US_NJ_EZPASSNJ": {
                          "value": 74
                        },
                        "US_NY_EXPRESSPASS": {
                          "value": 76
                        },
                        "US_NY_EZPASSNY": {
                          "value": 77
                        },
                        "US_OH_EZPASSOH": {
                          "value": 44
                        },
                        "US_PA_EZPASSPA": {
                          "value": 45
                        },
                        "US_RI_EZPASSRI": {
                          "value": 46
                        },
                        "US_SC_PALPASS": {
                          "value": 47
                        },
                        "US_TX_AVI_TAG": {
                          "value": 97
                        },
                        "US_TX_BANCPASS": {
                          "value": 48
                        },
                        "US_TX_DEL_RIO_PASS": {
                          "value": 49
                        },
                        "US_TX_EFAST_PASS": {
                          "value": 50
                        },
                        "US_TX_EAGLE_PASS_EXPRESS_CARD": {
                          "value": 51
                        },
                        "US_TX_EPTOLL": {
                          "value": 52
                        },
                        "US_TX_EZ_CROSS": {
                          "value": 53
                        },
                        "US_TX_EZTAG": {
                          "value": 54
                        },
                        "US_TX_FUEGO_TAG": {
                          "value": 96
                        },
                        "US_TX_LAREDO_TRADE_TAG": {
                          "value": 55
                        },
                        "US_TX_PLUSPASS": {
                          "value": 56
                        },
                        "US_TX_TOLLTAG": {
                          "value": 57
                        },
                        "US_TX_TXTAG": {
                          "value": 58
                        },
                        "US_TX_XPRESS_CARD": {
                          "value": 59
                        },
                        "US_UT_ADAMS_AVE_PARKWAY_EXPRESSCARD": {
                          "value": 60
                        },
                        "US_VA_EZPASSVA": {
                          "value": 61
                        },
                        "US_WA_BREEZEBY": {
                          "value": 17
                        },
                        "US_WA_GOOD_TO_GO": {
                          "value": 1
                        },
                        "US_WV_EZPASSWV": {
                          "value": 62
                        },
                        "US_WV_MEMORIAL_BRIDGE_TICKETS": {
                          "value": 63
                        },
                        "US_WV_MOV_PASS": {
                          "value": 100
                        },
                        "US_WV_NEWELL_TOLL_BRIDGE_TICKET": {
                          "value": 64
                        }
                      }
                    }
                  }
                }
              },
              "routing_preference": {
                "type": "enum",
                "name": "RoutingPreference",
                "description": "A set of values that specify factors to take into\nconsideration when calculating the route.\n\nValues:\n    ROUTING_PREFERENCE_UNSPECIFIED (0):\n        No routing preference specified. Default to\n        ``TRAFFIC_UNAWARE``.\n    TRAFFIC_UNAWARE (1):\n        Computes routes without taking live traffic conditions into\n        consideration. Suitable when traffic conditions don't matter\n        or are not applicable. Using this value produces the lowest\n        latency. Note: For\n        [``RouteTravelMode``][google.maps.routing.v2.RouteTravelMode]\n        ``DRIVE`` and ``TWO_WHEELER``, the route and duration chosen\n        are based on road network and average time-independent\n        traffic conditions, not current road conditions.\n        Consequently, routes may include roads that are temporarily\n        closed. Results for a given request may vary over time due\n        to changes in the road network, updated average traffic\n        conditions, and the distributed nature of the service.\n        Results may also",
                "values": {
                  "ROUTING_PREFERENCE_UNSPECIFIED": {
                    "value": 0
                  },
                  "TRAFFIC_UNAWARE": {
                    "value": 1
                  },
                  "TRAFFIC_AWARE": {
                    "value": 2
                  },
                  "TRAFFIC_AWARE_OPTIMAL": {
                    "value": 3
                  }
                }
              }
            }
          },
          "search_along_route_parameters": {
            "description": "Optional. Additional parameters proto for searching along a route.",
            "type": "object",
            "properties": {
              "polyline": {
                "type": "object",
                "properties": {
                  "encoded_polyline": {
                    "description": "The string encoding of the polyline using the `polyline encoding algorithm <https://developers.google.com/maps/documentation/utilities/polylinealgorithm>`__  This field is a member of `oneof`_ ``polyline_type``.",
                    "type": "string"
                  },
                  "geo_json_linestring": {
                    "description": "Specifies a polyline using the `GeoJSON LineString format <https://tools.ietf.org/html/rfc7946#section-3.1.4>`__.  This field is a member of `oneof`_ ``polyline_type``.",
                    "type": "object",
                    "reference": "google.protobuf.struct_pb2.Struct"
                  }
                }
              }
            },
            "required": [
              "polyline"
            ]
          },
          "include_pure_service_area_businesses": {
            "description": "Optional. Include pure service area businesses if the field is set to true. Pure service area business is a business that visits or delivers to customers directly but does not serve customers at their business address. For example, businesses like cleaning services or plumbers. Those businesses do not have a physical address or location on Google Maps. Places will not return fields including ``location``, ``plus_code``, and other location related fields for these businesses.",
            "type": "boolean"
          }
        },
        "required": [
          "text_query"
        ]
      }
    },
    {
      "type": "function",
      "name": "GetPhotoMediaRequest",
      "description": "Request for fetching a photo of a place using a photo\nresource name.\n\nAttributes:\n    name (str):\n        Required. The resource name of a photo media in the format:\n        ``places/{place_id}/photos/{photo_reference}/media``.\n\n        The resource name of a photo as returned in a Place object's\n        ``photos.name`` field comes with the format\n        ``places/{place_id}/photos/{photo_reference}``. You need to\n        append ``/media`` at the end of the photo resource to get\n        the photo media resource name.\n    max_width_px (int):\n        Optional. Specifies the maximum desired width, in pixels, of\n        the image. If the image is smaller than the values\n        specified, the original image will be returned. If the image\n        is larger in either dimension, it will be scaled to match\n        the smaller of the two dimensions, restricted to its\n        original aspect ratio. Both the max_height_px and\n        max_width_px properties accept an integer between 1 and\n        4800, inclusively. If t",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Required. The resource name of a photo media in the format: ``places/{place_id}/photos/{photo_reference}/media``.  The resource name of a photo as returned in a Place object's ``photos.name`` field comes with the format ``places/{place_id}/photos/{photo_reference}``. You need to append ``/media`` at the end of the photo resource to get the photo media resource name.",
            "type": "string"
          },
          "max_width_px": {
            "description": "Optional. Specifies the maximum desired width, in pixels, of the image. If the image is smaller than the values specified, the original image will be returned. If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original aspect ratio. Both the max_height_px and max_width_px properties accept an integer between 1 and 4800, inclusively. If the value is not within the allowed range, an INVALID_ARGUMENT error will be returned.  At least one of max_height_px or max_width_px needs to be specified. If neither max_height_px nor max_width_px is specified, an INVALID_ARGUMENT error will be returned.",
            "type": "integer"
          },
          "max_height_px": {
            "description": "Optional. Specifies the maximum desired height, in pixels, of the image. If the image is smaller than the values specified, the original image will be returned. If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions, restricted to its original aspect ratio. Both the max_height_px and max_width_px properties accept an integer between 1 and 4800, inclusively. If the value is not within the allowed range, an INVALID_ARGUMENT error will be returned.  At least one of max_height_px or max_width_px needs to be specified. If neither max_height_px nor max_width_px is specified, an INVALID_ARGUMENT error will be returned.",
            "type": "integer"
          },
          "skip_http_redirect": {
            "description": "Optional. If set, skip the default HTTP redirect behavior and render a text format (for example, in JSON format for HTTP use case) response. If not set, an HTTP redirect will be issued to redirect the call to the image media. This option is ignored for non-HTTP requests.",
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "type": "function",
      "name": "GetPlaceRequest",
      "description": "Request for fetching a Place based on its resource name, which is a\nstring in the ``places/{place_id}`` format.\n\nAttributes:\n    name (str):\n        Required. The resource name of a place, in the\n        ``places/{place_id}`` format.\n    language_code (str):\n        Optional. Place details will be displayed\n        with the preferred language if available.\n\n        Current list of supported languages:\n\n        https://developers.google.com/maps/faq#languagesupport.\n    region_code (str):\n        Optional. The Unicode country/region code (CLDR) of the\n        location where the request is coming from. This parameter is\n        used to display the place details, like region-specific\n        place name, if available. The parameter can affect results\n        based on applicable law. For more information, see\n        https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html.\n\n        Note that 3-digit region codes are not currently supported.\n    session_token (str):\n        Optio",
      "parameters": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Required. The resource name of a place, in the ``places/{place_id}`` format.",
            "type": "string"
          },
          "language_code": {
            "description": "Optional. Place details will be displayed with the preferred language if available.  Current list of supported languages:  https://developers.google.com/maps/faq#languagesupport.",
            "type": "string"
          },
          "region_code": {
            "description": "Optional. The Unicode country/region code (CLDR) of the location where the request is coming from. This parameter is used to display the place details, like region-specific place name, if available. The parameter can affect results based on applicable law. For more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html.  Note that 3-digit region codes are not currently supported.",
            "type": "string"
          },
          "session_token": {
            "description": "Optional. A string which identifies an Autocomplete session for billing purposes. Must be a URL and filename safe base64 string with at most 36 ASCII characters in length. Otherwise an INVALID_ARGUMENT error is returned.  The session begins when the user starts typing a query, and concludes when they select a place and a call to Place Details or Address Validation is made. Each session can have multiple queries, followed by one Place Details or Address Validation request. The credentials used for each request within a session must belong to the same Google Cloud Console project. Once a session has concluded, the token is no longer valid; your app must generate a fresh token for each session. If the ``session_token`` parameter is omitted, or if you reuse a session token, the session is charged as if no session token was provided (each request is billed separately).  We recommend the following guidelines:  -  Use session tokens for all Place Autocomplete calls. -  Generate a fresh token for each session. Using a version 4 UUID is recommended. -  Ensure that the credentials used for all Place Autocomplete, Place Details, and Address Validation requests within a session belong to the same Cloud Console project. -  Be sure to pass a unique session token for each new session. Using the same token for more than one session will result in each request being billed individually.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      }
    },
    {
      "type": "function",
      "name": "AutocompletePlacesRequest",
      "description": "Request proto for AutocompletePlaces.\n\nAttributes:\n    input (str):\n        Required. The text string on which to search.\n    location_bias (google.maps.places_v1.types.AutocompletePlacesRequest.LocationBias):\n        Optional. Bias results to a specified location.\n\n        At most one of ``location_bias`` or ``location_restriction``\n        should be set. If neither are set, the results will be\n        biased by IP address, meaning the IP address will be mapped\n        to an imprecise location and used as a biasing signal.\n    location_restriction (google.maps.places_v1.types.AutocompletePlacesRequest.LocationRestriction):\n        Optional. Restrict results to a specified location.\n\n        At most one of ``location_bias`` or ``location_restriction``\n        should be set. If neither are set, the results will be\n        biased by IP address, meaning the IP address will be mapped\n        to an imprecise location and used as a biasing signal.\n    included_primary_types (MutableSequence[str]):\n        Optional.",
      "parameters": {
        "type": "object",
        "properties": {
          "input": {
            "description": "Required. The text string on which to search.",
            "type": "string"
          },
          "location_bias": {
            "description": "Optional. Bias results to a specified location.  At most one of ``location_bias`` or ``location_restriction`` should be set. If neither are set, the results will be biased by IP address, meaning the IP address will be mapped to an imprecise location and used as a biasing signal.",
            "type": "object",
            "properties": {
              "rectangle": {
                "type": "object",
                "properties": {
                  "low": {
                    "description": "Required. The low point of the viewport.",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  },
                  "high": {
                    "description": "Required. The high point of the viewport.",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  }
                },
                "required": [
                  "low",
                  "high"
                ]
              },
              "circle": {
                "type": "object",
                "properties": {
                  "center": {
                    "description": "Required. Center latitude and longitude.  The range of latitude must be within [-90.0, 90.0]. The range of the longitude must be within [-180.0, 180.0].",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  },
                  "radius": {
                    "description": "Required. Radius measured in meters. The radius must be within [0.0, 50000.0].",
                    "type": "number"
                  }
                },
                "required": [
                  "center",
                  "radius"
                ]
              }
            }
          },
          "location_restriction": {
            "description": "Optional. Restrict results to a specified location.  At most one of ``location_bias`` or ``location_restriction`` should be set. If neither are set, the results will be biased by IP address, meaning the IP address will be mapped to an imprecise location and used as a biasing signal.",
            "type": "object",
            "properties": {
              "rectangle": {
                "type": "object",
                "properties": {
                  "low": {
                    "description": "Required. The low point of the viewport.",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  },
                  "high": {
                    "description": "Required. The high point of the viewport.",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  }
                },
                "required": [
                  "low",
                  "high"
                ]
              },
              "circle": {
                "type": "object",
                "properties": {
                  "center": {
                    "description": "Required. Center latitude and longitude.  The range of latitude must be within [-90.0, 90.0]. The range of the longitude must be within [-180.0, 180.0].",
                    "type": "object",
                    "reference": "google.type.latlng_pb2.LatLng"
                  },
                  "radius": {
                    "description": "Required. Radius measured in meters. The radius must be within [0.0, 50000.0].",
                    "type": "number"
                  }
                },
                "required": [
                  "center",
                  "radius"
                ]
              }
            }
          },
          "included_primary_types": {
            "description": "Optional. Included primary Place type (for example, \"restaurant\" or \"gas_station\") in Place Types (https://developers.google.com/maps/documentation/places/web-service/place-types), or only ``(regions)``, or only ``(cities)``. A Place is only returned if its primary type is included in this list. Up to 5 values can be specified. If no types are specified, all Place types are returned.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "included_region_codes": {
            "description": "Optional. Only include results in the specified regions, specified as up to 15 CLDR two-character region codes. An empty set will not restrict the results. If both ``location_restriction`` and ``included_region_codes`` are set, the results will be located in the area of intersection.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "language_code": {
            "description": "Optional. The language in which to return results. Defaults to en-US. The results may be in mixed languages if the language used in ``input`` is different from ``language_code`` or if the returned Place does not have a translation from the local language to ``language_code``.",
            "type": "string"
          },
          "region_code": {
            "description": "Optional. The region code, specified as a CLDR two-character region code. This affects address formatting, result ranking, and may influence what results are returned. This does not restrict results to the specified region. To restrict results to a region, use ``region_code_restriction``.",
            "type": "string"
          },
          "origin": {
            "description": "Optional. The origin point from which to calculate geodesic distance to the destination (returned as ``distance_meters``). If this value is omitted, geodesic distance will not be returned.",
            "type": "object",
            "reference": "google.type.latlng_pb2.LatLng"
          },
          "input_offset": {
            "description": "Optional. A zero-based Unicode character offset of ``input`` indicating the cursor position in ``input``. The cursor position may influence what predictions are returned.  If empty, defaults to the length of ``input``.",
            "type": "integer"
          },
          "include_query_predictions": {
            "description": "Optional. If true, the response will include both Place and query predictions. Otherwise the response will only return Place predictions.",
            "type": "boolean"
          },
          "session_token": {
            "description": "Optional. A string which identifies an Autocomplete session for billing purposes. Must be a URL and filename safe base64 string with at most 36 ASCII characters in length. Otherwise an INVALID_ARGUMENT error is returned.  The session begins when the user starts typing a query, and concludes when they select a place and a call to Place Details or Address Validation is made. Each session can have multiple queries, followed by one Place Details or Address Validation request. The credentials used for each request within a session must belong to the same Google Cloud Console project. Once a session has concluded, the token is no longer valid; your app must generate a fresh token for each session. If the ``session_token`` parameter is omitted, or if you reuse a session token, the session is charged as if no session token was provided (each request is billed separately).  We recommend the following guidelines:  -  Use session tokens for all Place Autocomplete calls. -  Generate a fresh token for each session. Using a version 4 UUID is recommended. -  Ensure that the credentials used for all Place Autocomplete, Place Details, and Address Validation requests within a session belong to the same Cloud Console project. -  Be sure to pass a unique session token for each new session. Using the same token for more than one session will result in each request being billed individually.",
            "type": "string"
          },
          "include_pure_service_area_businesses": {
            "description": "Optional. Include pure service area businesses if the field is set to true. Pure service area business is a business that visits or delivers to customers directly but does not serve customers at their business address. For example, businesses like cleaning services or plumbers. Those businesses do not have a physical address or location on Google Maps. Places will not return fields including ``location``, ``plus_code``, and other location related fields for these businesses.",
            "type": "boolean"
          }
        },
        "required": [
          "input"
        ]
      }
    }
  ]
}