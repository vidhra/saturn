{
  "Places": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "search_nearby",
          "description": "Search for places near locations.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import places_v1\n\n    async def sample_search_nearby():\n        # Create a client\n        client = places_v1.PlacesAsyncClient()\n\n        # Initialize request argument(s)\n        location_restriction = places_v1.LocationRestriction()\n        location_restriction.circle.radius = 0.648\n\n        request = places_v1.SearchNearbyRequest(\n            location_restriction=location_restriction,\n        )\n\n        # Make the request\n        response = await client.search_nearby(request=request)\n\n        # Handle the response\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.maps.places_v1.types.SearchNearbyResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "search_text",
          "description": "Text query based place search.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import places_v1\n\n    async def sample_search_text():\n        # Create a client\n        client = places_v1.PlacesAsyncClient()\n\n        # Initialize request argument(s)\n        request = places_v1.SearchTextRequest(\n            text_query=\"text_query_value\",\n        )\n\n        # Make the request\n        response = await client.search_text(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.maps.places_v1.types.SearchTextRequest, dict]]):\n        The request object. R",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.maps.places_v1.types.SearchTextResponse"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_photo_media",
          "description": "Get a photo media with a photo reference string.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import places_v1\n\n    async def sample_get_photo_media():\n        # Create a client\n        client = places_v1.PlacesAsyncClient()\n\n        # Initialize request argument(s)\n        request = places_v1.GetPhotoMediaRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_photo_media(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.maps.places_v1.types.GetPhotoMediaRequest, dict]]):\n        T",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of a photo media in the format: ``places/{place_id}/photos/{photo_reference}/media``.  The resource name of a photo as returned in a Place object's ``photos.name`` field comes with the format ``places/{place_id}/photos/{photo_reference}``. You need to append ``/media`` at the end of the photo resource to get the photo media resource name.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.maps.places_v1.types.PhotoMedia: A photo media from Places API."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.maps.places_v1.types.PhotoMedia"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_place",
          "description": "Get the details of a place based on its resource name, which is\na string in the ``places/{place_id}`` format.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import places_v1\n\n    async def sample_get_place():\n        # Create a client\n        client = places_v1.PlacesAsyncClient()\n\n        # Initialize request argument(s)\n        request = places_v1.GetPlaceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_place(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.maps.places_v1.ty",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of a place, in the ``places/{place_id}`` format.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.maps.places_v1.types.Place: All the information representing a Place."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.maps.places_v1.types.Place"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "autocomplete_places",
          "description": "Returns predictions for the given input.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.maps import places_v1\n\n    async def sample_autocomplete_places():\n        # Create a client\n        client = places_v1.PlacesAsyncClient()\n\n        # Initialize request argument(s)\n        request = places_v1.AutocompletePlacesRequest(\n            input=\"input_value\",\n        )\n\n        # Make the request\n        response = await client.autocomplete_places(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.maps.places_v1.types.AutocompletePlacesRequest, dict]]",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [],
          "response_types": [
            "google.maps.places_v1.types.AutocompletePlacesResponse"
          ]
        }
      }
    ]
  }
}