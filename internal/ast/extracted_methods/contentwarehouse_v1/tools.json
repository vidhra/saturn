{
  "DocumentLinkService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_linked_targets",
          "description": "Return all target document-links from the document.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_list_linked_targets():\n        # Create a client\n        client = contentwarehouse_v1.DocumentLinkServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.ListLinkedTargetsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.list_linked_targets(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[googl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the document, for which all target links are returned. Format: projects/{project_number}/locations/{location}/documents/{target_document_id}.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.ListLinkedTargetsResponse: Response message for DocumentLinkService.ListLinkedTargets."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_linked_sources",
          "description": "Return all source document-links from the document.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_list_linked_sources():\n        # Create a client\n        client = contentwarehouse_v1.DocumentLinkServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.ListLinkedSourcesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_linked_sources(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(respon",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The name of the document, for which all source links are returned. Format: projects/{project_number}/locations/{location}/documents/{source_document_id}.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.services.document_link_service.pagers.ListLinkedSourcesAsyncPager: Response message for DocumentLinkService.ListLinkedSources. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_document_link",
          "description": "Create a link between a source document and a target\ndocument.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_create_document_link():\n        # Create a client\n        client = contentwarehouse_v1.DocumentLinkServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.CreateDocumentLinkRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_document_link(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Option",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent of the document-link to be created. parent of document-link should be a document. Format: projects/{project_number}/locations/{location}/documents/{source_document_id}.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "document_link": {
                "type": "google.cloud.contentwarehouse_v1.types.DocumentLink",
                "description": "Required. Document links associated with the source documents (source_document_id).  This corresponds to the ``document_link`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.DocumentLink: A document-link between source and target document."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "document_link",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_document_link",
          "description": "Remove the link between the source and target\ndocuments.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_delete_document_link():\n        # Create a client\n        client = contentwarehouse_v1.DocumentLinkServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.DeleteDocumentLinkRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_document_link(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.contentwarehouse_v1.types.DeleteDocumentLinkRequest, d",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the document-link to be deleted. Format: projects/{project_number}/locations/{location}/documents/{source_document_id}/documentLinks/{document_link_id}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "DocumentSchemaService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_document_schema",
          "description": "Creates a document schema.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_create_document_schema():\n        # Create a client\n        client = contentwarehouse_v1.DocumentSchemaServiceAsyncClient()\n\n        # Initialize request argument(s)\n        document_schema = contentwarehouse_v1.DocumentSchema()\n        document_schema.display_name = \"display_name_value\"\n\n        request = contentwarehouse_v1.CreateDocumentSchemaRequest(\n            parent=\"parent_value\",\n            document_schema=document_schema,\n        )\n\n        # Make the request\n        resp",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent name. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "document_schema": {
                "type": "google.cloud.contentwarehouse_v1.types.DocumentSchema",
                "description": "Required. The document schema to create.  This corresponds to the ``document_schema`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.DocumentSchema: A document schema used to define document structure."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "document_schema",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_document_schema",
          "description": "Updates a Document Schema. Returns INVALID_ARGUMENT if the name\nof the Document Schema is non-empty and does not equal the\nexisting name. Supports only appending new properties, adding\nnew ENUM possible values, and updating the\n[EnumTypeOptions.validation_check_disabled][google.cloud.contentwarehouse.v1.EnumTypeOptions.validation_check_disabled]\nflag for ENUM possible values. Updating existing properties will\nresult into INVALID_ARGUMENT.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_update_document_schema():\n        # Create a client\n        client = co",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the document schema to update. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "document_schema": {
                "type": "google.cloud.contentwarehouse_v1.types.DocumentSchema",
                "description": "Required. The document schema to update with.  This corresponds to the ``document_schema`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.DocumentSchema: A document schema used to define document structure."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "document_schema",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_document_schema",
          "description": "Gets a document schema. Returns NOT_FOUND if the document schema\ndoes not exist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_get_document_schema():\n        # Create a client\n        client = contentwarehouse_v1.DocumentSchemaServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.GetDocumentSchemaRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_document_schema(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    re",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the document schema to retrieve.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.DocumentSchema: A document schema used to define document structure."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_document_schema",
          "description": "Deletes a document schema. Returns NOT_FOUND if the document\nschema does not exist. Returns BAD_REQUEST if the document\nschema has documents depending on it.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_delete_document_schema():\n        # Create a client\n        client = contentwarehouse_v1.DocumentSchemaServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.DeleteDocumentSchemaRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_document_schema(request=re",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the document schema to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_document_schemas",
          "description": "Lists document schemas.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_list_document_schemas():\n        # Create a client\n        client = contentwarehouse_v1.DocumentSchemaServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.ListDocumentSchemasRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_document_schemas(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of document schemas. Format: projects/{project_number}/locations/{location}.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.services.document_schema_service.pagers.ListDocumentSchemasAsyncPager: Response message for DocumentSchemaService.ListDocumentSchemas. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "DocumentService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_document",
          "description": "Creates a document.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_create_document():\n        # Create a client\n        client = contentwarehouse_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        document = contentwarehouse_v1.Document()\n        document.plain_text = \"plain_text_value\"\n        document.raw_document_path = \"raw_document_path_value\"\n        document.display_name = \"display_name_value\"\n\n        request = contentwarehouse_v1.CreateDocumentRequest(\n            parent=\"parent_value\",\n            document=document",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent name. Format: projects/{project_number}/locations/{location}.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "document": {
                "type": "google.cloud.contentwarehouse_v1.types.Document",
                "description": "Required. The document to create. This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.CreateDocumentResponse: Response message for DocumentService.CreateDocument."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "document",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_document",
          "description": "Gets a document. Returns NOT_FOUND if the document does not\nexist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_get_document():\n        # Create a client\n        client = contentwarehouse_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.GetDocumentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_document(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.conte",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the document to retrieve. Format: projects/{project_number}/locations/{location}/documents/{document_id} or projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.Document: Defines the structure for content warehouse document proto."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_document",
          "description": "Updates a document. Returns INVALID_ARGUMENT if the name of the\ndocument is non-empty and does not equal the existing name.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_update_document():\n        # Create a client\n        client = contentwarehouse_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        document = contentwarehouse_v1.Document()\n        document.plain_text = \"plain_text_value\"\n        document.raw_document_path = \"raw_document_path_value\"\n        document.display_name = \"display_name_value\"\n\n        request = con",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the document to update. Format: projects/{project_number}/locations/{location}/documents/{document_id} or projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "document": {
                "type": "google.cloud.contentwarehouse_v1.types.Document",
                "description": "Required. The document to update. This corresponds to the ``document`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.UpdateDocumentResponse: Response message for DocumentService.UpdateDocument."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "document",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_document",
          "description": "Deletes a document. Returns NOT_FOUND if the document does not\nexist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_delete_document():\n        # Create a client\n        client = contentwarehouse_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.DeleteDocumentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_document(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.contentwarehouse_v1.types.DeleteDocumentRequest, dict]]):\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the document to delete. Format: projects/{project_number}/locations/{location}/documents/{document_id} or projects/{project_number}/locations/{location}/documents/referenceId/{reference_id}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "search_documents",
          "description": "Searches for documents using provided\n[SearchDocumentsRequest][google.cloud.contentwarehouse.v1.SearchDocumentsRequest].\nThis call only returns documents that the caller has permission\nto search against.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_search_documents():\n        # Create a client\n        client = contentwarehouse_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.SearchDocumentsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result =",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of documents. Format: projects/{project_number}/locations/{location}.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.services.document_service.pagers.SearchDocumentsAsyncPager: Response message for DocumentService.SearchDocuments. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "lock_document",
          "description": "Lock the document so the document cannot be updated\nby other users.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_lock_document():\n        # Create a client\n        client = contentwarehouse_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.LockDocumentRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.lock_document(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.c",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the document to lock. Format: projects/{project_number}/locations/{location}/documents/{document}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.Document: Defines the structure for content warehouse document proto."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "fetch_acl",
          "description": "Gets the access control policy for a resource. Returns NOT_FOUND\nerror if the resource does not exist. Returns an empty policy if\nthe resource exists but does not have a policy set.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_fetch_acl():\n        # Create a client\n        client = contentwarehouse_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.FetchAclRequest(\n            resource=\"resource_value\",\n        )\n\n        # Make the request\n        response = await client.fetch_acl(request=req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "resource": {
                "type": "str",
                "description": "Required. REQUIRED: The resource for which the policy is being requested. Format for document: projects/{project_number}/locations/{location}/documents/{document_id}. Format for collection: projects/{project_number}/locations/{location}/collections/{collection_id}. Format for project: projects/{project_number}.  This corresponds to the ``resource`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.FetchAclResponse: Response message for DocumentService.FetchAcl."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "resource",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "set_acl",
          "description": "Sets the access control policy for a resource.\nReplaces any existing policy.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_set_acl():\n        # Create a client\n        client = contentwarehouse_v1.DocumentServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.SetAclRequest(\n            resource=\"resource_value\",\n        )\n\n        # Make the request\n        response = await client.set_acl(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.co",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "resource": {
                "type": "str",
                "description": "Required. REQUIRED: The resource for which the policy is being requested. Format for document: projects/{project_number}/locations/{location}/documents/{document_id}. Format for collection: projects/{project_number}/locations/{location}/collections/{collection_id}. Format for project: projects/{project_number}.  This corresponds to the ``resource`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "policy": {
                "type": "google.iam.v1.policy_pb2.Policy",
                "description": "Required. REQUIRED: The complete policy to be applied to the ``resource``. The size of the policy is limited to a few 10s of KB. This refers to an Identity and Access (IAM) policy, which specifies access controls for the Document.  You can set ACL with condition for projects only.  Supported operators are: ``=``, ``!=``, ``<``, ``<=``, ``>``, and ``>=`` where the left of the operator is ``DocumentSchemaId`` or property name and the right of the operator is a number or a quoted string. You must escape backslash (\\) and quote (\") characters.  Boolean expressions (AND/OR) are supported up to 3 levels of nesting (for example, \"((A AND B AND C) OR D) AND E\"), a maximum of 10 comparisons are allowed in the expression. The expression must be < 6000 bytes in length.  Sample condition: ``\"DocumentSchemaId = \\\"some schema id\\\" OR SchemaId.floatPropertyName >= 10\"``  This corresponds to the ``policy`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.SetAclResponse: Response message for DocumentService.SetAcl."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "resource",
              "policy",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "PipelineService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "run_pipeline",
          "description": "Run a predefined pipeline.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_run_pipeline():\n        # Create a client\n        client = contentwarehouse_v1.PipelineServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.RunPipelineRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.run_pipeline(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(respon",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name which owns the resources of the pipeline. Format: projects/{project_number}/locations/{location}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.contentwarehouse_v1.types.RunPipelineResponse` Response message of RunPipeline method."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "RuleSetService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_rule_set",
          "description": "Creates a ruleset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_create_rule_set():\n        # Create a client\n        client = contentwarehouse_v1.RuleSetServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.CreateRuleSetRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_rule_set(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.contentwarehouse_v1.types.CreateRuleSetReq",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent name. Format: projects/{project_number}/locations/{location}.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "rule_set": {
                "type": "google.cloud.contentwarehouse_v1.types.RuleSet",
                "description": "Required. The rule set to create. This corresponds to the ``rule_set`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.RuleSet: Represents a set of rules from a single customer."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "rule_set",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_rule_set",
          "description": "Gets a ruleset. Returns NOT_FOUND if the ruleset does not exist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_get_rule_set():\n        # Create a client\n        client = contentwarehouse_v1.RuleSetServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.GetRuleSetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_rule_set(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.contentwa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the rule set to retrieve. Format: projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.RuleSet: Represents a set of rules from a single customer."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_rule_set",
          "description": "Updates a ruleset. Returns INVALID_ARGUMENT if the name of the\nruleset is non-empty and does not equal the existing name.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_update_rule_set():\n        # Create a client\n        client = contentwarehouse_v1.RuleSetServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.UpdateRuleSetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.update_rule_set(request=request)\n\n        # Handle the response\n        print(r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the rule set to update. Format: projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "rule_set": {
                "type": "google.cloud.contentwarehouse_v1.types.RuleSet",
                "description": "Required. The rule set to update. This corresponds to the ``rule_set`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.RuleSet: Represents a set of rules from a single customer."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "rule_set",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_rule_set",
          "description": "Deletes a ruleset. Returns NOT_FOUND if the document does not\nexist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_delete_rule_set():\n        # Create a client\n        client = contentwarehouse_v1.RuleSetServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.DeleteRuleSetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_rule_set(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.contentwarehouse_v1.types.DeleteRuleSetRequest, dict]]):\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the rule set to delete. Format: projects/{project_number}/locations/{location}/ruleSets/{rule_set_id}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_rule_sets",
          "description": "Lists rulesets.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_list_rule_sets():\n        # Create a client\n        client = contentwarehouse_v1.RuleSetServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.ListRuleSetsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_rule_sets(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.cont",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of document. Format: projects/{project_number}/locations/{location}.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.services.rule_set_service.pagers.ListRuleSetsAsyncPager: Response message for RuleSetService.ListRuleSets. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  },
  "SynonymSetService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_synonym_set",
          "description": "Creates a SynonymSet for a single context. Throws an\nALREADY_EXISTS exception if a synonymset already exists for the\ncontext.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_create_synonym_set():\n        # Create a client\n        client = contentwarehouse_v1.SynonymSetServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.CreateSynonymSetRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_synonym_set(request=request)\n\n        # Handle the resp",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent name. Format: projects/{project_number}/locations/{location}.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "synonym_set": {
                "type": "google.cloud.contentwarehouse_v1.types.SynonymSet",
                "description": "Required. The synonymSet to be created for a context  This corresponds to the ``synonym_set`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.SynonymSet: Represents a list of synonyms for a given context. For example a context \"sales\" could contain:  Synonym 1: sale, invoice, bill, order Synonym 2: money, credit, finance, payment Synonym 3: shipping, freight, transport Each SynonymSets should be disjoint"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "synonym_set",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_synonym_set",
          "description": "Gets a SynonymSet for a particular context. Throws a NOT_FOUND\nexception if the Synonymset does not exist\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_get_synonym_set():\n        # Create a client\n        client = contentwarehouse_v1.SynonymSetServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.GetSynonymSetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_synonym_set(request=request)\n\n        # Handle the response\n        print(response)\n\nArg",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the synonymSet to retrieve Format: projects/{project_number}/locations/{location}/synonymSets/{context}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.SynonymSet: Represents a list of synonyms for a given context. For example a context \"sales\" could contain:  Synonym 1: sale, invoice, bill, order Synonym 2: money, credit, finance, payment Synonym 3: shipping, freight, transport Each SynonymSets should be disjoint"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_synonym_set",
          "description": "Remove the existing SynonymSet for the context and replaces it\nwith a new one. Throws a NOT_FOUND exception if the SynonymSet\nis not found.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_update_synonym_set():\n        # Create a client\n        client = contentwarehouse_v1.SynonymSetServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.UpdateSynonymSetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.update_synonym_set(request=request)\n\n        # Handl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the synonymSet to update Format: projects/{project_number}/locations/{location}/synonymSets/{context}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "synonym_set": {
                "type": "google.cloud.contentwarehouse_v1.types.SynonymSet",
                "description": "Required. The synonymSet to be updated for the customer  This corresponds to the ``synonym_set`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.types.SynonymSet: Represents a list of synonyms for a given context. For example a context \"sales\" could contain:  Synonym 1: sale, invoice, bill, order Synonym 2: money, credit, finance, payment Synonym 3: shipping, freight, transport Each SynonymSets should be disjoint"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "synonym_set",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_synonym_set",
          "description": "Deletes a SynonymSet for a given context. Throws a NOT_FOUND\nexception if the SynonymSet is not found.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_delete_synonym_set():\n        # Create a client\n        client = contentwarehouse_v1.SynonymSetServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.DeleteSynonymSetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_synonym_set(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.contentwarehouse",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the synonymSet to delete Format: projects/{project_number}/locations/{location}/synonymSets/{context}.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_synonym_sets",
          "description": "Returns all SynonymSets (for all contexts) for the\nspecified location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import contentwarehouse_v1\n\n    async def sample_list_synonym_sets():\n        # Create a client\n        client = contentwarehouse_v1.SynonymSetServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = contentwarehouse_v1.ListSynonymSetsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_synonym_sets(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            p",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent name. Format: projects/{project_number}/locations/{location}.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.contentwarehouse_v1.services.synonym_set_service.pagers.ListSynonymSetsAsyncPager: Response message for SynonymSetService.ListSynonymSets. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      }
    ]
  }
}