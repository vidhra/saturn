{
  "AppPlatform": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_applications",
          "description": "Lists Applications in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_applications():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListApplicationsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_applications(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListApplicationsRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.app_platform.pagers.ListApplicationsAsyncPager: Message for response to listing Applications. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.ListApplicationsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_application",
          "description": "Gets details of a single Application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_application():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetApplicationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_application(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetApplicat",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Application: Message describing Application object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.GetApplicationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_application",
          "description": "Creates a new Application in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_application():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        application = visionai_v1alpha1.Application()\n        application.display_name = \"display_name_value\"\n\n        request = visionai_v1alpha1.CreateApplicationRequest(\n            parent=\"parent_value\",\n            application_id=\"application_id_value\",\n            application=application,\n        )\n\n",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "application": {
                "type": "google.cloud.visionai_v1alpha1.types.Application",
                "description": "Required. The resource being created. This corresponds to the ``application`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Application` Message describing Application object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "application",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.CreateApplicationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_application",
          "description": "Updates the parameters of a single Application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_application():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        application = visionai_v1alpha1.Application()\n        application.display_name = \"display_name_value\"\n\n        request = visionai_v1alpha1.UpdateApplicationRequest(\n            application=application,\n        )\n\n        # Make the request\n        operation = client.update_application(request=request)\n\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "application": {
                "type": "google.cloud.visionai_v1alpha1.types.Application",
                "description": "Required. The resource being updated. This corresponds to the ``application`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Field mask is used to specify the fields to be overwritten in the Application resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Application` Message describing Application object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "application",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.UpdateApplicationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_application",
          "description": "Deletes a single Application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_application():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteApplicationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_application(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        p",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.DeleteApplicationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "deploy_application",
          "description": "Deploys a single Application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_deploy_application():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeployApplicationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.deploy_application(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        p",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.DeployApplicationResponse` RPC Request Messages. Message for DeployApplication Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.DeployApplicationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "undeploy_application",
          "description": "Undeploys a single Application.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_undeploy_application():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.UndeployApplicationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.undeploy_application(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.UndeployApplicationResponse` Message for UndeployApplication Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.UndeployApplicationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "add_application_stream_input",
          "description": "Adds target stream input to the Application.\nIf the Application is deployed, the corresponding new\nApplication instance will be created. If the stream has\nalready been in the Application, the RPC will fail.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_add_application_stream_input():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.AddApplicationStreamInputRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        op",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.AddApplicationStreamInputResponse` Message for AddApplicationStreamInput Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.AddApplicationStreamInputRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "remove_application_stream_input",
          "description": "Remove target stream input to the Application, if the\nApplication is deployed, the corresponding instance\nbased will be deleted. If the stream is not in the\nApplication, the RPC will fail.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_remove_application_stream_input():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.RemoveApplicationStreamInputRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = cl",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.RemoveApplicationStreamInputResponse` Message for RemoveApplicationStreamInput Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.RemoveApplicationStreamInputRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_application_stream_input",
          "description": "Update target stream input to the Application, if the\nApplication is deployed, the corresponding instance based will\nbe deployed. For CreateOrUpdate behavior, set allow_missing to\ntrue.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_application_stream_input():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.UpdateApplicationStreamInputRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = clien",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.UpdateApplicationStreamInputResponse` Message for AddApplicationStreamInput Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.UpdateApplicationStreamInputRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_instances",
          "description": "Lists Instances in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_instances():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListInstancesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_instances(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optiona",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListInstancesRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.app_platform.pagers.ListInstancesAsyncPager: Message for response to listing Instances. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.ListInstancesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_instance",
          "description": "Gets details of a single Instance.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_instance():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetInstanceRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_instance(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetInstanceRequest, dic",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Instance: Message describing Instance object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.GetInstanceRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_application_instances",
          "description": "Adds target stream input to the Application.\nIf the Application is deployed, the corresponding new\nApplication instance will be created. If the stream has\nalready been in the Application, the RPC will fail.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_application_instances():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        application_instances = visionai_v1alpha1.ApplicationInstance()\n        application_instances.instance_id = \"instance_id_value\"\n        appli",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.CreateApplicationInstancesResponse` Message for CreateApplicationInstance Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.CreateApplicationInstancesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_application_instances",
          "description": "Remove target stream input to the Application, if the\nApplication is deployed, the corresponding instance\nbased will be deleted. If the stream is not in the\nApplication, the RPC will fail.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_application_instances():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteApplicationInstancesRequest(\n            name=\"name_value\",\n            instance_ids=['instance_ids_value1', 'instance_ids_va",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Instance` Message describing Instance object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.DeleteApplicationInstancesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_application_instances",
          "description": "Adds target stream input to the Application.\nIf the Application is deployed, the corresponding new\nApplication instance will be created. If the stream has\nalready been in the Application, the RPC will fail.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_application_instances():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.UpdateApplicationInstancesRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        o",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. the name of the application to retrieve. Format:  \"projects/{project}/locations/{location}/applications/{application}\"  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "application_instances": {
                "type": "MutableSequence[google.cloud.visionai_v1alpha1.types.UpdateApplicationInstancesRequest.UpdateApplicationInstance]",
                "description": "This corresponds to the ``application_instances`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.UpdateApplicationInstancesResponse` Message for UpdateApplicationInstances Response."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "application_instances",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.UpdateApplicationInstancesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_drafts",
          "description": "Lists Drafts in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_drafts():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListDraftsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_drafts(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[goog",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListDraftsRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.app_platform.pagers.ListDraftsAsyncPager: Message for response to listing Drafts. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.ListDraftsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_draft",
          "description": "Gets details of a single Draft.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_draft():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetDraftRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_draft(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetDraftRequest, dict]]):\n        T",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Draft: Message describing Draft object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.GetDraftRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_draft",
          "description": "Creates a new Draft in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_draft():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        draft = visionai_v1alpha1.Draft()\n        draft.display_name = \"display_name_value\"\n\n        request = visionai_v1alpha1.CreateDraftRequest(\n            parent=\"parent_value\",\n            draft_id=\"draft_id_value\",\n            draft=draft,\n        )\n\n        # Make the request\n        operation = client.create",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "draft": {
                "type": "google.cloud.visionai_v1alpha1.types.Draft",
                "description": "Required. The resource being created. This corresponds to the ``draft`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "draft_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``draft_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Draft` Message describing Draft object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "draft",
              "draft_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.CreateDraftRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_draft",
          "description": "Updates the parameters of a single Draft.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_draft():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        draft = visionai_v1alpha1.Draft()\n        draft.display_name = \"display_name_value\"\n\n        request = visionai_v1alpha1.UpdateDraftRequest(\n            draft=draft,\n        )\n\n        # Make the request\n        operation = client.update_draft(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n     ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "draft": {
                "type": "google.cloud.visionai_v1alpha1.types.Draft",
                "description": "Required. The resource being updated. This corresponds to the ``draft`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Field mask is used to specify the fields to be overwritten in the Draft resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Draft` Message describing Draft object"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "draft",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.UpdateDraftRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_draft",
          "description": "Deletes a single Draft.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_draft():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteDraftRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_draft(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n  ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.DeleteDraftRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_processors",
          "description": "Lists Processors in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_processors():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListProcessorsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_processors(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Opt",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListProcessorsRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.app_platform.pagers.ListProcessorsAsyncPager: Message for response to listing Processors. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.ListProcessorsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_prebuilt_processors",
          "description": "ListPrebuiltProcessors is a custom pass-through verb\nthat Lists Prebuilt Processors.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_prebuilt_processors():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListPrebuiltProcessorsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.list_prebuilt_processors(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent path. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.ListPrebuiltProcessorsResponse: Response Message for listing Prebuilt Processors."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.ListPrebuiltProcessorsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_processor",
          "description": "Gets details of a single Processor.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_processor():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetProcessorRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_processor(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetProcessorRequest",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Processor: Message describing Processor object. Next ID: 18"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.GetProcessorRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_processor",
          "description": "Creates a new Processor in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_processor():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        processor = visionai_v1alpha1.Processor()\n        processor.display_name = \"display_name_value\"\n\n        request = visionai_v1alpha1.CreateProcessorRequest(\n            parent=\"parent_value\",\n            processor_id=\"processor_id_value\",\n            processor=processor,\n        )\n\n        # Make the r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "processor": {
                "type": "google.cloud.visionai_v1alpha1.types.Processor",
                "description": "Required. The resource being created. This corresponds to the ``processor`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "processor_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``processor_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Processor` Message describing Processor object. Next ID: 18"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "processor",
              "processor_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.CreateProcessorRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_processor",
          "description": "Updates the parameters of a single Processor.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_processor():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        processor = visionai_v1alpha1.Processor()\n        processor.display_name = \"display_name_value\"\n\n        request = visionai_v1alpha1.UpdateProcessorRequest(\n            processor=processor,\n        )\n\n        # Make the request\n        operation = client.update_processor(request=request)\n\n        print(\"Waiting f",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "processor": {
                "type": "google.cloud.visionai_v1alpha1.types.Processor",
                "description": "Required. The resource being updated. This corresponds to the ``processor`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Optional. Field mask is used to specify the fields to be overwritten in the Processor resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Processor` Message describing Processor object. Next ID: 18"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "processor",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.UpdateProcessorRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_processor",
          "description": "Deletes a single Processor.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_processor():\n        # Create a client\n        client = visionai_v1alpha1.AppPlatformAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteProcessorRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_processor(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(res",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "platform.DeleteProcessorRequest"
          ]
        }
      }
    ]
  },
  "LiveVideoAnalytics": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_analyses",
          "description": "Lists Analyses in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_analyses():\n        # Create a client\n        client = visionai_v1alpha1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListAnalysesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_analyses(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Opti",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListAnalysesRequest  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.live_video_analytics.pagers.ListAnalysesAsyncPager: Message for response to listing Analyses Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "lva_service.ListAnalysesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_analysis",
          "description": "Gets details of a single Analysis.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_analysis():\n        # Create a client\n        client = visionai_v1alpha1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetAnalysisRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_analysis(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetAnalysisReque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Analysis: Message describing the Analysis object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "lva_service.GetAnalysisRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_analysis",
          "description": "Creates a new Analysis in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_analysis():\n        # Create a client\n        client = visionai_v1alpha1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.CreateAnalysisRequest(\n            parent=\"parent_value\",\n            analysis_id=\"analysis_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_analysis(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        respo",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "analysis": {
                "type": "google.cloud.visionai_v1alpha1.types.Analysis",
                "description": "Required. The resource being created. This corresponds to the ``analysis`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "analysis_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``analysis_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Analysis` Message describing the Analysis object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "analysis",
              "analysis_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "lva_service.CreateAnalysisRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_analysis",
          "description": "Updates the parameters of a single Analysis.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_analysis():\n        # Create a client\n        client = visionai_v1alpha1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.UpdateAnalysisRequest(\n        )\n\n        # Make the request\n        operation = client.update_analysis(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nAr",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "analysis": {
                "type": "google.cloud.visionai_v1alpha1.types.Analysis",
                "description": "Required. The resource being updated. This corresponds to the ``analysis`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Analysis resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Analysis` Message describing the Analysis object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "analysis",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "lva_service.UpdateAnalysisRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_analysis",
          "description": "Deletes a single Analysis.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_analysis():\n        # Create a client\n        client = visionai_v1alpha1.LiveVideoAnalyticsAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteAnalysisRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_analysis(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "lva_service.DeleteAnalysisRequest"
          ]
        }
      }
    ]
  },
  "StreamingService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "send_packets",
          "description": "Send packets to the series.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_send_packets():\n        # Create a client\n        client = visionai_v1alpha1.StreamingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.SendPacketsRequest(\n        )\n\n        # This method expects an iterator which contains\n        # 'visionai_v1alpha1.SendPacketsRequest' objects\n        # Here we create a generator that yields a single `request` for\n        # demonstrative purposes.\n        requests = [request]\n\n        def request_ge",
          "parameters": {
            "type": "object",
            "properties": {
              "requests": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "receive_packets",
          "description": "Receive packets from the series.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_receive_packets():\n        # Create a client\n        client = visionai_v1alpha1.StreamingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ReceivePacketsRequest(\n        )\n\n        # This method expects an iterator which contains\n        # 'visionai_v1alpha1.ReceivePacketsRequest' objects\n        # Here we create a generator that yields a single `request` for\n        # demonstrative purposes.\n        requests = [request]\n\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "requests": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "receive_events",
          "description": "Receive events given the stream name.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_receive_events():\n        # Create a client\n        client = visionai_v1alpha1.StreamingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ReceiveEventsRequest(\n        )\n\n        # This method expects an iterator which contains\n        # 'visionai_v1alpha1.ReceiveEventsRequest' objects\n        # Here we create a generator that yields a single `request` for\n        # demonstrative purposes.\n        requests = [request]\n\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "requests": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "acquire_lease",
          "description": "AcquireLease acquires a lease.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_acquire_lease():\n        # Create a client\n        client = visionai_v1alpha1.StreamingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.AcquireLeaseRequest(\n        )\n\n        # Make the request\n        response = await client.acquire_lease(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.AcquireLeaseRequest, dict]]):\n        The request ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streaming_service.AcquireLeaseRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "renew_lease",
          "description": "RenewLease renews a lease.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_renew_lease():\n        # Create a client\n        client = visionai_v1alpha1.StreamingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.RenewLeaseRequest(\n        )\n\n        # Make the request\n        response = await client.renew_lease(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.RenewLeaseRequest, dict]]):\n        The request object. Requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streaming_service.RenewLeaseRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "release_lease",
          "description": "RleaseLease releases a lease.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_release_lease():\n        # Create a client\n        client = visionai_v1alpha1.StreamingServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ReleaseLeaseRequest(\n        )\n\n        # Make the request\n        response = await client.release_lease(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.ReleaseLeaseRequest, dict]]):\n        The request o",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streaming_service.ReleaseLeaseRequest"
          ]
        }
      }
    ]
  },
  "StreamsService": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "list_clusters",
          "description": "Lists Clusters in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_clusters():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListClustersRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_clusters(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListClustersRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.streams_service.pagers.ListClustersAsyncPager: Message for response to listing Clusters. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.ListClustersRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_cluster",
          "description": "Gets details of a single Cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_cluster():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetClusterRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_cluster(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetClusterRequest, dict]",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Cluster: Message describing the Cluster object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.GetClusterRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_cluster",
          "description": "Creates a new Cluster in a given project and\nlocation.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_cluster():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.CreateClusterRequest(\n            parent=\"parent_value\",\n            cluster_id=\"cluster_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_cluster(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (awa",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "cluster": {
                "type": "google.cloud.visionai_v1alpha1.types.Cluster",
                "description": "Required. The resource being created. This corresponds to the ``cluster`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "cluster_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``cluster_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Cluster` Message describing the Cluster object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "cluster",
              "cluster_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.CreateClusterRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_cluster",
          "description": "Updates the parameters of a single Cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_cluster():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.UpdateClusterRequest(\n        )\n\n        # Make the request\n        operation = client.update_cluster(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "cluster": {
                "type": "google.cloud.visionai_v1alpha1.types.Cluster",
                "description": "Required. The resource being updated This corresponds to the ``cluster`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Cluster resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Cluster` Message describing the Cluster object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "cluster",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.UpdateClusterRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_cluster",
          "description": "Deletes a single Cluster.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_cluster():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteClusterRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_cluster(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.DeleteClusterRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_streams",
          "description": "Lists Streams in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_streams():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListStreamsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_streams(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Uni",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListStreamsRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.streams_service.pagers.ListStreamsAsyncPager: Message for response to listing Streams. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.ListStreamsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_stream",
          "description": "Gets details of a single Stream.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_stream():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetStreamRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_stream(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetStreamRequest, dict]]):\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Stream: Message describing the Stream object. The Stream and the Event resources are many to many; i.e., each Stream resource can associate to many Event resources and each Event resource can associate to many Stream resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.GetStreamRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_stream",
          "description": "Creates a new Stream in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_stream():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.CreateStreamRequest(\n            parent=\"parent_value\",\n            stream_id=\"stream_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_stream(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await ope",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "stream": {
                "type": "google.cloud.visionai_v1alpha1.types.Stream",
                "description": "Required. The resource being created. This corresponds to the ``stream`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "stream_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``stream_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Stream` Message describing the Stream object. The Stream and the Event resources are many to many; i.e., each Stream resource can associate to many Event resources and each Event resource can associate to many Stream resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "stream",
              "stream_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.CreateStreamRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_stream",
          "description": "Updates the parameters of a single Stream.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_stream():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.UpdateStreamRequest(\n        )\n\n        # Make the request\n        operation = client.update_stream(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "stream": {
                "type": "google.cloud.visionai_v1alpha1.types.Stream",
                "description": "Required. The resource being updated. This corresponds to the ``stream`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Stream resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Stream` Message describing the Stream object. The Stream and the Event resources are many to many; i.e., each Stream resource can associate to many Event resources and each Event resource can associate to many Stream resources."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "stream",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.UpdateStreamRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_stream",
          "description": "Deletes a single Stream.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_stream():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteStreamRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_stream(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nA",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.DeleteStreamRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "generate_stream_hls_token",
          "description": "Generate the JWT auth token required to get the\nstream HLS contents.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_generate_stream_hls_token():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GenerateStreamHlsTokenRequest(\n            stream=\"stream_value\",\n        )\n\n        # Make the request\n        response = await client.generate_stream_hls_token(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    reques",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "stream": {
                "type": "str",
                "description": "Required. The name of the stream. This corresponds to the ``stream`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.GenerateStreamHlsTokenResponse: Response message for GenerateStreamHlsToken."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "stream",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.GenerateStreamHlsTokenRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_events",
          "description": "Lists Events in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_events():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListEventsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_events(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[g",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListEventsRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.streams_service.pagers.ListEventsAsyncPager: Message for response to listing Events. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.ListEventsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_event",
          "description": "Gets details of a single Event.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_event():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetEventRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_event(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetEventRequest, dict]]):\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Event: Message describing the Event object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.GetEventRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_event",
          "description": "Creates a new Event in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_event():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.CreateEventRequest(\n            parent=\"parent_value\",\n            event_id=\"event_id_value\",\n        )\n\n        # Make the request\n        operation = client.create_event(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "event": {
                "type": "google.cloud.visionai_v1alpha1.types.Event",
                "description": "Required. The resource being created. This corresponds to the ``event`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "event_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``event_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Event` Message describing the Event object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "event",
              "event_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.CreateEventRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_event",
          "description": "Updates the parameters of a single Event.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_event():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.UpdateEventRequest(\n        )\n\n        # Make the request\n        operation = client.update_event(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "event": {
                "type": "google.cloud.visionai_v1alpha1.types.Event",
                "description": "Required. The resource being updated. This corresponds to the ``event`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Event resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Event` Message describing the Event object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "event",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.UpdateEventRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_event",
          "description": "Deletes a single Event.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_event():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteEventRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_event(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.DeleteEventRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_series",
          "description": "Lists Series in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_series():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListSeriesRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_series(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[g",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Parent value for ListSeriesRequest.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.streams_service.pagers.ListSeriesAsyncPager: Message for response to listing Series. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.ListSeriesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_series",
          "description": "Gets details of a single Series.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_series():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetSeriesRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_series(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetSeriesRequest, dict]]):\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Series: Message describing the Series object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.GetSeriesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_series",
          "description": "Creates a new Series in a given project and location.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_series():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        series = visionai_v1alpha1.Series()\n        series.stream = \"stream_value\"\n        series.event = \"event_value\"\n\n        request = visionai_v1alpha1.CreateSeriesRequest(\n            parent=\"parent_value\",\n            series_id=\"series_id_value\",\n            series=series,\n        )\n\n        # Make the req",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "series": {
                "type": "google.cloud.visionai_v1alpha1.types.Series",
                "description": "Required. The resource being created. This corresponds to the ``series`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "series_id": {
                "type": "str",
                "description": "Required. Id of the requesting object.  This corresponds to the ``series_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Series` Message describing the Series object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "series",
              "series_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.CreateSeriesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_series",
          "description": "Updates the parameters of a single Event.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_series():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        series = visionai_v1alpha1.Series()\n        series.stream = \"stream_value\"\n        series.event = \"event_value\"\n\n        request = visionai_v1alpha1.UpdateSeriesRequest(\n            series=series,\n        )\n\n        # Make the request\n        operation = client.update_series(request=request)\n\n        print(\"Waiting f",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "series": {
                "type": "google.cloud.visionai_v1alpha1.types.Series",
                "description": "Required. The resource being updated This corresponds to the ``series`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "Required. Field mask is used to specify the fields to be overwritten in the Series resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Series` Message describing the Series object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "series",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.UpdateSeriesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_series",
          "description": "Deletes a single Series.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_series():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteSeriesRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_series(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nA",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. Name of the resource. This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.DeleteSeriesRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "materialize_channel",
          "description": "Materialize a channel.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_materialize_channel():\n        # Create a client\n        client = visionai_v1alpha1.StreamsServiceAsyncClient()\n\n        # Initialize request argument(s)\n        channel = visionai_v1alpha1.Channel()\n        channel.stream = \"stream_value\"\n        channel.event = \"event_value\"\n\n        request = visionai_v1alpha1.MaterializeChannelRequest(\n            parent=\"parent_value\",\n            channel_id=\"channel_id_value\",\n            channel=channel,\n        )\n\n        # Make the request\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Value for parent. This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "channel": {
                "type": "google.cloud.visionai_v1alpha1.types.Channel",
                "description": "Required. The resource being created. This corresponds to the ``channel`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "channel_id": {
                "type": "str",
                "description": "Required. Id of the channel. This corresponds to the ``channel_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Channel` Message describing the Channel object."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "channel",
              "channel_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "streams_service.MaterializeChannelRequest"
          ]
        }
      }
    ]
  },
  "Warehouse": {
    "methods": [
      {
        "type": "function",
        "function": {
          "name": "create_asset",
          "description": "Creates an asset inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_asset():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.CreateAssetRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_asset(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.CreateAssetRequest, dict",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this asset will be created. Format: projects/\\ */locations/*/corpora/\\*  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "asset": {
                "type": "google.cloud.visionai_v1alpha1.types.Asset",
                "description": "Required. The asset to create. This corresponds to the ``asset`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "asset_id": {
                "type": "str",
                "description": "Optional. The ID to use for the asset, which will become the final component of the asset's resource name if user choose to specify. Otherwise, asset id will be generated by system.  This value should be up to 63 characters, and valid characters are /[a-z][0-9]-/. The first character must be a letter, the last could be a letter or a number.  This corresponds to the ``asset_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Asset: An asset is a resource in corpus. It represents a media object inside corpus, contains metadata and another resource annotation. Different feature could be applied to the asset to generate annotations. User could specified annotation related to the target asset."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "asset",
              "asset_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.CreateAssetRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_asset",
          "description": "Updates an asset inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_asset():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.UpdateAssetRequest(\n        )\n\n        # Make the request\n        response = await client.update_asset(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.UpdateAssetRequest, dict]]):\n        The request object. Re",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "asset": {
                "type": "google.cloud.visionai_v1alpha1.types.Asset",
                "description": "Required. The asset to update.  The asset's ``name`` field is used to identify the asset to be updated. Format: projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}  This corresponds to the ``asset`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Asset: An asset is a resource in corpus. It represents a media object inside corpus, contains metadata and another resource annotation. Different feature could be applied to the asset to generate annotations. User could specified annotation related to the target asset."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "asset",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.UpdateAssetRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_asset",
          "description": "Reads an asset inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_asset():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetAssetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_asset(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetAssetRequest, dict]]):\n        The r",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the asset to retrieve. Format: projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Asset: An asset is a resource in corpus. It represents a media object inside corpus, contains metadata and another resource annotation. Different feature could be applied to the asset to generate annotations. User could specified annotation related to the target asset."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.GetAssetRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_assets",
          "description": "Lists an list of assets inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_assets():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListAssetsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_assets(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of assets. Format: projects/{project_number}/locations/{location}/corpora/{corpus}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.warehouse.pagers.ListAssetsAsyncPager: Response message for ListAssets.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.ListAssetsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_asset",
          "description": "Deletes asset inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_asset():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteAssetRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        operation = client.delete_asset(request=request)\n\n        print(\"Waiting for operation to complete...\")\n\n        response = (await operation).result()\n\n        # Handle the response\n        print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the asset to delete. Format: projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.protobuf.empty_pb2.Empty` A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance:  service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);  }"
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.DeleteAssetRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_corpus",
          "description": "Creates a corpus inside a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_corpus():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        corpus = visionai_v1alpha1.Corpus()\n        corpus.display_name = \"display_name_value\"\n\n        request = visionai_v1alpha1.CreateCorpusRequest(\n            parent=\"parent_value\",\n            corpus=corpus,\n        )\n\n        # Make the request\n        operation = client.create_corpus(request=request)\n\n        print(\"Waiting for",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. Form: ``projects/{project_number}/locations/{location_id}``  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "corpus": {
                "type": "google.cloud.visionai_v1alpha1.types.Corpus",
                "description": "Required. The corpus to be created. This corresponds to the ``corpus`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.api_core.operation_async.AsyncOperation: An object representing a long-running operation.  The result type for the operation will be :class:`google.cloud.visionai_v1alpha1.types.Corpus` Corpus is a set of video contents for management. Within a corpus, videos share the same data schema. Search is also restricted within a single corpus."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "corpus",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.CreateCorpusRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_corpus",
          "description": "Gets corpus details inside a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_corpus():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetCorpusRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_corpus(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetCorpusRequest, dict]]):\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the corpus to retrieve.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Corpus: Corpus is a set of video contents for management. Within a corpus, videos share the same data schema. Search is also restricted within a single corpus."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.GetCorpusRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_corpus",
          "description": "Updates a corpus in a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_corpus():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        corpus = visionai_v1alpha1.Corpus()\n        corpus.display_name = \"display_name_value\"\n\n        request = visionai_v1alpha1.UpdateCorpusRequest(\n            corpus=corpus,\n        )\n\n        # Make the request\n        response = await client.update_corpus(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "corpus": {
                "type": "google.cloud.visionai_v1alpha1.types.Corpus",
                "description": "Required. The corpus which replaces the resource on the server.  This corresponds to the ``corpus`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Corpus: Corpus is a set of video contents for management. Within a corpus, videos share the same data schema. Search is also restricted within a single corpus."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "corpus",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.UpdateCorpusRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_corpora",
          "description": "Lists all corpora in a project.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_corpora():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListCorporaRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_corpora(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visi",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The resource name of the project from which to list corpora.  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.warehouse.pagers.ListCorporaAsyncPager: Response message for ListCorpora.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.ListCorporaRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_corpus",
          "description": "Deletes a corpus only if its empty.\nReturns empty response.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_corpus():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteCorpusRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_corpus(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.DeleteCorpusRequest, dict]]):\n        The request object. Reque",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The resource name of the corpus to delete.  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.DeleteCorpusRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_data_schema",
          "description": "Creates data schema inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_data_schema():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        data_schema = visionai_v1alpha1.DataSchema()\n        data_schema.key = \"key_value\"\n\n        request = visionai_v1alpha1.CreateDataSchemaRequest(\n            parent=\"parent_value\",\n            data_schema=data_schema,\n        )\n\n        # Make the request\n        response = await client.create_data_schema(request=request)\n\n ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this data schema will be created. Format: projects/\\ */locations/*/corpora/\\*  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "data_schema": {
                "type": "google.cloud.visionai_v1alpha1.types.DataSchema",
                "description": "Required. The data schema to create. This corresponds to the ``data_schema`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.DataSchema: Data schema indicates how the user specified annotation is interpreted in the system."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "data_schema",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.CreateDataSchemaRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_data_schema",
          "description": "Updates data schema inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_data_schema():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        data_schema = visionai_v1alpha1.DataSchema()\n        data_schema.key = \"key_value\"\n\n        request = visionai_v1alpha1.UpdateDataSchemaRequest(\n            data_schema=data_schema,\n        )\n\n        # Make the request\n        response = await client.update_data_schema(request=request)\n\n        # Handle the response\n      ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "data_schema": {
                "type": "google.cloud.visionai_v1alpha1.types.DataSchema",
                "description": "Required. The data schema's ``name`` field is used to identify the data schema to be updated. Format: projects/{project_number}/locations/{location}/corpora/{corpus}/dataSchemas/{data_schema}  This corresponds to the ``data_schema`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.DataSchema: Data schema indicates how the user specified annotation is interpreted in the system."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "data_schema",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.UpdateDataSchemaRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_data_schema",
          "description": "Gets data schema inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_data_schema():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetDataSchemaRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_data_schema(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetDataSchemaRequest",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the data schema to retrieve. Format: projects/{project_number}/locations/{location_id}/corpora/{corpus_id}/dataSchemas/{data_schema_id}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.DataSchema: Data schema indicates how the user specified annotation is interpreted in the system."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.GetDataSchemaRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_data_schema",
          "description": "Deletes data schema inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_data_schema():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteDataSchemaRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_data_schema(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.DeleteDataSchemaRequest, dict]]):\n        The request object. Request mess",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the data schema to delete. Format: projects/{project_number}/locations/{location_id}/corpora/{corpus_id}/dataSchemas/{data_schema_id}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.DeleteDataSchemaRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_data_schemas",
          "description": "Lists a list of data schemas inside corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_data_schemas():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListDataSchemasRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_data_schemas(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Option",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of data schemas. Format: projects/{project_number}/locations/{location_id}/corpora/{corpus_id}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.warehouse.pagers.ListDataSchemasAsyncPager: Response message for ListDataSchemas.  Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.ListDataSchemasRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_annotation",
          "description": "Creates annotation inside asset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_create_annotation():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.CreateAnnotationRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        response = await client.create_annotation(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.CreateAn",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this annotation will be created. Format: projects/\\ */locations/*/corpora/*/assets/*  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "annotation": {
                "type": "google.cloud.visionai_v1alpha1.types.Annotation",
                "description": "Required. The annotation to create. This corresponds to the ``annotation`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "annotation_id": {
                "type": "str",
                "description": "Optional. The ID to use for the annotation, which will become the final component of the annotation's resource name if user choose to specify. Otherwise, annotation id will be generated by system.  This value should be up to 63 characters, and valid characters are /[a-z][0-9]-/. The first character must be a letter, the last could be a letter or a number.  This corresponds to the ``annotation_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Annotation: An annotation is a resource in asset. It represents a key-value mapping of content in asset."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "annotation",
              "annotation_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.CreateAnnotationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_annotation",
          "description": "Reads annotation inside asset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_annotation():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetAnnotationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_annotation(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.GetAnnotationRequest, d",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the annotation to retrieve. Format: projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Annotation: An annotation is a resource in asset. It represents a key-value mapping of content in asset."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.GetAnnotationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_annotations",
          "description": "Lists a list of annotations inside asset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_annotations():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListAnnotationsRequest(\n        )\n\n        # Make the request\n        page_result = client.list_annotations(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "The parent, which owns this collection of annotations. Format: projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.warehouse.pagers.ListAnnotationsAsyncPager: Request message for ListAnnotations API. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.ListAnnotationsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_annotation",
          "description": "Updates annotation inside asset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_update_annotation():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.UpdateAnnotationRequest(\n        )\n\n        # Make the request\n        response = await client.update_annotation(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.UpdateAnnotationRequest, dict]]):\n        T",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "annotation": {
                "type": "google.cloud.visionai_v1alpha1.types.Annotation",
                "description": "Required. The annotation to update. The annotation's ``name`` field is used to identify the annotation to be updated. Format: projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}  This corresponds to the ``annotation`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.Annotation: An annotation is a resource in asset. It represents a key-value mapping of content in asset."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "annotation",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.UpdateAnnotationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_annotation",
          "description": "Deletes annotation inside asset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_annotation():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteAnnotationRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_annotation(request=request)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.DeleteAnnotationRequest, dict]]):\n        The request object. Request message ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the annotation to delete. Format: projects/{project_number}/locations/{location}/corpora/{corpus}/assets/{asset}/annotations/{annotation}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.DeleteAnnotationRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "ingest_asset",
          "description": "Ingests data for the asset. It is not allowed to\ningest a data chunk which is already expired according\nto TTL. This method is only available via the gRPC API\n(not HTTP since bi-directional streaming is not\nsupported via HTTP).\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_ingest_asset():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        config = visionai_v1alpha1.Config()\n        config.asset = \"asset_value\"\n\n        request = visionai_v1alpha1.IngestAssetRequest(\n        ",
          "parameters": {
            "type": "object",
            "properties": {
              "requests": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "requests",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": []
        }
      },
      {
        "type": "function",
        "function": {
          "name": "clip_asset",
          "description": "Generates clips for downloading. The api takes in a time range,\nand generates a clip of the first content available after\nstart_time and before end_time, which may overflow beyond these\nbounds. Returned clips are truncated if the total size of the\nclips are larger than 100MB.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_clip_asset():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ClipAssetRequest(\n            name=\"name_value\",\n        )\n\n   ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.ClipAssetRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "generate_hls_uri",
          "description": "Generates a uri for an HLS manifest. The api takes in\na collection of time ranges, and generates a URI for an\nHLS manifest that covers all the requested time ranges.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_generate_hls_uri():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GenerateHlsUriRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.generate_hls_uri(request=request)\n\n        #",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.GenerateHlsUriRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "create_search_config",
          "description": "Creates a search configuration inside a corpus.\n\nPlease follow the rules below to create a valid\nCreateSearchConfigRequest. --- General Rules ---\n\n1. Request.search_config_id must not be associated with an\n   existing SearchConfig.\n2. Request must contain at least one non-empty\n   search_criteria_property or facet_property.\n3. mapped_fields must not be empty, and must map to existing UGA\n   keys.\n4. All mapped_fields must be of the same type.\n5. All mapped_fields must share the same granularity.\n6. All mapped_fields must share the same semantic SearchConfig\n   match options. For property-specific rules, please reference\n   the comments for FacetProperty and SearchCriteriaProperty.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent resource where this search configuration will be created. Format: projects/\\ */locations/*/corpora/\\*  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "search_config": {
                "type": "google.cloud.visionai_v1alpha1.types.SearchConfig",
                "description": "Required. The search config to create.  This corresponds to the ``search_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "search_config_id": {
                "type": "str",
                "description": "Required. ID to use for the new search config. Will become the final component of the SearchConfig's resource name. This value should be up to 63 characters, and valid characters are /[a-z][0-9]-_/. The first character must be a letter, the last could be a letter or a number.  This corresponds to the ``search_config_id`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.SearchConfig: SearchConfig stores different properties that will affect search behaviors and search results."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "search_config",
              "search_config_id",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.CreateSearchConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "update_search_config",
          "description": "Updates a search configuration inside a corpus.\n\nPlease follow the rules below to create a valid\nUpdateSearchConfigRequest. --- General Rules ---\n\n1. Request.search_configuration.name must already exist.\n2. Request must contain at least one non-empty\n   search_criteria_property or facet_property.\n3. mapped_fields must not be empty, and must map to existing UGA\n   keys.\n4. All mapped_fields must be of the same type.\n5. All mapped_fields must share the same granularity.\n6. All mapped_fields must share the same semantic SearchConfig\n   match options. For property-specific rules, please reference\n   the comments for FacetProperty and SearchCriteriaProperty.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "search_config": {
                "type": "google.cloud.visionai_v1alpha1.types.SearchConfig",
                "description": "Required. The search configuration to update.  The search configuration's ``name`` field is used to identify the resource to be updated. Format: projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}  This corresponds to the ``search_config`` field on the ``request`` instance; if ``request`` is provided, this should not be set."
              },
              "update_mask": {
                "type": "google.protobuf.field_mask_pb2.FieldMask",
                "description": "The list of fields to be updated. If left unset, all field paths will be updated/overwritten.  This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.SearchConfig: SearchConfig stores different properties that will affect search behaviors and search results."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "search_config",
              "update_mask",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.UpdateSearchConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "get_search_config",
          "description": "Gets a search configuration inside a corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_get_search_config():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.GetSearchConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        response = await client.get_search_config(request=request)\n\n        # Handle the response\n        print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1alpha1.types.G",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the search configuration to retrieve. Format: projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.types.SearchConfig: SearchConfig stores different properties that will affect search behaviors and search results."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.GetSearchConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "delete_search_config",
          "description": "Deletes a search configuration inside a corpus.\n\nFor a DeleteSearchConfigRequest to be valid,\nRequest.search_configuration.name must already exist.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_delete_search_config():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.DeleteSearchConfigRequest(\n            name=\"name_value\",\n        )\n\n        # Make the request\n        await client.delete_search_config(request=request)\n\nArgs:\n    request (Optiona",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "name": {
                "type": "str",
                "description": "Required. The name of the search configuration to delete. Format: projects/{project_number}/locations/{location}/corpora/{corpus}/searchConfigs/{search_config}  This corresponds to the ``name`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "name",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.DeleteSearchConfigRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "list_search_configs",
          "description": "Lists all search configurations inside a corpus.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_list_search_configs():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.ListSearchConfigsRequest(\n            parent=\"parent_value\",\n        )\n\n        # Make the request\n        page_result = client.list_search_configs(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    requ",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "parent": {
                "type": "str",
                "description": "Required. The parent, which owns this collection of search configurations. Format: projects/{project_number}/locations/{location}/corpora/{corpus}  This corresponds to the ``parent`` field on the ``request`` instance; if ``request`` is provided, this should not be set. retry (google.api_core.retry_async.AsyncRetry): Designation of what errors, if any, should be retried. timeout (float): The timeout for this request. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata.  Returns: google.cloud.visionai_v1alpha1.services.warehouse.pagers.ListSearchConfigsAsyncPager: Response message for ListSearchConfigs. Iterating over this object will yield results and resolve additional pages automatically."
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "parent",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.ListSearchConfigsRequest"
          ]
        }
      },
      {
        "type": "function",
        "function": {
          "name": "search_assets",
          "description": "Search media asset.\n\n.. code-block:: python\n\n    # This snippet has been automatically generated and should be regarded as a\n    # code template only.\n    # It will require modifications to work:\n    # - It may require correct/in-range values for request initialization.\n    # - It may require specifying regional endpoints when creating the service\n    #   client as shown in:\n    #   https://googleapis.dev/python/google-api-core/latest/client_options.html\n    from google.cloud import visionai_v1alpha1\n\n    async def sample_search_assets():\n        # Create a client\n        client = visionai_v1alpha1.WarehouseAsyncClient()\n\n        # Initialize request argument(s)\n        request = visionai_v1alpha1.SearchAssetsRequest(\n            corpus=\"corpus_value\",\n        )\n\n        # Make the request\n        page_result = client.search_assets(request=request)\n\n        # Handle the response\n        async for response in page_result:\n            print(response)\n\nArgs:\n    request (Optional[Union[google.cloud.visionai_v1al",
          "parameters": {
            "type": "object",
            "properties": {
              "request": {
                "type": "string",
                "description": ""
              },
              "retry": {
                "type": "string",
                "description": ""
              },
              "timeout": {
                "type": "string",
                "description": ""
              },
              "metadata": {
                "type": "string",
                "description": ""
              }
            },
            "required": [
              "request",
              "retry",
              "timeout",
              "metadata"
            ]
          },
          "request_types": [
            "warehouse.SearchAssetsRequest"
          ]
        }
      }
    ]
  }
}