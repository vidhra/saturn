Metadata-Version: 2.4
Name: saturn
Version: 0.1.0
Summary: A natural language interface for Google Cloud Platform APIs.
Author-email: Your Name <your.email@example.com>
Project-URL: Homepage, https://github.com/vidhra/Saturn
Project-URL: Bug Tracker, https://github.com/vidhar/Saturn/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: openai>=1.3.0
Requires-Dist: google-cloud-aiplatform>=1.38.0
Requires-Dist: anthropic>=0.15.0
Requires-Dist: mistralai>=0.1.0
Requires-Dist: google-auth>=2.0.0
Requires-Dist: google-api-python-client>=2.0.0
Requires-Dist: google-cloud>=0.31.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: PyYAML>=6.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: typer[all]>=0.9.0
Requires-Dist: json-repair>=0.19.0
Requires-Dist: rich>=13.0.0
Requires-Dist: llama-index>=0.11.00
Requires-Dist: llama-index-core>=0.11.00
Requires-Dist: llama-index-embeddings-huggingface>=0.2.0
Requires-Dist: llama-index-embeddings-google-genai>=0.1.0
Requires-Dist: google-generativeai>=0.5.0
Requires-Dist: sentence-transformers>=2.2.0
Requires-Dist: llama-index-vector-stores-chroma>=0.1.7
Requires-Dist: chromadb>=0.4.22
Requires-Dist: llama-index-vector-stores-duckdb>=0.1.5
Requires-Dist: duckdb>=0.10.1
Dynamic: license-file

# Saturn - Agents for cloud

Saturn aims to provide a conversational interface for interacting with Cloud APIs. Instead of writing scripts or using the Cloud Console UI, users can state their goals in natural language, and Saturn will translate them into the appropriate API calls.

## Setup

1.  **Clone the repository:**
    ```bash
    git clone <your-repo-url>
    cd saturn # Or your project directory name
    ```
2.  **Create and activate a virtual environment (Recommended):**
    ```bash
    # Using venv
    python -m venv venv
    source venv/bin/activate # Linux/macOS
    # .\venv\Scripts\activate # Windows

    # Or using conda
    # conda create -n saturnenv python=3.10 # Adjust Python version if needed
    # conda activate saturnenv
    ```
3.  **Install dependencies:** Install the package in editable mode along with its dependencies using the `pyproject.toml` file.
    ```bash
    pip install -e .
    ```

## Configuration

Configuration is handled via `config.yaml` and environment variables (loaded from a `.env` file if present).

1.  **`config.yaml`:** Create this file in the project root. Add base configuration like default LLM provider, API keys (though environment variables are generally preferred for secrets), and GCP project ID.
    ```yaml
    # Example config.yaml
    llm_provider: openai # 'gemini', 'claude', 'mistral'
    # openai_api_key: 'sk-...' # Better to use env var
    gcp_project_id: your-gcp-project-id # Replace with your default project
    kb_path: api_defs
    max_retries: 3
    # openai_model: gpt-4o # Optional model specification
    ```
2.  **`.env` File:** Create this file in the project root for sensitive information like API keys. **Ensure this file is added to your `.gitignore`!**
    ```dotenv
    # Example .env
    OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    GEMINI_API_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    # ANTHROPIC_API_KEY=...
    # MISTRAL_API_KEY=...
    GCP_PROJECT_ID=your-gcp-project-id # Can also be set here
    # GCP_CREDENTIALS_PATH=/path/to/your/service-account-key.json # Optional
    ```
3.  **GCP Authentication:** Ensure your environment is authenticated to GCP. The easiest way for local development is Application Default Credentials (ADC):
    ```bash
    gcloud auth application-default login
    ```
    Alternatively, set the `GCP_CREDENTIALS_PATH` environment variable (or config value) to point to a service account key JSON file.

## Usage

Run Saturn from your terminal using the installed command (defined via `pyproject.toml` pointing to `saturn.cli:app`):

```bash
saturn run "<your natural language query>" [OPTIONS]
```

**Example:**

```bash
saturn run "Create a serverless VPC access connector named 'dev-connector' in us-central1 with IP range 10.9.0.0/28 in the default network." --project-id my-dev-project
```

**Common Options:**

*   `--project-id TEXT`: Specify the target GCP project ID (overrides config/env).
*   `--provider TEXT`: Specify the LLM provider (e.g., `openai`, `gemini`).
*   `--model TEXT`: Specify a specific LLM model for the chosen provider.
*   `--creds-path TEXT`: Path to a GCP service account key file.
*   `--max-retries INTEGER`: Number of attempts for the orchestrator loop.
*   `--kb-path TEXT`: Path to the API definitions directory.

Use `saturn run --help` to see all available options.

## State Recording

The `RunStateLogger` is integrated into the orchestrator. After each run, it generates/updates `saturn_run_state.json` in the project root. This file contains:
*   `run_info`: Details about the overall run (query, times, status, errors).
*   `nodes`: Detailed state history for each tool call (node) attempted during the run, including arguments, status transitions (PENDING, READY, RUNNING, COMPLETED/FAILED), timestamps, and final output or error.

## RAG Engine Setup and Usage

The RAG (Retrieval Augmented Generation) engine uses LlamaIndex to provide relevant documentation snippets to the LLM when generating `gcloud` commands. This improves the accuracy and relevance of the generated commands.

### 1. Prerequisites

*   Ensure Python and `pip` are installed.
*   Your Saturn project should be cloned, and you should be in the project root directory.
*   Activate your virtual environment.

### 2. Install RAG Dependencies

First, ensure the base Saturn dependencies are installed:
```bash
pip install -e .
```
Then, install the LlamaIndex packages required for RAG functionality:

*   **Core LlamaIndex & Local Embeddings (Recommended Default):**
    ```bash
    pip install llama-index>=0.10.0 llama-index-embeddings-huggingface>=0.1.0 sentence-transformers>=2.2.0
    ```
*   **For ChromaDB Vector Store:**
    ```bash
    pip install llama-index-vector-stores-chroma>=0.1.0 chromadb>=0.4.0
    ```
*   **For DuckDB Vector Store:**
    ```bash
    pip install llama-index-vector-stores-duckdb>=0.1.0 duckdb>=0.9.0
    ```
    You can install all of them if you plan to switch between vector stores.

### 3. Prepare Documentation

*   The RAG engine expects Markdown files (`.md`) as its knowledge source.
*   Place your scraped GCP documentation (or any relevant Markdown files) in a directory. The default path configured in `saturn/cli.py` and `saturn/orchestrator.py` (example block) is `internal/tools/gcloud_online_docs_markdown`.
*   You can change this path using the `--docs-path` option in the `ingest-docs` command or by setting the `GCLOUD_DOCS_PATH` environment variable.

### 4. Ingest Documents into a Vector Store

Use the `ingest-docs` command to process your Markdown files and store their embeddings in your chosen vector store. This step needs to be done once initially, and then whenever your documentation changes.

**Command Structure:**
```bash
saturn ingest-docs --vector-store <vector_store_type> [OPTIONS]
```

**Key Options:**
*   `--vector-store TEXT`: Choose the vector store: `default` (in-memory, not persistent for ingest), `chroma`, or `duckdb`. (Required, though defaults to 'chroma' if `VECTOR_STORE` env var not set).
*   `--docs-path TEXT`: Path to your Markdown documents. Defaults to `internal/tools/gcloud_online_docs_markdown` or `GCLOUD_DOCS_PATH` env var.
*   `--rag-embed-model TEXT`: Specify the embedding model. Defaults to `local:BAAI/bge-small-en-v1.5` or `RAG_EMBED_MODEL` env var.
*   `--force-rebuild`: If set, attempts to delete existing data in the persistent store (ChromaDB collection or DuckDB table) before ingesting.

**Database Path and Name/Collection Configuration:**
For persistent stores (`chroma`, `duckdb`), Saturn now uses predefined default paths and names for the databases/collections. These are defined in `saturn/rag_engine.py` and are typically within a `db/` subdirectory in your project root (e.g., `./db/chroma_db` for ChromaDB data, `./db/duckdb_store/vector_store.duckdb` for DuckDB file). You can see these defaults printed in the console when you run the `ingest-docs` command.

**Examples:**

*   **Ingest into ChromaDB (using default paths/names):**
    ```bash
    saturn ingest-docs --docs-path ./internal/tools/gcloud_online_docs_markdown --vector-store chroma
    ```
    To force a rebuild:
    ```bash
    saturn ingest-docs --vector-store chroma --force-rebuild
    ```

*   **Ingest into DuckDB (using default paths/names):**
    ```bash
    saturn ingest-docs --docs-path ./internal/tools/gcloud_online_docs_markdown --vector-store duckdb
    ```

*   **Ingest into In-Memory Store (not persistent, for quick tests):**
    ```bash
    saturn ingest-docs --docs-path ./internal/tools/gcloud_online_docs_markdown --vector-store default
    ```
    Note: For the `default` (in-memory) store, ingestion via `ingest-docs` is primarily for testing the ingestion pipeline itself. The `saturn run` command will build its own in-memory index if `default` is chosen and `rag_docs_path` is valid.

### 5. Running Queries with the RAG Engine

Once your documents are ingested into a persistent vector store (ChromaDB or DuckDB using the default paths/names), the `saturn run` command will attempt to use it if configured correctly. The RAGEngine will try to load the existing index from the default persistent storage locations for the chosen vector store.

**Configuration for `saturn run` to use a specific RAG store (defaults will be used if not specified):**

*   **Environment Variables (recommended for persistent settings):**
    ```bash
    export VECTOR_STORE="chroma"                # or "duckdb", or "default"
    export RAG_EMBED_MODEL="local:BAAI/bge-small-en-v1.5" # Or your preferred model
    # No need to set CHROMA_DB_PATH, DUCKDB_PATH etc. if using defaults for `run` command,
    # as the RAGEngine will use its internal defaults when db_config is not explicitly passed by `run`.
    # The `run` command's CLI options for DB paths can still override these if needed for advanced cases.

    saturn run "your query"
    ```
*   **CLI Options (overrides environment variables and `config.yaml`):**
The `saturn run` command still retains options like `--db-path` and `--db-collection-table` if you need to point it to a *non-default* persistent store location for a specific run. However, for simplicity, if you've ingested to the default locations, you often only need:
    ```bash
    # Using ChromaDB (assuming ingested to default Chroma path/collection)
    saturn run "your query" --vector-store chroma

    # Using DuckDB (assuming ingested to default DuckDB path/file/table)
    saturn run "your query" --vector-store duckdb
    ```

If `VECTOR_STORE` is set to `default` (or if the chosen persistent store cannot be loaded and `rag_docs_path` is available), `saturn run` will build an in-memory RAG index from the `--rag-docs-path` for that session.

## State Recording

After each run, the orchestrator saves a detailed log to a uniquely named JSON file in the `logs/` directory (e.g., `logs/saturn_run_your_query_timestamp_uuid.json`). This file contains:
*   `run_info`: Details about the overall run (query, times, status, errors).
*   `dag`: The planned DAG structure (nodes, descriptions, dependencies, execution order).
*   `nodes`: Detailed state history for each step (node) attempted during the run, including arguments, status transitions, timestamps, and final output (including executed command) or error.
